/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@esbuild-plugins/node-globals-polyfill/process.js
function defaultSetTimout() {
  throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
  throw new Error("clearTimeout has not been defined");
}
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    return setTimeout(fun, 0);
  }
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e2) {
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    return clearTimeout(marker);
  }
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      return cachedClearTimeout.call(null, marker);
    } catch (e2) {
      return cachedClearTimeout.call(this, marker);
    }
  }
}
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
function nextTick(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
function noop() {
}
function binding(name) {
  throw new Error("process.binding is not supported");
}
function cwd() {
  return "/";
}
function chdir(dir) {
  throw new Error("process.chdir is not supported");
}
function umask() {
  return 0;
}
function hrtime(previousTimestamp) {
  var clocktime = performanceNow.call(performance2) * 1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor(clocktime % 1 * 1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds, nanoseconds];
}
function uptime() {
  var currentTime = new Date();
  var dif = currentTime - startTime;
  return dif / 1e3;
}
var cachedSetTimeout, cachedClearTimeout, queue, draining, currentQueue, queueIndex, title, platform, browser, env, argv, version, versions, release, config, on, addListener, once, off, removeListener, removeAllListeners, emit, performance2, performanceNow, startTime, process, defines;
var init_process = __esm({
  "node_modules/@esbuild-plugins/node-globals-polyfill/process.js"() {
    cachedSetTimeout = defaultSetTimout;
    cachedClearTimeout = defaultClearTimeout;
    if (typeof window.setTimeout === "function") {
      cachedSetTimeout = setTimeout;
    }
    if (typeof window.clearTimeout === "function") {
      cachedClearTimeout = clearTimeout;
    }
    queue = [];
    draining = false;
    queueIndex = -1;
    Item.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    title = "browser";
    platform = "browser";
    browser = true;
    env = {};
    argv = [];
    version = "";
    versions = {};
    release = {};
    config = {};
    on = noop;
    addListener = noop;
    once = noop;
    off = noop;
    removeListener = noop;
    removeAllListeners = noop;
    emit = noop;
    performance2 = window.performance || {};
    performanceNow = performance2.now || performance2.mozNow || performance2.msNow || performance2.oNow || performance2.webkitNow || function() {
      return new Date().getTime();
    };
    startTime = new Date();
    process = {
      nextTick,
      title,
      browser,
      env,
      argv,
      version,
      versions,
      on,
      addListener,
      once,
      off,
      removeListener,
      removeAllListeners,
      emit,
      binding,
      cwd,
      chdir,
      umask,
      hrtime,
      platform,
      release,
      config,
      uptime
    };
    defines = {};
    Object.keys(defines).forEach((key) => {
      const segs = key.split(".");
      let target = process;
      for (let i = 0; i < segs.length; i++) {
        const seg = segs[i];
        if (i === segs.length - 1) {
          target[seg] = defines[key];
        } else {
          target = target[seg] || (target[seg] = {});
        }
      }
    });
  }
});

// node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js
function init() {
  inited = true;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
}
function base64toByteArray(b64) {
  if (!inited) {
    init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  placeHolders = b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0;
  arr = new Arr(len * 3 / 4 - placeHolders);
  l = placeHolders > 0 ? len - 4 : len;
  var L = 0;
  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 255;
    arr[L++] = tmp >> 8 & 255;
    arr[L++] = tmp & 255;
  }
  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 255;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 255;
    arr[L++] = tmp & 255;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join("");
}
function base64fromByteArray(uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var output = "";
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(
      encodeChunk(
        uint8,
        i,
        i + maxChunkLength > len2 ? len2 : i + maxChunkLength
      )
    );
  }
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 63];
    output += "==";
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 63];
    output += lookup[tmp << 2 & 63];
    output += "=";
  }
  parts.push(output);
  return parts.join("");
}
function kMaxLength() {
  return Buffer2.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
}
function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError("Invalid typed array length");
  }
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    that = new Uint8Array(length);
    that.__proto__ = Buffer2.prototype;
  } else {
    if (that === null) {
      that = new Buffer2(length);
    }
    that.length = length;
  }
  return that;
}
function Buffer2(arg, encodingOrOffset, length) {
  if (!Buffer2.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer2)) {
    return new Buffer2(arg, encodingOrOffset, length);
  }
  if (typeof arg === "number") {
    if (typeof encodingOrOffset === "string") {
      throw new Error(
        "If encoding is specified then the first argument must be a string"
      );
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length);
}
function from(that, value, encodingOrOffset, length) {
  if (typeof value === "number") {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }
  if (typeof value === "string") {
    return fromString(that, value, encodingOrOffset);
  }
  return fromObject(that, value);
}
function assertSize(size) {
  if (typeof size !== "number") {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}
function alloc(that, size, fill2, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill2 !== void 0) {
    return typeof encoding === "string" ? createBuffer(that, size).fill(fill2, encoding) : createBuffer(that, size).fill(fill2);
  }
  return createBuffer(that, size);
}
function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer2.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}
function fromString(that, string, encoding) {
  if (typeof encoding !== "string" || encoding === "") {
    encoding = "utf8";
  }
  if (!Buffer2.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }
  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);
  if (actual !== length) {
    that = that.slice(0, actual);
  }
  return that;
}
function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}
function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength;
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError("'offset' is out of bounds");
  }
  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError("'length' is out of bounds");
  }
  if (byteOffset === void 0 && length === void 0) {
    array = new Uint8Array(array);
  } else if (length === void 0) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    that = array;
    that.__proto__ = Buffer2.prototype;
  } else {
    that = fromArrayLike(that, array);
  }
  return that;
}
function fromObject(that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);
    if (that.length === 0) {
      return that;
    }
    obj.copy(that, 0, 0, len);
    return that;
  }
  if (obj) {
    if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
      if (typeof obj.length !== "number" || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }
  throw new TypeError(
    "First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object."
  );
}
function checked(length) {
  if (length >= kMaxLength()) {
    throw new RangeError(
      "Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes"
    );
  }
  return length | 0;
}
function internalIsBuffer(b) {
  return !!(b != null && b._isBuffer);
}
function byteLength(string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== "string") {
    string = "" + string;
  }
  var len = string.length;
  if (len === 0)
    return 0;
  var loweredCase = false;
  for (; ; ) {
    switch (encoding) {
      case "ascii":
      case "latin1":
      case "binary":
        return len;
      case "utf8":
      case "utf-8":
      case void 0:
        return utf8ToBytes(string).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return len * 2;
      case "hex":
        return len >>> 1;
      case "base64":
        return base64ToBytes(string).length;
      default:
        if (loweredCase)
          return utf8ToBytes(string).length;
        encoding = ("" + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
function slowToString(encoding, start, end) {
  var loweredCase = false;
  if (start === void 0 || start < 0) {
    start = 0;
  }
  if (start > this.length) {
    return "";
  }
  if (end === void 0 || end > this.length) {
    end = this.length;
  }
  if (end <= 0) {
    return "";
  }
  end >>>= 0;
  start >>>= 0;
  if (end <= start) {
    return "";
  }
  if (!encoding)
    encoding = "utf8";
  while (true) {
    switch (encoding) {
      case "hex":
        return hexSlice(this, start, end);
      case "utf8":
      case "utf-8":
        return utf8Slice(this, start, end);
      case "ascii":
        return asciiSlice(this, start, end);
      case "latin1":
      case "binary":
        return latin1Slice(this, start, end);
      case "base64":
        return base64Slice(this, start, end);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return utf16leSlice(this, start, end);
      default:
        if (loweredCase)
          throw new TypeError("Unknown encoding: " + encoding);
        encoding = (encoding + "").toLowerCase();
        loweredCase = true;
    }
  }
}
function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  if (buffer.length === 0)
    return -1;
  if (typeof byteOffset === "string") {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 2147483647) {
    byteOffset = 2147483647;
  } else if (byteOffset < -2147483648) {
    byteOffset = -2147483648;
  }
  byteOffset = +byteOffset;
  if (isNaN(byteOffset)) {
    byteOffset = dir ? 0 : buffer.length - 1;
  }
  if (byteOffset < 0)
    byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir)
      return -1;
    else
      byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir)
      byteOffset = 0;
    else
      return -1;
  }
  if (typeof val === "string") {
    val = Buffer2.from(val, encoding);
  }
  if (internalIsBuffer(val)) {
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === "number") {
    val = val & 255;
    if (Buffer2.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(
          buffer,
          val,
          byteOffset
        );
      } else {
        return Uint8Array.prototype.lastIndexOf.call(
          buffer,
          val,
          byteOffset
        );
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }
  throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;
  if (encoding !== void 0) {
    encoding = String(encoding).toLowerCase();
    if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }
  function read2(buf, i2) {
    if (indexSize === 1) {
      return buf[i2];
    } else {
      return buf.readUInt16BE(i2 * indexSize);
    }
  }
  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read2(arr, i) === read2(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1)
          foundIndex = i;
        if (i - foundIndex + 1 === valLength)
          return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1)
          i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength)
      byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read2(arr, i + j) !== read2(val, j)) {
          found = false;
          break;
        }
      }
      if (found)
        return i;
    }
  }
  return -1;
}
function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }
  var strLen = string.length;
  if (strLen % 2 !== 0)
    throw new TypeError("Invalid hex string");
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed))
      return i;
    buf[offset + i] = parsed;
  }
  return i;
}
function utf8Write(buf, string, offset, length) {
  return blitBuffer(
    utf8ToBytes(string, buf.length - offset),
    buf,
    offset,
    length
  );
}
function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}
function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
  return blitBuffer(
    utf16leToBytes(string, buf.length - offset),
    buf,
    offset,
    length
  );
}
function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64fromByteArray(buf);
  } else {
    return base64fromByteArray(buf.slice(start, end));
  }
}
function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;
      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 128) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 192) === 128) {
            tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
            if (tempCodePoint > 127) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
            tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
            if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
            tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
            if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
              codePoint = tempCodePoint;
            }
          }
      }
    }
    if (codePoint === null) {
      codePoint = 65533;
      bytesPerSequence = 1;
    } else if (codePoint > 65535) {
      codePoint -= 65536;
      res.push(codePoint >>> 10 & 1023 | 55296);
      codePoint = 56320 | codePoint & 1023;
    }
    res.push(codePoint);
    i += bytesPerSequence;
  }
  return decodeCodePointsArray(res);
}
function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints);
  }
  var res = "";
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    );
  }
  return res;
}
function asciiSlice(buf, start, end) {
  var ret = "";
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 127);
  }
  return ret;
}
function latin1Slice(buf, start, end) {
  var ret = "";
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}
function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0)
    start = 0;
  if (!end || end < 0 || end > len)
    end = len;
  var out = "";
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}
function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = "";
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0)
    throw new RangeError("offset is not uint");
  if (offset + ext > length)
    throw new RangeError("Trying to access beyond buffer length");
}
function checkInt(buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf))
    throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min)
    throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length)
    throw new RangeError("Index out of range");
}
function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0)
    value = 65535 + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}
function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0)
    value = 4294967295 + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
  }
}
function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length)
    throw new RangeError("Index out of range");
  if (offset < 0)
    throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(
      buf,
      value,
      offset,
      4,
      34028234663852886e22,
      -34028234663852886e22
    );
  }
  ieee754write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}
function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(
      buf,
      value,
      offset,
      8,
      17976931348623157e292,
      -17976931348623157e292
    );
  }
  ieee754write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}
function base64clean(str) {
  str = stringtrim(str).replace(INVALID_BASE64_RE, "");
  if (str.length < 2)
    return "";
  while (str.length % 4 !== 0) {
    str = str + "=";
  }
  return str;
}
function stringtrim(str) {
  if (str.trim)
    return str.trim();
  return str.replace(/^\s+|\s+$/g, "");
}
function toHex(n) {
  if (n < 16)
    return "0" + n.toString(16);
  return n.toString(16);
}
function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];
  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);
    if (codePoint > 55295 && codePoint < 57344) {
      if (!leadSurrogate) {
        if (codePoint > 56319) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
          continue;
        } else if (i + 1 === length) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
          continue;
        }
        leadSurrogate = codePoint;
        continue;
      }
      if (codePoint < 56320) {
        if ((units -= 3) > -1)
          bytes.push(239, 191, 189);
        leadSurrogate = codePoint;
        continue;
      }
      codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
    } else if (leadSurrogate) {
      if ((units -= 3) > -1)
        bytes.push(239, 191, 189);
    }
    leadSurrogate = null;
    if (codePoint < 128) {
      if ((units -= 1) < 0)
        break;
      bytes.push(codePoint);
    } else if (codePoint < 2048) {
      if ((units -= 2) < 0)
        break;
      bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
    } else if (codePoint < 65536) {
      if ((units -= 3) < 0)
        break;
      bytes.push(
        codePoint >> 12 | 224,
        codePoint >> 6 & 63 | 128,
        codePoint & 63 | 128
      );
    } else if (codePoint < 1114112) {
      if ((units -= 4) < 0)
        break;
      bytes.push(
        codePoint >> 18 | 240,
        codePoint >> 12 & 63 | 128,
        codePoint >> 6 & 63 | 128,
        codePoint & 63 | 128
      );
    } else {
      throw new Error("Invalid code point");
    }
  }
  return bytes;
}
function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    byteArray.push(str.charCodeAt(i) & 255);
  }
  return byteArray;
}
function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0)
      break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }
  return byteArray;
}
function base64ToBytes(str) {
  return base64toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length)
      break;
    dst[i + offset] = src[i];
  }
  return i;
}
function isnan(val) {
  return val !== val;
}
function isBuffer(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
}
function isFastBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
}
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isFastBuffer(obj.slice(0, 0));
}
function ieee754read(buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
  }
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
  }
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
}
function ieee754write(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
  }
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
  }
  buffer[offset + i - d] |= s * 128;
}
var lookup, revLookup, Arr, inited, MAX_ARGUMENTS_LENGTH, INVALID_BASE64_RE;
var init_Buffer = __esm({
  "node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js"() {
    init_process();
    init_buffer();
    lookup = [];
    revLookup = [];
    Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    inited = false;
    Buffer2.TYPED_ARRAY_SUPPORT = window.TYPED_ARRAY_SUPPORT !== void 0 ? window.TYPED_ARRAY_SUPPORT : true;
    Buffer2.poolSize = 8192;
    Buffer2._augment = function(arr) {
      arr.__proto__ = Buffer2.prototype;
      return arr;
    };
    Buffer2.from = function(value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length);
    };
    Buffer2.kMaxLength = kMaxLength();
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      Buffer2.prototype.__proto__ = Uint8Array.prototype;
      Buffer2.__proto__ = Uint8Array;
      if (typeof Symbol !== "undefined" && Symbol.species && Buffer2[Symbol.species] === Buffer2) {
      }
    }
    Buffer2.alloc = function(size, fill2, encoding) {
      return alloc(null, size, fill2, encoding);
    };
    Buffer2.allocUnsafe = function(size) {
      return allocUnsafe(null, size);
    };
    Buffer2.allocUnsafeSlow = function(size) {
      return allocUnsafe(null, size);
    };
    Buffer2.isBuffer = isBuffer;
    Buffer2.compare = function compare(a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError("Arguments must be Buffers");
      }
      if (a === b)
        return 0;
      var x = a.length;
      var y = b.length;
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    Buffer2.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer2.concat = function concat(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer2.alloc(0);
      }
      var i;
      if (length === void 0) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }
      var buffer = Buffer2.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer;
    };
    Buffer2.byteLength = byteLength;
    Buffer2.prototype._isBuffer = true;
    Buffer2.prototype.swap16 = function swap16() {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer2.prototype.toString = function toString() {
      var length = this.length | 0;
      if (length === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer2.prototype.equals = function equals(b) {
      if (!internalIsBuffer(b))
        throw new TypeError("Argument must be a Buffer");
      if (this === b)
        return true;
      return Buffer2.compare(this, b) === 0;
    };
    Buffer2.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError("Argument must be a Buffer");
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);
      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    Buffer2.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      var remaining = this.length - offset;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
            return asciiWrite(this, string, offset, length);
          case "latin1":
          case "binary":
            return latin1Write(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer2.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    MAX_ARGUMENTS_LENGTH = 4096;
    Buffer2.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      var newBuf;
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer2.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer2(sliceLen, void 0);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }
      return newBuf;
    };
    Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      var val = this[offset + --byteLength2];
      var mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength2] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var i = byteLength2;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 256)) {
        val += this[offset + --i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754read(this, offset, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754read(this, offset, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754read(this, offset, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754read(this, offset, false, 52, 8);
    };
    Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var mul = 1;
      var i = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var i = byteLength2 - 1;
      var mul = 1;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 255, 0);
      if (!Buffer2.TYPED_ARRAY_SUPPORT)
        value = Math.floor(value);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i = byteLength2 - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 127, -128);
      if (!Buffer2.TYPED_ARRAY_SUPPORT)
        value = Math.floor(value);
      if (value < 0)
        value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("sourceStart out of bounds");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len = end - start;
      var i;
      if (this === target && start < targetStart && targetStart < end) {
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1e3 || !Buffer2.TYPED_ARRAY_SUPPORT) {
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
      } else if (typeof val === "number") {
        val = val & 255;
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      var i;
      if (typeof val === "number") {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer2(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }
      return this;
    };
    INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
  }
});

// node_modules/@esbuild-plugins/node-globals-polyfill/_buffer.js
var init_buffer = __esm({
  "node_modules/@esbuild-plugins/node-globals-polyfill/_buffer.js"() {
    init_Buffer();
  }
});

// node-modules-polyfills:punycode
function error(type) {
  throw new RangeError(errors[type]);
}
function map(array, fn) {
  var length = array.length;
  var result = [];
  while (length--) {
    result[length] = fn(array[length]);
  }
  return result;
}
function mapDomain(string, fn) {
  var parts = string.split("@");
  var result = "";
  if (parts.length > 1) {
    result = parts[0] + "@";
    string = parts[1];
  }
  string = string.replace(regexSeparators, ".");
  var labels = string.split(".");
  var encoded = map(labels, fn).join(".");
  return result + encoded;
}
function ucs2decode(string) {
  var output = [], counter = 0, length = string.length, value, extra;
  while (counter < length) {
    value = string.charCodeAt(counter++);
    if (value >= 55296 && value <= 56319 && counter < length) {
      extra = string.charCodeAt(counter++);
      if ((extra & 64512) == 56320) {
        output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
      } else {
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
}
function digitToBasic(digit, flag) {
  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
}
function adapt(delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
    delta = floor(delta / baseMinusTMin);
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
}
function encode(input) {
  var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
  input = ucs2decode(input);
  inputLength = input.length;
  n = initialN;
  delta = 0;
  bias = initialBias;
  for (j = 0; j < inputLength; ++j) {
    currentValue = input[j];
    if (currentValue < 128) {
      output.push(stringFromCharCode(currentValue));
    }
  }
  handledCPCount = basicLength = output.length;
  if (basicLength) {
    output.push(delimiter);
  }
  while (handledCPCount < inputLength) {
    for (m = maxInt, j = 0; j < inputLength; ++j) {
      currentValue = input[j];
      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    }
    handledCPCountPlusOne = handledCPCount + 1;
    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      error("overflow");
    }
    delta += (m - n) * handledCPCountPlusOne;
    n = m;
    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];
      if (currentValue < n && ++delta > maxInt) {
        error("overflow");
      }
      if (currentValue == n) {
        for (q = delta, k = base; ; k += base) {
          t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
          if (q < t) {
            break;
          }
          qMinusT = q - t;
          baseMinusT = base - t;
          output.push(
            stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
          );
          q = floor(qMinusT / baseMinusT);
        }
        output.push(stringFromCharCode(digitToBasic(q, 0)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }
    ++delta;
    ++n;
  }
  return output.join("");
}
function toASCII(input) {
  return mapDomain(input, function(string) {
    return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
  });
}
var maxInt, base, tMin, tMax, skew, damp, initialBias, initialN, delimiter, regexNonASCII, regexSeparators, errors, baseMinusTMin, floor, stringFromCharCode;
var init_punycode = __esm({
  "node-modules-polyfills:punycode"() {
    init_process();
    init_buffer();
    maxInt = 2147483647;
    base = 36;
    tMin = 1;
    tMax = 26;
    skew = 38;
    damp = 700;
    initialBias = 72;
    initialN = 128;
    delimiter = "-";
    regexNonASCII = /[^\x20-\x7E]/;
    regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
    errors = {
      "overflow": "Overflow: input needs wider integers to process",
      "not-basic": "Illegal input >= 0x80 (not a basic code point)",
      "invalid-input": "Invalid input"
    };
    baseMinusTMin = base - tMin;
    floor = Math.floor;
    stringFromCharCode = String.fromCharCode;
  }
});

// node-modules-polyfills:process
function defaultSetTimout2() {
  throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout2() {
  throw new Error("clearTimeout has not been defined");
}
function Item2(fun, array) {
  this.fun = fun;
  this.array = array;
}
var cachedSetTimeout2, cachedClearTimeout2, performance3, performanceNow2, startTime2;
var init_process2 = __esm({
  "node-modules-polyfills:process"() {
    init_process();
    init_buffer();
    cachedSetTimeout2 = defaultSetTimout2;
    cachedClearTimeout2 = defaultClearTimeout2;
    if (typeof window.setTimeout === "function") {
      cachedSetTimeout2 = setTimeout;
    }
    if (typeof window.clearTimeout === "function") {
      cachedClearTimeout2 = clearTimeout;
    }
    Item2.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    performance3 = window.performance || {};
    performanceNow2 = performance3.now || performance3.mozNow || performance3.msNow || performance3.oNow || performance3.webkitNow || function() {
      return new Date().getTime();
    };
    startTime2 = new Date();
  }
});

// node_modules/rollup-plugin-node-polyfills/polyfills/inherits.js
var inherits;
var init_inherits = __esm({
  "node_modules/rollup-plugin-node-polyfills/polyfills/inherits.js"() {
    init_process();
    init_buffer();
    if (typeof Object.create === "function") {
      inherits = function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      inherits = function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
  }
});

// node-modules-polyfills:util
function inspect(obj, opts) {
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  if (arguments.length >= 3)
    ctx.depth = arguments[2];
  if (arguments.length >= 4)
    ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    ctx.showHidden = opts;
  } else if (opts) {
    _extend(ctx, opts);
  }
  if (isUndefined(ctx.showHidden))
    ctx.showHidden = false;
  if (isUndefined(ctx.depth))
    ctx.depth = 2;
  if (isUndefined(ctx.colors))
    ctx.colors = false;
  if (isUndefined(ctx.customInspect))
    ctx.customInspect = true;
  if (ctx.colors)
    ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];
  if (style) {
    return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
  } else {
    return str;
  }
}
function stylizeNoColor(str, styleType) {
  return str;
}
function arrayToHash(array) {
  var hash = {};
  array.forEach(function(val, idx) {
    hash[val] = true;
  });
  return hash;
}
function formatValue(ctx, value, recurseTimes) {
  if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== inspect && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);
  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }
  if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
    return formatError(value);
  }
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ": " + value.name : "";
      return ctx.stylize("[Function" + name + "]", "special");
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), "date");
    }
    if (isError(value)) {
      return formatError(value);
    }
  }
  var base2 = "", array = false, braces = ["{", "}"];
  if (isArray(value)) {
    array = true;
    braces = ["[", "]"];
  }
  if (isFunction(value)) {
    var n = value.name ? ": " + value.name : "";
    base2 = " [Function" + n + "]";
  }
  if (isRegExp(value)) {
    base2 = " " + RegExp.prototype.toString.call(value);
  }
  if (isDate(value)) {
    base2 = " " + Date.prototype.toUTCString.call(value);
  }
  if (isError(value)) {
    base2 = " " + formatError(value);
  }
  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base2 + braces[1];
  }
  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
    } else {
      return ctx.stylize("[Object]", "special");
    }
  }
  ctx.seen.push(value);
  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }
  ctx.seen.pop();
  return reduceToSingleString(output, base2, braces);
}
function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize("undefined", "undefined");
  if (isString(value)) {
    var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
    return ctx.stylize(simple, "string");
  }
  if (isNumber(value))
    return ctx.stylize("" + value, "number");
  if (isBoolean(value))
    return ctx.stylize("" + value, "boolean");
  if (isNull(value))
    return ctx.stylize("null", "null");
}
function formatError(value) {
  return "[" + Error.prototype.toString.call(value) + "]";
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(
        ctx,
        value,
        recurseTimes,
        visibleKeys,
        String(i),
        true
      ));
    } else {
      output.push("");
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(
        ctx,
        value,
        recurseTimes,
        visibleKeys,
        key,
        true
      ));
    }
  });
  return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize("[Getter/Setter]", "special");
    } else {
      str = ctx.stylize("[Getter]", "special");
    }
  } else {
    if (desc.set) {
      str = ctx.stylize("[Setter]", "special");
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = "[" + key + "]";
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf("\n") > -1) {
        if (array) {
          str = str.split("\n").map(function(line) {
            return "  " + line;
          }).join("\n").substr(2);
        } else {
          str = "\n" + str.split("\n").map(function(line) {
            return "   " + line;
          }).join("\n");
        }
      }
    } else {
      str = ctx.stylize("[Circular]", "special");
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify("" + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, "name");
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, "string");
    }
  }
  return name + ": " + str;
}
function reduceToSingleString(output, base2, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf("\n") >= 0)
      numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
  }, 0);
  if (length > 60) {
    return braces[0] + (base2 === "" ? "" : base2 + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
  }
  return braces[0] + base2 + " " + output.join(", ") + " " + braces[1];
}
function isArray(ar) {
  return Array.isArray(ar);
}
function isBoolean(arg) {
  return typeof arg === "boolean";
}
function isNull(arg) {
  return arg === null;
}
function isNullOrUndefined(arg) {
  return arg == null;
}
function isNumber(arg) {
  return typeof arg === "number";
}
function isString(arg) {
  return typeof arg === "string";
}
function isUndefined(arg) {
  return arg === void 0;
}
function isRegExp(re) {
  return isObject(re) && objectToString(re) === "[object RegExp]";
}
function isObject(arg) {
  return typeof arg === "object" && arg !== null;
}
function isDate(d) {
  return isObject(d) && objectToString(d) === "[object Date]";
}
function isError(e) {
  return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
}
function isFunction(arg) {
  return typeof arg === "function";
}
function objectToString(o) {
  return Object.prototype.toString.call(o);
}
function _extend(origin, add) {
  if (!add || !isObject(add))
    return origin;
  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
var init_util = __esm({
  "node-modules-polyfills:util"() {
    init_process();
    init_buffer();
    init_process2();
    init_inherits();
    inspect.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      // "name": intentionally not styling
      "regexp": "red"
    };
  }
});

// node-modules-polyfills:querystring
function hasOwnProperty2(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
function stringifyPrimitive(v) {
  switch (typeof v) {
    case "string":
      return v;
    case "boolean":
      return v ? "true" : "false";
    case "number":
      return isFinite(v) ? v : "";
    default:
      return "";
  }
}
function stringify(obj, sep, eq, name) {
  sep = sep || "&";
  eq = eq || "=";
  if (obj === null) {
    obj = void 0;
  }
  if (typeof obj === "object") {
    return map2(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray2(obj[k])) {
        return map2(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }
  if (!name)
    return "";
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
}
function map2(xs, f) {
  if (xs.map)
    return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}
function parse(qs, sep, eq, options) {
  sep = sep || "&";
  eq = eq || "=";
  var obj = {};
  if (typeof qs !== "string" || qs.length === 0) {
    return obj;
  }
  var regexp = /\+/g;
  qs = qs.split(sep);
  var maxKeys = 1e3;
  if (options && typeof options.maxKeys === "number") {
    maxKeys = options.maxKeys;
  }
  var len = qs.length;
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }
  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = "";
    }
    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);
    if (!hasOwnProperty2(obj, k)) {
      obj[k] = v;
    } else if (isArray2(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }
  return obj;
}
var isArray2, objectKeys;
var init_querystring = __esm({
  "node-modules-polyfills:querystring"() {
    init_process();
    init_buffer();
    isArray2 = Array.isArray || function(xs) {
      return Object.prototype.toString.call(xs) === "[object Array]";
    };
    objectKeys = Object.keys || function(obj) {
      var res = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key))
          res.push(key);
      }
      return res;
    };
  }
});

// node-modules-polyfills:url
var url_exports = {};
__export(url_exports, {
  Url: () => Url,
  default: () => url_default,
  format: () => urlFormat,
  parse: () => urlParse,
  resolve: () => urlResolve,
  resolveObject: () => urlResolveObject
});
function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}
function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && isObject(url) && url instanceof Url)
    return url;
  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}
function parse2(self2, url, parseQueryString, slashesDenoteHost) {
  if (!isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }
  var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, "/");
  url = uSplit.join(splitter);
  var rest = url;
  rest = rest.trim();
  if (!slashesDenoteHost && url.split("#").length === 1) {
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      self2.path = rest;
      self2.href = rest;
      self2.pathname = simplePath[1];
      if (simplePath[2]) {
        self2.search = simplePath[2];
        if (parseQueryString) {
          self2.query = parse(self2.search.substr(1));
        } else {
          self2.query = self2.search.substr(1);
        }
      } else if (parseQueryString) {
        self2.search = "";
        self2.query = {};
      }
      return self2;
    }
  }
  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    self2.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === "//";
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      self2.slashes = true;
    }
  }
  var i, hec, l, p;
  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    var hostEnd = -1;
    for (i = 0; i < hostEndingChars.length; i++) {
      hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    var auth, atSign;
    if (hostEnd === -1) {
      atSign = rest.lastIndexOf("@");
    } else {
      atSign = rest.lastIndexOf("@", hostEnd);
    }
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      self2.auth = decodeURIComponent(auth);
    }
    hostEnd = -1;
    for (i = 0; i < nonHostChars.length; i++) {
      hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    if (hostEnd === -1)
      hostEnd = rest.length;
    self2.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);
    parseHost(self2);
    self2.hostname = self2.hostname || "";
    var ipv6Hostname = self2.hostname[0] === "[" && self2.hostname[self2.hostname.length - 1] === "]";
    if (!ipv6Hostname) {
      var hostparts = self2.hostname.split(/\./);
      for (i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part)
          continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = "";
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              newpart += "x";
            } else {
              newpart += part[j];
            }
          }
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = "/" + notHost.join(".") + rest;
            }
            self2.hostname = validParts.join(".");
            break;
          }
        }
      }
    }
    if (self2.hostname.length > hostnameMaxLen) {
      self2.hostname = "";
    } else {
      self2.hostname = self2.hostname.toLowerCase();
    }
    if (!ipv6Hostname) {
      self2.hostname = toASCII(self2.hostname);
    }
    p = self2.port ? ":" + self2.port : "";
    var h = self2.hostname || "";
    self2.host = h + p;
    self2.href += self2.host;
    if (ipv6Hostname) {
      self2.hostname = self2.hostname.substr(1, self2.hostname.length - 2);
      if (rest[0] !== "/") {
        rest = "/" + rest;
      }
    }
  }
  if (!unsafeProtocol[lowerProto]) {
    for (i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }
  var hash = rest.indexOf("#");
  if (hash !== -1) {
    self2.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf("?");
  if (qm !== -1) {
    self2.search = rest.substr(qm);
    self2.query = rest.substr(qm + 1);
    if (parseQueryString) {
      self2.query = parse(self2.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    self2.search = "";
    self2.query = {};
  }
  if (rest)
    self2.pathname = rest;
  if (slashedProtocol[lowerProto] && self2.hostname && !self2.pathname) {
    self2.pathname = "/";
  }
  if (self2.pathname || self2.search) {
    p = self2.pathname || "";
    var s = self2.search || "";
    self2.path = p + s;
  }
  self2.href = format(self2);
  return self2;
}
function urlFormat(obj) {
  if (isString(obj))
    obj = parse2({}, obj);
  return format(obj);
}
function format(self2) {
  var auth = self2.auth || "";
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ":");
    auth += "@";
  }
  var protocol = self2.protocol || "", pathname = self2.pathname || "", hash = self2.hash || "", host = false, query = "";
  if (self2.host) {
    host = auth + self2.host;
  } else if (self2.hostname) {
    host = auth + (self2.hostname.indexOf(":") === -1 ? self2.hostname : "[" + this.hostname + "]");
    if (self2.port) {
      host += ":" + self2.port;
    }
  }
  if (self2.query && isObject(self2.query) && Object.keys(self2.query).length) {
    query = stringify(self2.query);
  }
  var search = self2.search || query && "?" + query || "";
  if (protocol && protocol.substr(-1) !== ":")
    protocol += ":";
  if (self2.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = "//" + (host || "");
    if (pathname && pathname.charAt(0) !== "/")
      pathname = "/" + pathname;
  } else if (!host) {
    host = "";
  }
  if (hash && hash.charAt(0) !== "#")
    hash = "#" + hash;
  if (search && search.charAt(0) !== "?")
    search = "?" + search;
  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace("#", "%23");
  return protocol + host + pathname + search + hash;
}
function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}
function urlResolveObject(source, relative) {
  if (!source)
    return relative;
  return urlParse(source, false, true).resolveObject(relative);
}
function parseHost(self2) {
  var host = self2.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ":") {
      self2.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host)
    self2.hostname = host;
}
var url_default, protocolPattern, portPattern, simplePathPattern, delims, unwise, autoEscape, nonHostChars, hostEndingChars, hostnameMaxLen, hostnamePartPattern, hostnamePartStart, unsafeProtocol, hostlessProtocol, slashedProtocol;
var init_url = __esm({
  "node-modules-polyfills:url"() {
    init_process();
    init_buffer();
    init_punycode();
    init_util();
    init_querystring();
    url_default = {
      parse: urlParse,
      resolve: urlResolve,
      resolveObject: urlResolveObject,
      format: urlFormat,
      Url
    };
    protocolPattern = /^([a-z0-9.+-]+:)/i;
    portPattern = /:[0-9]*$/;
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
    delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"];
    unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims);
    autoEscape = ["'"].concat(unwise);
    nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape);
    hostEndingChars = ["/", "?", "#"];
    hostnameMaxLen = 255;
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    unsafeProtocol = {
      "javascript": true,
      "javascript:": true
    };
    hostlessProtocol = {
      "javascript": true,
      "javascript:": true
    };
    slashedProtocol = {
      "http": true,
      "https": true,
      "ftp": true,
      "gopher": true,
      "file": true,
      "http:": true,
      "https:": true,
      "ftp:": true,
      "gopher:": true,
      "file:": true
    };
    Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
      return parse2(this, url, parseQueryString, slashesDenoteHost);
    };
    Url.prototype.format = function() {
      return format(this);
    };
    Url.prototype.resolve = function(relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };
    Url.prototype.resolveObject = function(relative) {
      if (isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }
      var result = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      }
      result.hash = relative.hash;
      if (relative.href === "") {
        result.href = result.format();
        return result;
      }
      if (relative.slashes && !relative.protocol) {
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== "protocol")
            result[rkey] = relative[rkey];
        }
        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
          result.path = result.pathname = "/";
        }
        result.href = result.format();
        return result;
      }
      var relPath;
      if (relative.protocol && relative.protocol !== result.protocol) {
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);
          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result[k] = relative[k];
          }
          result.href = result.format();
          return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          relPath = (relative.pathname || "").split("/");
          while (relPath.length && !(relative.host = relPath.shift()))
            ;
          if (!relative.host)
            relative.host = "";
          if (!relative.hostname)
            relative.hostname = "";
          if (relPath[0] !== "")
            relPath.unshift("");
          if (relPath.length < 2)
            relPath.unshift("");
          result.pathname = relPath.join("/");
        } else {
          result.pathname = relative.pathname;
        }
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        if (result.pathname || result.search) {
          var p = result.pathname || "";
          var s = result.search || "";
          result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }
      var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
      relPath = relative.pathname && relative.pathname.split("/") || [];
      if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
          if (srcPath[0] === "")
            srcPath[0] = result.host;
          else
            srcPath.unshift(result.host);
        }
        result.host = "";
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === "")
              relPath[0] = relative.host;
            else
              relPath.unshift(relative.host);
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
      }
      var authInHost;
      if (isRelAbs) {
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
      } else if (relPath.length) {
        if (!srcPath)
          srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (!isNullOrUndefined(relative.search)) {
        if (psychotic) {
          result.hostname = result.host = srcPath.shift();
          authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }
        result.search = relative.search;
        result.query = relative.query;
        if (!isNull(result.pathname) || !isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        }
        result.href = result.format();
        return result;
      }
      if (!srcPath.length) {
        result.pathname = null;
        if (result.search) {
          result.path = "/" + result.search;
        } else {
          result.path = null;
        }
        result.href = result.format();
        return result;
      }
      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
      var up = 0;
      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];
        if (last === ".") {
          srcPath.splice(i, 1);
        } else if (last === "..") {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      }
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift("..");
        }
      }
      if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
        srcPath.unshift("");
      }
      if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
        srcPath.push("");
      }
      var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
      if (psychotic) {
        result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
      mustEndAbs = mustEndAbs || result.host && srcPath.length;
      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift("");
      }
      if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
      } else {
        result.pathname = srcPath.join("/");
      }
      if (!isNull(result.pathname) || !isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
      }
      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };
    Url.prototype.parseHost = function() {
      return parseHost(this);
    };
  }
});

// node-modules-polyfills-commonjs:url
var require_url = __commonJS({
  "node-modules-polyfills-commonjs:url"(exports, module2) {
    init_process();
    init_buffer();
    var polyfill = (init_url(), __toCommonJS(url_exports));
    if (polyfill && polyfill.default) {
      module2.exports = polyfill.default;
      for (let k in polyfill) {
        module2.exports[k] = polyfill[k];
      }
    } else if (polyfill) {
      module2.exports = polyfill;
    }
  }
});

// node-modules-polyfills:module
var module_exports = {};
__export(module_exports, {
  default: () => module_default
});
var module_default;
var init_module = __esm({
  "node-modules-polyfills:module"() {
    init_process();
    init_buffer();
    module_default = {};
  }
});

// node_modules/wasmoon/dist/index.js
var require_dist = __commonJS({
  "node_modules/wasmoon/dist/index.js"(exports, module2) {
    init_process();
    init_buffer();
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.wasmoon = {}));
    })(exports, function(exports2) {
      "use strict";
      var _documentCurrentScript = typeof document !== "undefined" ? document.currentScript : null;
      exports2.LuaReturn = void 0;
      (function(LuaReturn) {
        LuaReturn[LuaReturn["Ok"] = 0] = "Ok";
        LuaReturn[LuaReturn["Yield"] = 1] = "Yield";
        LuaReturn[LuaReturn["ErrorRun"] = 2] = "ErrorRun";
        LuaReturn[LuaReturn["ErrorSyntax"] = 3] = "ErrorSyntax";
        LuaReturn[LuaReturn["ErrorMem"] = 4] = "ErrorMem";
        LuaReturn[LuaReturn["ErrorErr"] = 5] = "ErrorErr";
        LuaReturn[LuaReturn["ErrorFile"] = 6] = "ErrorFile";
      })(exports2.LuaReturn || (exports2.LuaReturn = {}));
      const PointerSize = 4;
      const LUA_MULTRET = -1;
      const LUAI_MAXSTACK = 1e6;
      const LUA_REGISTRYINDEX = -LUAI_MAXSTACK - 1e3;
      exports2.LuaType = void 0;
      (function(LuaType) {
        LuaType[LuaType["None"] = -1] = "None";
        LuaType[LuaType["Nil"] = 0] = "Nil";
        LuaType[LuaType["Boolean"] = 1] = "Boolean";
        LuaType[LuaType["LightUserdata"] = 2] = "LightUserdata";
        LuaType[LuaType["Number"] = 3] = "Number";
        LuaType[LuaType["String"] = 4] = "String";
        LuaType[LuaType["Table"] = 5] = "Table";
        LuaType[LuaType["Function"] = 6] = "Function";
        LuaType[LuaType["Userdata"] = 7] = "Userdata";
        LuaType[LuaType["Thread"] = 8] = "Thread";
      })(exports2.LuaType || (exports2.LuaType = {}));
      exports2.LuaEventCodes = void 0;
      (function(LuaEventCodes) {
        LuaEventCodes[LuaEventCodes["Call"] = 0] = "Call";
        LuaEventCodes[LuaEventCodes["Ret"] = 1] = "Ret";
        LuaEventCodes[LuaEventCodes["Line"] = 2] = "Line";
        LuaEventCodes[LuaEventCodes["Count"] = 3] = "Count";
        LuaEventCodes[LuaEventCodes["TailCall"] = 4] = "TailCall";
      })(exports2.LuaEventCodes || (exports2.LuaEventCodes = {}));
      exports2.LuaEventMasks = void 0;
      (function(LuaEventMasks) {
        LuaEventMasks[LuaEventMasks["Call"] = 1] = "Call";
        LuaEventMasks[LuaEventMasks["Ret"] = 2] = "Ret";
        LuaEventMasks[LuaEventMasks["Line"] = 4] = "Line";
        LuaEventMasks[LuaEventMasks["Count"] = 8] = "Count";
      })(exports2.LuaEventMasks || (exports2.LuaEventMasks = {}));
      exports2.LuaLibraries = void 0;
      (function(LuaLibraries) {
        LuaLibraries["Base"] = "_G";
        LuaLibraries["Coroutine"] = "coroutine";
        LuaLibraries["Table"] = "table";
        LuaLibraries["IO"] = "io";
        LuaLibraries["OS"] = "os";
        LuaLibraries["String"] = "string";
        LuaLibraries["UTF8"] = "utf8";
        LuaLibraries["Math"] = "math";
        LuaLibraries["Debug"] = "debug";
        LuaLibraries["Package"] = "package";
      })(exports2.LuaLibraries || (exports2.LuaLibraries = {}));
      class LuaTimeoutError extends Error {
      }
      class Decoration {
        constructor(target, options) {
          this.target = target;
          this.options = options;
        }
      }
      function decorate(target, options) {
        return new Decoration(target, options);
      }
      class Pointer extends Number {
      }
      class MultiReturn extends Array {
      }
      const INSTRUCTION_HOOK_COUNT = 1e3;
      class Thread {
        constructor(lua, typeExtensions, address, parent) {
          this.closed = false;
          this.lua = lua;
          this.typeExtensions = typeExtensions;
          this.address = address;
          this.parent = parent;
        }
        newThread() {
          const address = this.lua.lua_newthread(this.address);
          if (!address) {
            throw new Error("lua_newthread returned a null pointer");
          }
          return new Thread(this.lua, this.typeExtensions, address, this.parent || this);
        }
        resetThread() {
          this.assertOk(this.lua.lua_resetthread(this.address));
        }
        loadString(luaCode, name) {
          const size = this.lua.module.lengthBytesUTF8(luaCode);
          const pointerSize = size + 1;
          const bufferPointer = this.lua.module._malloc(pointerSize);
          try {
            this.lua.module.stringToUTF8(luaCode, bufferPointer, pointerSize);
            this.assertOk(this.lua.luaL_loadbufferx(this.address, bufferPointer, size, name !== null && name !== void 0 ? name : bufferPointer, null));
          } finally {
            this.lua.module._free(bufferPointer);
          }
        }
        loadFile(filename) {
          this.assertOk(this.lua.luaL_loadfilex(this.address, filename, null));
        }
        resume(argCount = 0) {
          const dataPointer = this.lua.module._malloc(PointerSize);
          try {
            this.lua.module.setValue(dataPointer, 0, "i32");
            const luaResult = this.lua.lua_resume(this.address, null, argCount, dataPointer);
            return {
              result: luaResult,
              resultCount: this.lua.module.getValue(dataPointer, "i32")
            };
          } finally {
            this.lua.module._free(dataPointer);
          }
        }
        getTop() {
          return this.lua.lua_gettop(this.address);
        }
        setTop(index) {
          this.lua.lua_settop(this.address, index);
        }
        remove(index) {
          return this.lua.lua_remove(this.address, index);
        }
        setField(index, name, value) {
          index = this.lua.lua_absindex(this.address, index);
          this.pushValue(value);
          this.lua.lua_setfield(this.address, index, name);
        }
        async run(argCount = 0, options) {
          const originalTimeout = this.timeout;
          try {
            if ((options === null || options === void 0 ? void 0 : options.timeout) !== void 0) {
              this.setTimeout(Date.now() + options.timeout);
            }
            let resumeResult = this.resume(argCount);
            while (resumeResult.result === exports2.LuaReturn.Yield) {
              if (this.timeout && Date.now() > this.timeout) {
                if (resumeResult.resultCount > 0) {
                  this.pop(resumeResult.resultCount);
                }
                throw new LuaTimeoutError(`thread timeout exceeded`);
              }
              if (resumeResult.resultCount > 0) {
                const lastValue = this.getValue(-1);
                this.pop(resumeResult.resultCount);
                if (lastValue === Promise.resolve(lastValue)) {
                  await lastValue;
                } else {
                  await new Promise((resolve) => setImmediate(resolve));
                }
              } else {
                await new Promise((resolve) => setImmediate(resolve));
              }
              resumeResult = this.resume(0);
            }
            this.assertOk(resumeResult.result);
            return this.getStackValues();
          } finally {
            if ((options === null || options === void 0 ? void 0 : options.timeout) !== void 0) {
              this.setTimeout(originalTimeout);
            }
          }
        }
        runSync(argCount = 0) {
          const base2 = this.getTop() - argCount - 1;
          this.assertOk(this.lua.lua_pcallk(this.address, argCount, LUA_MULTRET, 0, 0, null));
          return this.getStackValues(base2);
        }
        pop(count = 1) {
          this.lua.lua_pop(this.address, count);
        }
        call(name, ...args) {
          const type = this.lua.lua_getglobal(this.address, name);
          if (type !== exports2.LuaType.Function) {
            throw new Error(`A function of type '${type}' was pushed, expected is ${exports2.LuaType.Function}`);
          }
          for (const arg of args) {
            this.pushValue(arg);
          }
          const base2 = this.getTop() - args.length - 1;
          this.lua.lua_callk(this.address, args.length, LUA_MULTRET, 0, null);
          return this.getStackValues(base2);
        }
        getStackValues(start = 0) {
          const returns = this.getTop() - start;
          const returnValues = new MultiReturn(returns);
          for (let i = 0; i < returns; i++) {
            returnValues[i] = this.getValue(start + i + 1);
          }
          return returnValues;
        }
        stateToThread(L) {
          var _a;
          return L === ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.address) ? this.parent : new Thread(this.lua, this.typeExtensions, L, this.parent || this);
        }
        pushValue(rawValue, userdata) {
          const decoratedValue = this.getValueDecorations(rawValue);
          const target = decoratedValue.target;
          if (target instanceof Thread) {
            const isMain = this.lua.lua_pushthread(target.address) === 1;
            if (!isMain) {
              this.lua.lua_xmove(target.address, this.address, 1);
            }
            return;
          }
          const startTop = this.getTop();
          switch (typeof target) {
            case "undefined":
              this.lua.lua_pushnil(this.address);
              break;
            case "number":
              if (Number.isInteger(target)) {
                this.lua.lua_pushinteger(this.address, BigInt(target));
              } else {
                this.lua.lua_pushnumber(this.address, target);
              }
              break;
            case "string":
              this.lua.lua_pushstring(this.address, target);
              break;
            case "boolean":
              this.lua.lua_pushboolean(this.address, target ? 1 : 0);
              break;
            default:
              if (!this.typeExtensions.find((wrapper) => wrapper.extension.pushValue(this, decoratedValue, userdata))) {
                throw new Error(`The type '${typeof target}' is not supported by Lua`);
              }
          }
          if (decoratedValue.options.metatable) {
            this.setMetatable(-1, decoratedValue.options.metatable);
          }
          if (this.getTop() !== startTop + 1) {
            throw new Error(`pushValue expected stack size ${startTop + 1}, got ${this.getTop()}`);
          }
        }
        setMetatable(index, metatable) {
          index = this.lua.lua_absindex(this.address, index);
          if (this.lua.lua_getmetatable(this.address, index)) {
            this.pop(1);
            const name = this.getMetatableName(index);
            throw new Error(`data already has associated metatable: ${name || "unknown name"}`);
          }
          this.pushValue(metatable);
          this.lua.lua_setmetatable(this.address, index);
        }
        getMetatableName(index) {
          const metatableNameType = this.lua.luaL_getmetafield(this.address, index, "__name");
          if (metatableNameType === exports2.LuaType.Nil) {
            return void 0;
          }
          if (metatableNameType !== exports2.LuaType.String) {
            this.pop(1);
            return void 0;
          }
          const name = this.lua.lua_tolstring(this.address, -1, null);
          this.pop(1);
          return name;
        }
        getValue(index, inputType, userdata) {
          index = this.lua.lua_absindex(this.address, index);
          const type = inputType !== null && inputType !== void 0 ? inputType : this.lua.lua_type(this.address, index);
          switch (type) {
            case exports2.LuaType.None:
              return void 0;
            case exports2.LuaType.Nil:
              return null;
            case exports2.LuaType.Number:
              return this.lua.lua_tonumberx(this.address, index, null);
            case exports2.LuaType.String:
              return this.lua.lua_tolstring(this.address, index, null);
            case exports2.LuaType.Boolean:
              return Boolean(this.lua.lua_toboolean(this.address, index));
            case exports2.LuaType.Thread:
              return this.stateToThread(this.lua.lua_tothread(this.address, index));
            default: {
              let metatableName;
              if (type === exports2.LuaType.Table || type === exports2.LuaType.Userdata) {
                metatableName = this.getMetatableName(index);
              }
              const typeExtensionWrapper = this.typeExtensions.find((wrapper) => wrapper.extension.isType(this, index, type, metatableName));
              if (typeExtensionWrapper) {
                return typeExtensionWrapper.extension.getValue(this, index, userdata);
              }
              console.warn(`The type '${this.lua.lua_typename(this.address, type)}' returned is not supported on JS`);
              return new Pointer(this.lua.lua_topointer(this.address, index));
            }
          }
        }
        close() {
          if (this.isClosed()) {
            return;
          }
          if (this.hookFunctionPointer) {
            this.lua.module.removeFunction(this.hookFunctionPointer);
          }
          this.closed = true;
        }
        setTimeout(timeout) {
          if (timeout && timeout > 0) {
            if (!this.hookFunctionPointer) {
              this.hookFunctionPointer = this.lua.module.addFunction(() => {
                if (Date.now() > timeout) {
                  this.pushValue(new LuaTimeoutError(`thread timeout exceeded`));
                  this.lua.lua_error(this.address);
                }
              }, "vii");
            }
            this.lua.lua_sethook(this.address, this.hookFunctionPointer, exports2.LuaEventMasks.Count, INSTRUCTION_HOOK_COUNT);
            this.timeout = timeout;
          } else if (this.hookFunctionPointer) {
            this.hookFunctionPointer = void 0;
            this.timeout = void 0;
            this.lua.lua_sethook(this.address, null, 0, 0);
          }
        }
        getTimeout() {
          return this.timeout;
        }
        getPointer(index) {
          return new Pointer(this.lua.lua_topointer(this.address, index));
        }
        isClosed() {
          var _a;
          return !this.address || this.closed || Boolean((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isClosed());
        }
        indexToString(index) {
          const str = this.lua.luaL_tolstring(this.address, index, null);
          this.pop();
          return str;
        }
        dumpStack(log = console.log) {
          const top = this.getTop();
          for (let i = 1; i <= top; i++) {
            const type = this.lua.lua_type(this.address, i);
            const typename = this.lua.lua_typename(this.address, type);
            const pointer = this.getPointer(i);
            const name = this.indexToString(i);
            const value = this.getValue(i, type);
            log(i, typename, pointer, name, value);
          }
        }
        assertOk(result) {
          if (result !== exports2.LuaReturn.Ok && result !== exports2.LuaReturn.Yield) {
            const resultString = exports2.LuaReturn[result];
            const error2 = new Error(`Lua Error(${resultString}/${result})`);
            if (this.getTop() > 0) {
              if (result === exports2.LuaReturn.ErrorMem) {
                error2.message = this.lua.lua_tolstring(this.address, -1, null);
              } else {
                const luaError = this.getValue(-1);
                if (luaError instanceof Error) {
                  error2.stack = luaError.stack;
                }
                error2.message = this.indexToString(-1);
              }
            }
            if (result !== exports2.LuaReturn.ErrorMem) {
              try {
                this.lua.luaL_traceback(this.address, this.address, null, 1);
                const traceback = this.lua.lua_tolstring(this.address, -1, null);
                if (traceback.trim() !== "stack traceback:") {
                  error2.message = `${error2.message}
${traceback}`;
                }
                this.pop(1);
              } catch (err) {
                console.warn("Failed to generate stack trace", err);
              }
            }
            throw error2;
          }
        }
        getValueDecorations(value) {
          return value instanceof Decoration ? value : new Decoration(value, {});
        }
      }
      class Global extends Thread {
        constructor(cmodule, shouldTraceAllocations) {
          if (shouldTraceAllocations) {
            const memoryStats = { memoryUsed: 0 };
            const allocatorFunctionPointer = cmodule.module.addFunction((_userData, pointer, oldSize, newSize) => {
              if (newSize === 0) {
                if (pointer) {
                  memoryStats.memoryUsed -= oldSize;
                  cmodule.module._free(pointer);
                }
                return 0;
              }
              const endMemoryDelta = pointer ? newSize - oldSize : newSize;
              const endMemory = memoryStats.memoryUsed + endMemoryDelta;
              if (newSize > oldSize && memoryStats.memoryMax && endMemory > memoryStats.memoryMax) {
                return 0;
              }
              const reallocated = cmodule.module._realloc(pointer, newSize);
              if (reallocated) {
                memoryStats.memoryUsed = endMemory;
              }
              return reallocated;
            }, "iiiii");
            const address = cmodule.lua_newstate(allocatorFunctionPointer, null);
            if (!address) {
              cmodule.module.removeFunction(allocatorFunctionPointer);
              throw new Error("lua_newstate returned a null pointer");
            }
            super(cmodule, [], address);
            this.memoryStats = memoryStats;
            this.allocatorFunctionPointer = allocatorFunctionPointer;
          } else {
            super(cmodule, [], cmodule.luaL_newstate());
          }
          if (this.isClosed()) {
            throw new Error("Global state could not be created (probably due to lack of memory)");
          }
        }
        close() {
          if (this.isClosed()) {
            return;
          }
          super.close();
          this.lua.lua_close(this.address);
          if (this.allocatorFunctionPointer) {
            this.lua.module.removeFunction(this.allocatorFunctionPointer);
          }
          for (const wrapper of this.typeExtensions) {
            wrapper.extension.close();
          }
        }
        registerTypeExtension(priority, extension) {
          this.typeExtensions.push({ extension, priority });
          this.typeExtensions.sort((a, b) => b.priority - a.priority);
        }
        loadLibrary(library) {
          switch (library) {
            case exports2.LuaLibraries.Base:
              this.lua.luaopen_base(this.address);
              break;
            case exports2.LuaLibraries.Coroutine:
              this.lua.luaopen_coroutine(this.address);
              break;
            case exports2.LuaLibraries.Table:
              this.lua.luaopen_table(this.address);
              break;
            case exports2.LuaLibraries.IO:
              this.lua.luaopen_io(this.address);
              break;
            case exports2.LuaLibraries.OS:
              this.lua.luaopen_os(this.address);
              break;
            case exports2.LuaLibraries.String:
              this.lua.luaopen_string(this.address);
              break;
            case exports2.LuaLibraries.UTF8:
              this.lua.luaopen_string(this.address);
              break;
            case exports2.LuaLibraries.Math:
              this.lua.luaopen_math(this.address);
              break;
            case exports2.LuaLibraries.Debug:
              this.lua.luaopen_debug(this.address);
              break;
            case exports2.LuaLibraries.Package:
              this.lua.luaopen_package(this.address);
              break;
          }
          this.lua.lua_setglobal(this.address, library);
        }
        get(name) {
          const type = this.lua.lua_getglobal(this.address, name);
          const value = this.getValue(-1, type);
          this.pop();
          return value;
        }
        set(name, value) {
          this.pushValue(value);
          this.lua.lua_setglobal(this.address, name);
        }
        getTable(name, callback) {
          const startStackTop = this.getTop();
          const type = this.lua.lua_getglobal(this.address, name);
          try {
            if (type !== exports2.LuaType.Table) {
              throw new TypeError(`Unexpected type in ${name}. Expected ${exports2.LuaType[exports2.LuaType.Table]}. Got ${exports2.LuaType[type]}.`);
            }
            callback(startStackTop + 1);
          } finally {
            if (this.getTop() !== startStackTop + 1) {
              console.warn(`getTable: expected stack size ${startStackTop} got ${this.getTop()}`);
            }
            this.setTop(startStackTop);
          }
        }
        getMemoryUsed() {
          return this.getMemoryStatsRef().memoryUsed;
        }
        getMemoryMax() {
          return this.getMemoryStatsRef().memoryMax;
        }
        setMemoryMax(max) {
          this.getMemoryStatsRef().memoryMax = max;
        }
        getMemoryStatsRef() {
          if (!this.memoryStats) {
            throw new Error("Memory allocations is not being traced, please build engine with { traceAllocations: true }");
          }
          return this.memoryStats;
        }
      }
      class LuaTypeExtension {
        constructor(thread, name) {
          this.thread = thread;
          this.name = name;
        }
        isType(_thread, _index, type, name) {
          return type === exports2.LuaType.Userdata && name === this.name;
        }
        getValue(thread, index, _userdata) {
          const refUserdata = thread.lua.luaL_testudata(thread.address, index, this.name);
          if (!refUserdata) {
            throw new Error(`data does not have the expected metatable: ${this.name}`);
          }
          const referencePointer = thread.lua.module.getValue(refUserdata, "*");
          return thread.lua.getRef(referencePointer);
        }
        pushValue(thread, decoratedValue, _userdata) {
          const { target } = decoratedValue;
          const pointer = thread.lua.ref(target);
          const userDataPointer = thread.lua.lua_newuserdatauv(thread.address, PointerSize, 0);
          thread.lua.module.setValue(userDataPointer, pointer, "*");
          if (exports2.LuaType.Nil === thread.lua.luaL_getmetatable(thread.address, this.name)) {
            thread.pop(2);
            throw new Error(`metatable not found: ${this.name}`);
          }
          thread.lua.lua_setmetatable(thread.address, -2);
          return true;
        }
      }
      class ErrorTypeExtension extends LuaTypeExtension {
        constructor(thread, injectObject) {
          super(thread, "js_error");
          this.gcPointer = thread.lua.module.addFunction((functionStateAddress) => {
            const userDataPointer = thread.lua.luaL_checkudata(functionStateAddress, 1, this.name);
            const referencePointer = thread.lua.module.getValue(userDataPointer, "*");
            thread.lua.unref(referencePointer);
            return exports2.LuaReturn.Ok;
          }, "ii");
          if (thread.lua.luaL_newmetatable(thread.address, this.name)) {
            const metatableIndex = thread.lua.lua_gettop(thread.address);
            thread.lua.lua_pushstring(thread.address, "protected metatable");
            thread.lua.lua_setfield(thread.address, metatableIndex, "__metatable");
            thread.lua.lua_pushcclosure(thread.address, this.gcPointer, 0);
            thread.lua.lua_setfield(thread.address, metatableIndex, "__gc");
            thread.pushValue((jsRefError, key) => {
              if (key === "message") {
                return jsRefError.message;
              }
              return null;
            });
            thread.lua.lua_setfield(thread.address, metatableIndex, "__index");
            thread.pushValue((jsRefError) => {
              return jsRefError.message;
            });
            thread.lua.lua_setfield(thread.address, metatableIndex, "__tostring");
          }
          thread.lua.lua_pop(thread.address, 1);
          if (injectObject) {
            thread.set("Error", {
              create: (message) => {
                if (message && typeof message !== "string") {
                  throw new Error("message must be a string");
                }
                return new Error(message);
              }
            });
          }
        }
        pushValue(thread, decoration) {
          if (!(decoration.target instanceof Error)) {
            return false;
          }
          return super.pushValue(thread, decoration);
        }
        close() {
          this.thread.lua.module.removeFunction(this.gcPointer);
        }
      }
      function createTypeExtension$6(thread, injectObject) {
        return new ErrorTypeExtension(thread, injectObject);
      }
      class RawResult {
        constructor(count) {
          this.count = count;
        }
      }
      function decorateFunction(target, options) {
        return new Decoration(target, options);
      }
      class FunctionTypeExtension extends LuaTypeExtension {
        constructor(thread, options) {
          super(thread, "js_function");
          this.functionRegistry = typeof FinalizationRegistry !== "undefined" ? new FinalizationRegistry((func) => {
            if (!this.thread.isClosed()) {
              this.thread.lua.luaL_unref(this.thread.address, LUA_REGISTRYINDEX, func);
            }
          }) : void 0;
          this.options = options;
          this.callbackContext = thread.newThread();
          this.callbackContextIndex = this.thread.lua.luaL_ref(thread.address, LUA_REGISTRYINDEX);
          if (!this.functionRegistry) {
            console.warn("FunctionTypeExtension: FinalizationRegistry not found. Memory leaks likely.");
          }
          this.gcPointer = thread.lua.module.addFunction((calledL) => {
            thread.lua.luaL_checkudata(calledL, 1, this.name);
            const userDataPointer = thread.lua.luaL_checkudata(calledL, 1, this.name);
            const referencePointer = thread.lua.module.getValue(userDataPointer, "*");
            thread.lua.unref(referencePointer);
            return exports2.LuaReturn.Ok;
          }, "ii");
          if (thread.lua.luaL_newmetatable(thread.address, this.name)) {
            thread.lua.lua_pushstring(thread.address, "__gc");
            thread.lua.lua_pushcclosure(thread.address, this.gcPointer, 0);
            thread.lua.lua_settable(thread.address, -3);
            thread.lua.lua_pushstring(thread.address, "__metatable");
            thread.lua.lua_pushstring(thread.address, "protected metatable");
            thread.lua.lua_settable(thread.address, -3);
          }
          thread.lua.lua_pop(thread.address, 1);
          this.functionWrapper = thread.lua.module.addFunction((calledL) => {
            const calledThread = thread.stateToThread(calledL);
            const refUserdata = thread.lua.luaL_checkudata(calledL, thread.lua.lua_upvalueindex(1), this.name);
            const refPointer = thread.lua.module.getValue(refUserdata, "*");
            const { target, options: options2 } = thread.lua.getRef(refPointer);
            const argsQuantity = calledThread.getTop();
            const args = [];
            if (options2.receiveThread) {
              args.push(calledThread);
            }
            if (options2.receiveArgsQuantity) {
              args.push(argsQuantity);
            } else {
              for (let i = 1; i <= argsQuantity; i++) {
                const value = calledThread.getValue(i);
                if (i !== 1 || !(options2 === null || options2 === void 0 ? void 0 : options2.self) || value !== options2.self) {
                  args.push(value);
                }
              }
            }
            try {
              const result = target.apply(options2 === null || options2 === void 0 ? void 0 : options2.self, args);
              if (result === void 0) {
                return 0;
              } else if (result instanceof RawResult) {
                return result.count;
              } else if (result instanceof MultiReturn) {
                for (const item of result) {
                  calledThread.pushValue(item);
                }
                return result.length;
              } else {
                calledThread.pushValue(result);
                return 1;
              }
            } catch (err) {
              if (err === Infinity) {
                throw err;
              }
              calledThread.pushValue(err);
              return calledThread.lua.lua_error(calledThread.address);
            }
          }, "ii");
        }
        close() {
          this.thread.lua.module.removeFunction(this.gcPointer);
          this.thread.lua.module.removeFunction(this.functionWrapper);
          this.callbackContext.close();
          this.callbackContext.lua.luaL_unref(this.callbackContext.address, LUA_REGISTRYINDEX, this.callbackContextIndex);
        }
        isType(_thread, _index, type) {
          return type === exports2.LuaType.Function;
        }
        pushValue(thread, decoration) {
          if (typeof decoration.target !== "function") {
            return false;
          }
          const pointer = thread.lua.ref(decoration);
          const userDataPointer = thread.lua.lua_newuserdatauv(thread.address, PointerSize, 0);
          thread.lua.module.setValue(userDataPointer, pointer, "*");
          if (exports2.LuaType.Nil === thread.lua.luaL_getmetatable(thread.address, this.name)) {
            thread.pop(1);
            thread.lua.unref(pointer);
            throw new Error(`metatable not found: ${this.name}`);
          }
          thread.lua.lua_setmetatable(thread.address, -2);
          thread.lua.lua_pushcclosure(thread.address, this.functionWrapper, 1);
          return true;
        }
        getValue(thread, index) {
          var _a;
          thread.lua.lua_pushvalue(thread.address, index);
          const func = thread.lua.luaL_ref(thread.address, LUA_REGISTRYINDEX);
          const jsFunc = (...args) => {
            var _a2;
            if (this.callbackContext.isClosed()) {
              console.warn("Tried to call a function after closing lua state");
              return;
            }
            const callThread = this.callbackContext.newThread();
            try {
              const internalType = callThread.lua.lua_rawgeti(callThread.address, LUA_REGISTRYINDEX, BigInt(func));
              if (internalType !== exports2.LuaType.Function) {
                const callMetafieldType = callThread.lua.luaL_getmetafield(callThread.address, -1, "__call");
                callThread.pop();
                if (callMetafieldType !== exports2.LuaType.Function) {
                  throw new Error(`A value of type '${internalType}' was pushed but it is not callable`);
                }
              }
              for (const arg of args) {
                callThread.pushValue(arg);
              }
              if ((_a2 = this.options) === null || _a2 === void 0 ? void 0 : _a2.functionTimeout) {
                callThread.setTimeout(Date.now() + this.options.functionTimeout);
              }
              const status = callThread.lua.lua_pcallk(callThread.address, args.length, 1, 0, 0, null);
              if (status === exports2.LuaReturn.Yield) {
                throw new Error("cannot yield in callbacks from javascript");
              }
              callThread.assertOk(status);
              if (callThread.getTop() > 0) {
                return callThread.getValue(-1);
              }
              return void 0;
            } finally {
              callThread.close();
              this.callbackContext.pop();
            }
          };
          (_a = this.functionRegistry) === null || _a === void 0 ? void 0 : _a.register(jsFunc, func);
          return jsFunc;
        }
      }
      function createTypeExtension$5(thread, options) {
        return new FunctionTypeExtension(thread, options);
      }
      class NullTypeExtension extends LuaTypeExtension {
        constructor(thread) {
          super(thread, "js_null");
          this.gcPointer = thread.lua.module.addFunction((functionStateAddress) => {
            const userDataPointer = thread.lua.luaL_checkudata(functionStateAddress, 1, this.name);
            const referencePointer = thread.lua.module.getValue(userDataPointer, "*");
            thread.lua.unref(referencePointer);
            return exports2.LuaReturn.Ok;
          }, "ii");
          if (thread.lua.luaL_newmetatable(thread.address, this.name)) {
            const metatableIndex = thread.lua.lua_gettop(thread.address);
            thread.lua.lua_pushstring(thread.address, "protected metatable");
            thread.lua.lua_setfield(thread.address, metatableIndex, "__metatable");
            thread.lua.lua_pushcclosure(thread.address, this.gcPointer, 0);
            thread.lua.lua_setfield(thread.address, metatableIndex, "__gc");
            thread.pushValue(() => null);
            thread.lua.lua_setfield(thread.address, metatableIndex, "__index");
            thread.pushValue(() => "null");
            thread.lua.lua_setfield(thread.address, metatableIndex, "__tostring");
            thread.pushValue((self2, other) => self2 === other);
            thread.lua.lua_setfield(thread.address, metatableIndex, "__eq");
          }
          thread.lua.lua_pop(thread.address, 1);
          super.pushValue(thread, new Decoration({}, {}));
          thread.lua.lua_setglobal(thread.address, "null");
        }
        getValue(thread, index) {
          const refUserData = thread.lua.luaL_testudata(thread.address, index, this.name);
          if (!refUserData) {
            throw new Error(`data does not have the expected metatable: ${this.name}`);
          }
          return null;
        }
        pushValue(thread, decoration) {
          if ((decoration === null || decoration === void 0 ? void 0 : decoration.target) !== null) {
            return false;
          }
          thread.lua.lua_getglobal(thread.address, "null");
          return true;
        }
        close() {
          this.thread.lua.module.removeFunction(this.gcPointer);
        }
      }
      function createTypeExtension$4(thread) {
        return new NullTypeExtension(thread);
      }
      class PromiseTypeExtension extends LuaTypeExtension {
        constructor(thread, injectObject) {
          super(thread, "js_promise");
          this.gcPointer = thread.lua.module.addFunction((functionStateAddress) => {
            const userDataPointer = thread.lua.luaL_checkudata(functionStateAddress, 1, this.name);
            const referencePointer = thread.lua.module.getValue(userDataPointer, "*");
            thread.lua.unref(referencePointer);
            return exports2.LuaReturn.Ok;
          }, "ii");
          if (thread.lua.luaL_newmetatable(thread.address, this.name)) {
            const metatableIndex = thread.lua.lua_gettop(thread.address);
            thread.lua.lua_pushstring(thread.address, "protected metatable");
            thread.lua.lua_setfield(thread.address, metatableIndex, "__metatable");
            thread.lua.lua_pushcclosure(thread.address, this.gcPointer, 0);
            thread.lua.lua_setfield(thread.address, metatableIndex, "__gc");
            const checkSelf = (self2) => {
              if (Promise.resolve(self2) !== self2 && typeof self2.then !== "function") {
                throw new Error("promise method called without self instance");
              }
              return true;
            };
            thread.pushValue({
              next: (self2, ...args) => checkSelf(self2) && self2.then(...args),
              catch: (self2, ...args) => checkSelf(self2) && self2.catch(...args),
              finally: (self2, ...args) => checkSelf(self2) && self2.finally(...args),
              await: decorateFunction((functionThread, self2) => {
                checkSelf(self2);
                if (functionThread.address === thread.address) {
                  throw new Error("cannot await in the main thread");
                }
                let promiseResult = void 0;
                const awaitPromise = self2.then((res) => {
                  promiseResult = { status: "fulfilled", value: res };
                }).catch((err) => {
                  promiseResult = { status: "rejected", value: err };
                });
                const continuance = this.thread.lua.module.addFunction((continuanceState) => {
                  if (!promiseResult) {
                    return thread.lua.lua_yieldk(functionThread.address, 0, 0, continuance);
                  }
                  this.thread.lua.module.removeFunction(continuance);
                  const continuanceThread = thread.stateToThread(continuanceState);
                  if (promiseResult.status === "rejected") {
                    continuanceThread.pushValue(promiseResult.value || new Error("promise rejected with no error"));
                    return this.thread.lua.lua_error(continuanceState);
                  }
                  if (promiseResult.value instanceof RawResult) {
                    return promiseResult.value.count;
                  } else if (promiseResult.value instanceof MultiReturn) {
                    for (const arg of promiseResult.value) {
                      continuanceThread.pushValue(arg);
                    }
                    return promiseResult.value.length;
                  } else {
                    continuanceThread.pushValue(promiseResult.value);
                    return 1;
                  }
                }, "iiii");
                functionThread.pushValue(awaitPromise);
                return new RawResult(thread.lua.lua_yieldk(functionThread.address, 1, 0, continuance));
              }, { receiveThread: true })
            });
            thread.lua.lua_setfield(thread.address, metatableIndex, "__index");
            thread.pushValue((self2, other) => self2 === other);
            thread.lua.lua_setfield(thread.address, metatableIndex, "__eq");
          }
          thread.lua.lua_pop(thread.address, 1);
          if (injectObject) {
            thread.set("Promise", {
              create: (callback) => new Promise(callback),
              all: (promiseArray) => {
                if (!Array.isArray(promiseArray)) {
                  throw new Error("argument must be an array of promises");
                }
                return Promise.all(promiseArray.map((potentialPromise) => Promise.resolve(potentialPromise)));
              },
              resolve: (value) => Promise.resolve(value)
            });
          }
        }
        close() {
          this.thread.lua.module.removeFunction(this.gcPointer);
        }
        pushValue(thread, decoration) {
          if (Promise.resolve(decoration.target) !== decoration.target && typeof decoration.target.then !== "function") {
            return false;
          }
          return super.pushValue(thread, decoration);
        }
      }
      function createTypeExtension$3(thread, injectObject) {
        return new PromiseTypeExtension(thread, injectObject);
      }
      function decorateProxy(target, options) {
        return new Decoration(target, options || {});
      }
      class ProxyTypeExtension extends LuaTypeExtension {
        constructor(thread) {
          super(thread, "js_proxy");
          this.gcPointer = thread.lua.module.addFunction((functionStateAddress) => {
            const userDataPointer = thread.lua.luaL_checkudata(functionStateAddress, 1, this.name);
            const referencePointer = thread.lua.module.getValue(userDataPointer, "*");
            thread.lua.unref(referencePointer);
            return exports2.LuaReturn.Ok;
          }, "ii");
          if (thread.lua.luaL_newmetatable(thread.address, this.name)) {
            const metatableIndex = thread.lua.lua_gettop(thread.address);
            thread.lua.lua_pushstring(thread.address, "protected metatable");
            thread.lua.lua_setfield(thread.address, metatableIndex, "__metatable");
            thread.lua.lua_pushcclosure(thread.address, this.gcPointer, 0);
            thread.lua.lua_setfield(thread.address, metatableIndex, "__gc");
            thread.pushValue((self2, key) => {
              switch (typeof key) {
                case "number":
                  key = key - 1;
                case "string":
                  break;
                default:
                  throw new Error("Only strings or numbers can index js objects");
              }
              const value = self2[key];
              if (typeof value === "function") {
                return decorateFunction(value, { self: self2 });
              }
              return value;
            });
            thread.lua.lua_setfield(thread.address, metatableIndex, "__index");
            thread.pushValue((self2, key, value) => {
              switch (typeof key) {
                case "number":
                  key = key - 1;
                case "string":
                  break;
                default:
                  throw new Error("Only strings or numbers can index js objects");
              }
              self2[key] = value;
            });
            thread.lua.lua_setfield(thread.address, metatableIndex, "__newindex");
            thread.pushValue((self2) => {
              var _a, _b;
              return (_b = (_a = self2.toString) === null || _a === void 0 ? void 0 : _a.call(self2)) !== null && _b !== void 0 ? _b : typeof self2;
            });
            thread.lua.lua_setfield(thread.address, metatableIndex, "__tostring");
            thread.pushValue((self2) => {
              return self2.length || 0;
            });
            thread.lua.lua_setfield(thread.address, metatableIndex, "__len");
            thread.pushValue((self2) => {
              const keys = Object.getOwnPropertyNames(self2);
              let i = 0;
              return MultiReturn.of(() => {
                const ret = MultiReturn.of(keys[i], self2[keys[i]]);
                i++;
                return ret;
              }, self2, null);
            });
            thread.lua.lua_setfield(thread.address, metatableIndex, "__pairs");
            thread.pushValue((self2, other) => {
              return self2 === other;
            });
            thread.lua.lua_setfield(thread.address, metatableIndex, "__eq");
            thread.pushValue((self2, ...args) => {
              if (args[0] === self2) {
                args.shift();
              }
              return self2(...args);
            });
            thread.lua.lua_setfield(thread.address, metatableIndex, "__call");
          }
          thread.lua.lua_pop(thread.address, 1);
        }
        isType(_thread, _index, type, name) {
          return type === exports2.LuaType.Userdata && name === this.name;
        }
        getValue(thread, index) {
          const refUserdata = thread.lua.lua_touserdata(thread.address, index);
          const referencePointer = thread.lua.module.getValue(refUserdata, "*");
          return thread.lua.getRef(referencePointer);
        }
        pushValue(thread, decoratedValue) {
          var _a;
          const { target, options } = decoratedValue;
          if (options.proxy === void 0) {
            if (target === null || target === void 0) {
              return false;
            }
            if (typeof target !== "object") {
              const isClass = typeof target === "function" && ((_a = target.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === target && target.toString().startsWith("class ");
              if (!isClass) {
                return false;
              }
            }
            if (Promise.resolve(target) === target || typeof target.then === "function") {
              return false;
            }
          } else if (options.proxy === false) {
            return false;
          }
          if (options.metatable && !(options.metatable instanceof Decoration)) {
            decoratedValue.options.metatable = decorateProxy(options.metatable, { proxy: false });
            return false;
          }
          return super.pushValue(thread, decoratedValue);
        }
        close() {
          this.thread.lua.module.removeFunction(this.gcPointer);
        }
      }
      function createTypeExtension$2(thread) {
        return new ProxyTypeExtension(thread);
      }
      class TableTypeExtension extends LuaTypeExtension {
        constructor(thread) {
          super(thread, "js_table");
        }
        close() {
        }
        isType(_thread, _index, type) {
          return type === exports2.LuaType.Table;
        }
        getValue(thread, index, userdata) {
          const seenMap = userdata || /* @__PURE__ */ new Map();
          const pointer = thread.lua.lua_topointer(thread.address, index);
          let table = seenMap.get(pointer);
          if (!table) {
            const keys = this.readTableKeys(thread, index);
            const isSequential = keys.length > 0 && keys.every((key, index2) => key === String(index2 + 1));
            table = isSequential ? [] : {};
            seenMap.set(pointer, table);
            this.readTableValues(thread, index, seenMap, table);
          }
          return table;
        }
        pushValue(thread, { target }, userdata) {
          if (typeof target !== "object" || target === null) {
            return false;
          }
          const seenMap = userdata || /* @__PURE__ */ new Map();
          const existingReference = seenMap.get(target);
          if (existingReference !== void 0) {
            thread.lua.lua_rawgeti(thread.address, LUA_REGISTRYINDEX, BigInt(existingReference));
            return true;
          }
          try {
            const tableIndex = thread.getTop() + 1;
            const createTable = (arrayCount, keyCount) => {
              thread.lua.lua_createtable(thread.address, arrayCount, keyCount);
              const ref = thread.lua.luaL_ref(thread.address, LUA_REGISTRYINDEX);
              seenMap.set(target, ref);
              thread.lua.lua_rawgeti(thread.address, LUA_REGISTRYINDEX, BigInt(ref));
            };
            if (Array.isArray(target)) {
              createTable(target.length, 0);
              for (let i = 0; i < target.length; i++) {
                thread.pushValue(i + 1, seenMap);
                thread.pushValue(target[i], seenMap);
                thread.lua.lua_settable(thread.address, tableIndex);
              }
            } else {
              createTable(0, Object.getOwnPropertyNames(target).length);
              for (const key in target) {
                thread.pushValue(key, seenMap);
                thread.pushValue(target[key], seenMap);
                thread.lua.lua_settable(thread.address, tableIndex);
              }
            }
          } finally {
            if (userdata === void 0) {
              for (const reference of seenMap.values()) {
                thread.lua.luaL_unref(thread.address, LUA_REGISTRYINDEX, reference);
              }
            }
          }
          return true;
        }
        readTableKeys(thread, index) {
          const keys = [];
          thread.lua.lua_pushnil(thread.address);
          while (thread.lua.lua_next(thread.address, index)) {
            const key = thread.indexToString(-2);
            keys.push(key);
            thread.pop();
          }
          return keys;
        }
        readTableValues(thread, index, seenMap, table) {
          const isArray3 = Array.isArray(table);
          thread.lua.lua_pushnil(thread.address);
          while (thread.lua.lua_next(thread.address, index)) {
            const key = thread.indexToString(-2);
            const value = thread.getValue(-1, void 0, seenMap);
            if (isArray3) {
              table.push(value);
            } else {
              table[key] = value;
            }
            thread.pop();
          }
        }
      }
      function createTypeExtension$1(thread) {
        return new TableTypeExtension(thread);
      }
      function decorateUserdata(target) {
        return new Decoration(target, { reference: true });
      }
      class UserdataTypeExtension extends LuaTypeExtension {
        constructor(thread) {
          super(thread, "js_userdata");
          this.gcPointer = thread.lua.module.addFunction((functionStateAddress) => {
            const userDataPointer = thread.lua.luaL_checkudata(functionStateAddress, 1, this.name);
            const referencePointer = thread.lua.module.getValue(userDataPointer, "*");
            thread.lua.unref(referencePointer);
            return exports2.LuaReturn.Ok;
          }, "ii");
          if (thread.lua.luaL_newmetatable(thread.address, this.name)) {
            const metatableIndex = thread.lua.lua_gettop(thread.address);
            thread.lua.lua_pushstring(thread.address, "protected metatable");
            thread.lua.lua_setfield(thread.address, metatableIndex, "__metatable");
            thread.lua.lua_pushcclosure(thread.address, this.gcPointer, 0);
            thread.lua.lua_setfield(thread.address, metatableIndex, "__gc");
          }
          thread.lua.lua_pop(thread.address, 1);
        }
        isType(_thread, _index, type, name) {
          return type === exports2.LuaType.Userdata && name === this.name;
        }
        getValue(thread, index) {
          const refUserdata = thread.lua.lua_touserdata(thread.address, index);
          const referencePointer = thread.lua.module.getValue(refUserdata, "*");
          return thread.lua.getRef(referencePointer);
        }
        pushValue(thread, decoratedValue) {
          if (!decoratedValue.options.reference) {
            return false;
          }
          return super.pushValue(thread, decoratedValue);
        }
        close() {
          this.thread.lua.module.removeFunction(this.gcPointer);
        }
      }
      function createTypeExtension(thread) {
        return new UserdataTypeExtension(thread);
      }
      class LuaEngine2 {
        constructor(cmodule, { openStandardLibs = true, injectObjects = false, enableProxy = true, traceAllocations = false, functionTimeout = void 0 } = {}) {
          this.cmodule = cmodule;
          this.global = new Global(this.cmodule, traceAllocations);
          this.global.registerTypeExtension(0, createTypeExtension$1(this.global));
          this.global.registerTypeExtension(0, createTypeExtension$5(this.global, { functionTimeout }));
          this.global.registerTypeExtension(1, createTypeExtension$3(this.global, injectObjects));
          if (injectObjects) {
            this.global.registerTypeExtension(5, createTypeExtension$4(this.global));
          }
          if (enableProxy) {
            this.global.registerTypeExtension(3, createTypeExtension$2(this.global));
          } else {
            this.global.registerTypeExtension(1, createTypeExtension$6(this.global, injectObjects));
          }
          this.global.registerTypeExtension(4, createTypeExtension(this.global));
          if (openStandardLibs) {
            this.cmodule.luaL_openlibs(this.global.address);
          }
        }
        doString(script) {
          return this.callByteCode((thread) => thread.loadString(script));
        }
        doFile(filename) {
          return this.callByteCode((thread) => thread.loadFile(filename));
        }
        doStringSync(script) {
          this.global.loadString(script);
          const result = this.global.runSync();
          return result[0];
        }
        doFileSync(filename) {
          this.global.loadFile(filename);
          const result = this.global.runSync();
          return result[0];
        }
        async callByteCode(loader) {
          const thread = this.global.newThread();
          const threadIndex = this.global.getTop();
          try {
            loader(thread);
            const result = await thread.run(0);
            if (result.length > 0) {
              this.cmodule.lua_xmove(thread.address, this.global.address, result.length);
              return this.global.getValue(this.global.getTop() - result.length + 1);
            }
            return void 0;
          } finally {
            this.global.remove(threadIndex);
          }
        }
      }
      var initWasmModule = (() => {
        var _scriptDir = typeof document === "undefined" && typeof location === "undefined" ? require_url().pathToFileURL(__filename).href : typeof document === "undefined" ? location.href : _documentCurrentScript && _documentCurrentScript.src || new URL("index.js", document.baseURI).href;
        return async function(moduleArg = {}) {
          var e = moduleArg, aa, ba;
          e.ready = new Promise((a, b) => {
            aa = a;
            ba = b;
          });
          "_malloc _free _realloc _luaL_checkversion_ _luaL_getmetafield _luaL_callmeta _luaL_tolstring _luaL_argerror _luaL_typeerror _luaL_checklstring _luaL_optlstring _luaL_checknumber _luaL_optnumber _luaL_checkinteger _luaL_optinteger _luaL_checkstack _luaL_checktype _luaL_checkany _luaL_newmetatable _luaL_setmetatable _luaL_testudata _luaL_checkudata _luaL_where _luaL_fileresult _luaL_execresult _luaL_ref _luaL_unref _luaL_loadfilex _luaL_loadbufferx _luaL_loadstring _luaL_newstate _luaL_len _luaL_addgsub _luaL_gsub _luaL_setfuncs _luaL_getsubtable _luaL_traceback _luaL_requiref _luaL_buffinit _luaL_prepbuffsize _luaL_addlstring _luaL_addstring _luaL_addvalue _luaL_pushresult _luaL_pushresultsize _luaL_buffinitsize _lua_newstate _lua_close _lua_newthread _lua_resetthread _lua_atpanic _lua_version _lua_absindex _lua_gettop _lua_settop _lua_pushvalue _lua_rotate _lua_copy _lua_checkstack _lua_xmove _lua_isnumber _lua_isstring _lua_iscfunction _lua_isinteger _lua_isuserdata _lua_type _lua_typename _lua_tonumberx _lua_tointegerx _lua_toboolean _lua_tolstring _lua_rawlen _lua_tocfunction _lua_touserdata _lua_tothread _lua_topointer _lua_arith _lua_rawequal _lua_compare _lua_pushnil _lua_pushnumber _lua_pushinteger _lua_pushlstring _lua_pushstring _lua_pushcclosure _lua_pushboolean _lua_pushlightuserdata _lua_pushthread _lua_getglobal _lua_gettable _lua_getfield _lua_geti _lua_rawget _lua_rawgeti _lua_rawgetp _lua_createtable _lua_newuserdatauv _lua_getmetatable _lua_getiuservalue _lua_setglobal _lua_settable _lua_setfield _lua_seti _lua_rawset _lua_rawseti _lua_rawsetp _lua_setmetatable _lua_setiuservalue _lua_callk _lua_pcallk _lua_load _lua_dump _lua_yieldk _lua_resume _lua_status _lua_isyieldable _lua_setwarnf _lua_warning _lua_error _lua_next _lua_concat _lua_len _lua_stringtonumber _lua_getallocf _lua_setallocf _lua_toclose _lua_closeslot _lua_getstack _lua_getinfo _lua_getlocal _lua_setlocal _lua_getupvalue _lua_setupvalue _lua_upvalueid _lua_upvaluejoin _lua_sethook _lua_gethook _lua_gethookmask _lua_gethookcount _lua_setcstacklimit _luaopen_base _luaopen_coroutine _luaopen_table _luaopen_io _luaopen_os _luaopen_string _luaopen_utf8 _luaopen_math _luaopen_debug _luaopen_package _luaL_openlibs _memory ___indirect_function_table _fflush onRuntimeInitialized".split(" ").forEach((a) => {
            Object.getOwnPropertyDescriptor(
              e.ready,
              a
            ) || Object.defineProperty(e.ready, a, { get: () => g("You are getting " + a + " on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"), set: () => g("You are setting " + a + " on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js") });
          });
          var ca = Object.assign({}, e), da = "./this.program", ea = (a, b) => {
            throw b;
          }, fa = "object" == typeof window, k = "function" == typeof importScripts, n = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, ha = !fa && !n && !k;
          if (e.ENVIRONMENT)
            throw Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");
          var r = "", ia, ja, ka;
          if (n) {
            if ("undefined" == typeof process || !process.release || "node" !== process.release.name)
              throw Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
            var la = process.versions.node, ma = la.split(".").slice(0, 3);
            ma = 1e4 * ma[0] + 100 * ma[1] + 1 * ma[2].split("-")[0];
            if (16e4 > ma)
              throw Error("This emscripten-generated code requires node v16.0.0 (detected v" + la + ")");
            const { createRequire: a } = await Promise.resolve().then(() => (init_module(), module_exports));
            var require$1 = a(typeof document === "undefined" && typeof location === "undefined" ? require_url().pathToFileURL(__filename).href : typeof document === "undefined" ? location.href : _documentCurrentScript && _documentCurrentScript.src || new URL("index.js", document.baseURI).href), fs = require$1("fs"), na = require$1("path");
            k ? r = na.dirname(r) + "/" : r = require$1("url").fileURLToPath(new URL("./", typeof document === "undefined" && typeof location === "undefined" ? require_url().pathToFileURL(__filename).href : typeof document === "undefined" ? location.href : _documentCurrentScript && _documentCurrentScript.src || new URL("index.js", document.baseURI).href));
            ia = (b, c) => {
              b = oa(b) ? new URL(b) : na.normalize(b);
              return fs.readFileSync(b, c ? void 0 : "utf8");
            };
            ka = (b) => {
              b = ia(b, true);
              b.buffer || (b = new Uint8Array(b));
              u(b.buffer);
              return b;
            };
            ja = (b, c, d, f = true) => {
              b = oa(b) ? new URL(b) : na.normalize(b);
              fs.readFile(b, f ? void 0 : "utf8", (h, m) => {
                h ? d(h) : c(f ? m.buffer : m);
              });
            };
            !e.thisProgram && 1 < process.argv.length && (da = process.argv[1].replace(/\\/g, "/"));
            process.argv.slice(2);
            ea = (b, c) => {
              process.exitCode = b;
              throw c;
            };
            e.inspect = () => "[Emscripten Module object]";
          } else if (ha) {
            if ("object" == typeof process && "function" === typeof require$1 || "object" == typeof window || "function" == typeof importScripts)
              throw Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
            "undefined" != typeof read && (ia = read);
            ka = (a) => {
              if ("function" == typeof readbuffer)
                return new Uint8Array(readbuffer(a));
              a = read(a, "binary");
              u("object" == typeof a);
              return a;
            };
            ja = (a, b) => {
              setTimeout(() => b(ka(a)));
            };
            "undefined" == typeof clearTimeout && (globalThis.clearTimeout = () => {
            });
            "undefined" == typeof setTimeout && (globalThis.setTimeout = (a) => "function" == typeof a ? a() : g());
            "function" == typeof quit && (ea = (a, b) => {
              setTimeout(() => {
                if (!(b instanceof pa)) {
                  let c = b;
                  b && "object" == typeof b && b.stack && (c = [b, b.stack]);
                  z(`exiting due to exception: ${c}`);
                }
                quit(a);
              });
              throw b;
            });
            "undefined" != typeof print && ("undefined" == typeof console && (console = {}), console.log = print, console.warn = console.error = "undefined" != typeof printErr ? printErr : print);
          } else if (fa || k) {
            k ? r = self.location.href : "undefined" != typeof document && document.currentScript && (r = document.currentScript.src);
            _scriptDir && (r = _scriptDir);
            0 !== r.indexOf("blob:") ? r = r.substr(0, r.replace(/[?#].*/, "").lastIndexOf("/") + 1) : r = "";
            if ("object" != typeof window && "function" != typeof importScripts)
              throw Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
            ia = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.send(null);
              return b.responseText;
            };
            k && (ka = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.responseType = "arraybuffer";
              b.send(null);
              return new Uint8Array(b.response);
            });
            ja = (a, b, c) => {
              var d = new XMLHttpRequest();
              d.open("GET", a, true);
              d.responseType = "arraybuffer";
              d.onload = () => {
                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
              };
              d.onerror = c;
              d.send(null);
            };
          } else
            throw Error("environment detection error");
          var qa = console.log.bind(console), z = console.error.bind(console);
          Object.assign(e, ca);
          ca = null;
          C("ENVIRONMENT");
          C("GL_MAX_TEXTURE_IMAGE_UNITS");
          C("SDL_canPlayWithWebAudio");
          C("SDL_numSimultaneouslyQueuedBuffers");
          C("INITIAL_MEMORY");
          C("wasmMemory");
          C("arguments");
          C("buffer");
          C("canvas");
          C("doNotCaptureKeyboard");
          C("dynamicLibraries");
          C("elementPointerLock");
          C("extraStackTrace");
          C("forcedAspectRatio");
          C("instantiateWasm");
          C("keyboardListeningElement");
          C("freePreloadedMediaOnUse");
          C("loadSplitModule");
          C("logReadFiles");
          C("mainScriptUrlOrBlob");
          C("mem");
          C("monitorRunDependencies");
          C("noExitRuntime");
          C("noInitialRun");
          C("onAbort");
          C("onCustomMessage");
          C("onExit");
          C("onFree");
          C("onFullScreen");
          C("onMalloc");
          C("onRealloc");
          C("onRuntimeInitialized");
          C("postMainLoop");
          C("postRun");
          C("preInit");
          C("preMainLoop");
          C("preinitializedWebGLContext");
          C("memoryInitializerRequest");
          C("preloadPlugins");
          C("print");
          C("printErr");
          C("quit");
          C("setStatus");
          C("statusMessage");
          C("stderr");
          C("stdin");
          C("stdout");
          C("thisProgram");
          C("wasm");
          C("wasmBinary");
          C("websocket");
          C("fetchSettings");
          D("arguments", "arguments_");
          D("thisProgram", "thisProgram");
          D("quit", "quit_");
          u("undefined" == typeof e.memoryInitializerPrefixURL, "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");
          u("undefined" == typeof e.pthreadMainPrefixURL, "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");
          u("undefined" == typeof e.cdInitializerPrefixURL, "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");
          u("undefined" == typeof e.filePackagePrefixURL, "Module.filePackagePrefixURL option was removed, use Module.locateFile instead");
          u("undefined" == typeof e.read, "Module.read option was removed (modify read_ in JS)");
          u("undefined" == typeof e.readAsync, "Module.readAsync option was removed (modify readAsync in JS)");
          u("undefined" == typeof e.readBinary, "Module.readBinary option was removed (modify readBinary in JS)");
          u("undefined" == typeof e.setWindowTitle, "Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)");
          u("undefined" == typeof e.TOTAL_MEMORY, "Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY");
          D("asm", "wasmExports");
          D("read", "read_");
          D("readAsync", "readAsync");
          D("readBinary", "readBinary");
          D("setWindowTitle", "setWindowTitle");
          u(!ha, "shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");
          D("wasmBinary", "wasmBinary");
          "object" != typeof WebAssembly && g("no native wasm support detected");
          var ra, sa = false;
          function u(a, b) {
            a || g("Assertion failed" + (b ? ": " + b : ""));
          }
          var E, ta, ua, F, G, va, wa, xa;
          function ya() {
            var a = ra.buffer;
            e.HEAP8 = E = new Int8Array(a);
            e.HEAP16 = ua = new Int16Array(a);
            e.HEAPU8 = ta = new Uint8Array(a);
            e.HEAPU16 = new Uint16Array(a);
            e.HEAP32 = F = new Int32Array(a);
            e.HEAPU32 = G = new Uint32Array(a);
            e.HEAPF32 = va = new Float32Array(a);
            e.HEAPF64 = xa = new Float64Array(a);
            e.HEAP64 = wa = new BigInt64Array(a);
            e.HEAPU64 = new BigUint64Array(a);
          }
          u(!e.STACK_SIZE, "STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time");
          u("undefined" != typeof Int32Array && "undefined" !== typeof Float64Array && void 0 != Int32Array.prototype.subarray && void 0 != Int32Array.prototype.set, "JS engine does not provide full typed array support");
          u(!e.wasmMemory, "Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally");
          u(!e.INITIAL_MEMORY, "Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");
          function za() {
            if (!sa) {
              var a = Aa();
              0 == a && (a += 4);
              var b = G[a >> 2], c = G[a + 4 >> 2];
              34821223 == b && 2310721022 == c || g(`Stack overflow! Stack cookie has been overwritten at ${Ba(a)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${Ba(c)} ${Ba(b)}`);
              1668509029 != G[0] && g("Runtime error: The application has corrupted its heap memory area (address zero)!");
            }
          }
          var Ca = new Int16Array(1), Da = new Int8Array(Ca.buffer);
          Ca[0] = 25459;
          if (115 !== Da[0] || 99 !== Da[1])
            throw "Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)";
          var Ea = [], Fa = [], Ga = [], Ha = false;
          u(Math.imul, "This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
          u(Math.fround, "This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
          u(Math.clz32, "This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
          u(Math.trunc, "This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
          var Ia = 0, I = null, Ja = null, Ka = {};
          function La(a) {
            for (var b = a; ; ) {
              if (!Ka[a])
                return a;
              a = b + Math.random();
            }
          }
          function Ma(a) {
            Ia++;
            a ? (u(!Ka[a]), Ka[a] = 1, null === I && "undefined" != typeof setInterval && (I = setInterval(() => {
              if (sa)
                clearInterval(I), I = null;
              else {
                var b = false, c;
                for (c in Ka)
                  b || (b = true, z("still waiting on run dependencies:")), z(`dependency: ${c}`);
                b && z("(end of list)");
              }
            }, 1e4))) : z("warning: run dependency added without ID");
          }
          function Na(a) {
            Ia--;
            a ? (u(Ka[a]), delete Ka[a]) : z("warning: run dependency removed without ID");
            0 == Ia && (null !== I && (clearInterval(I), I = null), Ja && (a = Ja, Ja = null, a()));
          }
          function g(a) {
            a = "Aborted(" + a + ")";
            z(a);
            sa = true;
            a = new WebAssembly.RuntimeError(a);
            ba(a);
            throw a;
          }
          var Oa = (a) => a.startsWith("data:application/octet-stream;base64,"), oa = (a) => a.startsWith("file://");
          function J(a) {
            return function() {
              u(Ha, `native function \`${a}\` called before runtime initialization`);
              var b = L[a];
              u(b, `exported native function \`${a}\` not found`);
              return b.apply(null, arguments);
            };
          }
          var M;
          if (e.locateFile) {
            if (M = "glue.wasm", !Oa(M)) {
              var Pa = M;
              M = e.locateFile ? e.locateFile(Pa, r) : r + Pa;
            }
          } else
            M = new URL("glue.wasm", typeof document === "undefined" && typeof location === "undefined" ? require_url().pathToFileURL(__filename).href : typeof document === "undefined" ? location.href : _documentCurrentScript && _documentCurrentScript.src || new URL("index.js", document.baseURI).href).href;
          function Qa(a) {
            if (ka)
              return ka(a);
            throw "both async and sync fetching of the wasm failed";
          }
          function Ra(a) {
            if (fa || k) {
              if ("function" == typeof fetch && !oa(a))
                return fetch(a, { credentials: "same-origin" }).then((b) => {
                  if (!b.ok)
                    throw "failed to load wasm binary file at '" + a + "'";
                  return b.arrayBuffer();
                }).catch(() => Qa(a));
              if (ja)
                return new Promise((b, c) => {
                  ja(a, (d) => b(new Uint8Array(d)), c);
                });
            }
            return Promise.resolve().then(() => Qa(a));
          }
          function Sa(a, b, c) {
            return Ra(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
              z(`failed to asynchronously prepare wasm: ${d}`);
              oa(M) && z(`warning: Loading from a file URI (${M}) is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing`);
              g(d);
            });
          }
          function Ta(a, b) {
            var c = M;
            return "function" != typeof WebAssembly.instantiateStreaming || Oa(c) || oa(c) || n || "function" != typeof fetch ? Sa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(f) {
              z(`wasm streaming compile failed: ${f}`);
              z("falling back to ArrayBuffer instantiation");
              return Sa(c, a, b);
            }));
          }
          function D(a, b) {
            Object.getOwnPropertyDescriptor(e, a) || Object.defineProperty(e, a, { configurable: true, get() {
              g(`\`Module.${a}\` has been replaced by \`${b}\` (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)`);
            } });
          }
          function C(a) {
            Object.getOwnPropertyDescriptor(e, a) && g(`\`Module.${a}\` was supplied but \`${a}\` not included in INCOMING_MODULE_JS_API`);
          }
          function Ua(a) {
            return "FS_createPath" === a || "FS_createDataFile" === a || "FS_createPreloadedFile" === a || "FS_unlink" === a || "addRunDependency" === a || "FS_createLazyFile" === a || "FS_createDevice" === a || "removeRunDependency" === a;
          }
          function Va(a, b) {
            "undefined" !== typeof globalThis && Object.defineProperty(globalThis, a, { configurable: true, get() {
              Wa(`\`${a}\` is not longer defined by emscripten. ${b}`);
            } });
          }
          Va("buffer", "Please use HEAP8.buffer or wasmMemory.buffer");
          Va("asm", "Please use wasmExports instead");
          function Xa(a) {
            Object.getOwnPropertyDescriptor(e, a) || Object.defineProperty(e, a, { configurable: true, get() {
              var b = `'${a}' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)`;
              Ua(a) && (b += ". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you");
              g(b);
            } });
          }
          function pa(a) {
            this.name = "ExitStatus";
            this.message = `Program terminated with exit(${a})`;
            this.status = a;
          }
          var Ba = (a) => {
            u("number" === typeof a);
            return "0x" + (a >>> 0).toString(16).padStart(8, "0");
          }, Wa = (a) => {
            Ya || (Ya = {});
            Ya[a] || (Ya[a] = 1, n && (a = "warning: " + a), z(a));
          }, Ya, Za = (a, b) => {
            for (var c = 0, d = a.length - 1; 0 <= d; d--) {
              var f = a[d];
              "." === f ? a.splice(d, 1) : ".." === f ? (a.splice(d, 1), c++) : c && (a.splice(d, 1), c--);
            }
            if (b)
              for (; c; c--)
                a.unshift("..");
            return a;
          }, P = (a) => {
            var b = "/" === a.charAt(0), c = "/" === a.substr(-1);
            (a = Za(a.split("/").filter((d) => !!d), !b).join("/")) || b || (a = ".");
            a && c && (a += "/");
            return (b ? "/" : "") + a;
          }, $a = (a) => {
            var b = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(a).slice(1);
            a = b[0];
            b = b[1];
            if (!a && !b)
              return ".";
            b && (b = b.substr(0, b.length - 1));
            return a + b;
          }, Q = (a) => {
            if ("/" === a)
              return "/";
            a = P(a);
            a = a.replace(/\/$/, "");
            var b = a.lastIndexOf("/");
            return -1 === b ? a : a.substr(b + 1);
          }, ab = (a, b) => P(a + "/" + b), bb = () => {
            if ("object" == typeof crypto && "function" == typeof crypto.getRandomValues)
              return (c) => crypto.getRandomValues(c);
            if (n)
              try {
                var a = require$1("crypto");
                if (a.randomFillSync)
                  return (c) => a.randomFillSync(c);
                var b = a.randomBytes;
                return (c) => (c.set(b(c.byteLength)), c);
              } catch (c) {
              }
            g("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: (array) => { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };");
          }, cb = (a) => (cb = bb())(a);
          function db() {
            for (var a = "", b = false, c = arguments.length - 1; -1 <= c && !b; c--) {
              b = 0 <= c ? arguments[c] : R.cwd();
              if ("string" != typeof b)
                throw new TypeError("Arguments to path.resolve must be strings");
              if (!b)
                return "";
              a = b + "/" + a;
              b = "/" === b.charAt(0);
            }
            a = Za(a.split("/").filter((d) => !!d), !b).join("/");
            return (b ? "/" : "") + a || ".";
          }
          var eb = (a, b) => {
            function c(m) {
              for (var p = 0; p < m.length && "" === m[p]; p++)
                ;
              for (var y = m.length - 1; 0 <= y && "" === m[y]; y--)
                ;
              return p > y ? [] : m.slice(p, y - p + 1);
            }
            a = db(a).substr(1);
            b = db(b).substr(1);
            a = c(a.split("/"));
            b = c(b.split("/"));
            for (var d = Math.min(a.length, b.length), f = d, h = 0; h < d; h++)
              if (a[h] !== b[h]) {
                f = h;
                break;
              }
            d = [];
            for (h = f; h < a.length; h++)
              d.push("..");
            d = d.concat(b.slice(f));
            return d.join("/");
          }, gb = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, hb = (a, b) => {
            for (var c = b + NaN, d = b; a[d] && !(d >= c); )
              ++d;
            if (16 < d - b && a.buffer && gb)
              return gb.decode(a.subarray(b, d));
            for (c = ""; b < d; ) {
              var f = a[b++];
              if (f & 128) {
                var h = a[b++] & 63;
                if (192 == (f & 224))
                  c += String.fromCharCode((f & 31) << 6 | h);
                else {
                  var m = a[b++] & 63;
                  224 == (f & 240) ? f = (f & 15) << 12 | h << 6 | m : (240 != (f & 248) && Wa("Invalid UTF-8 leading byte " + Ba(f) + " encountered when deserializing a UTF-8 string in wasm memory to a JS string!"), f = (f & 7) << 18 | h << 12 | m << 6 | a[b++] & 63);
                  65536 > f ? c += String.fromCharCode(f) : (f -= 65536, c += String.fromCharCode(55296 | f >> 10, 56320 | f & 1023));
                }
              } else
                c += String.fromCharCode(f);
            }
            return c;
          }, ib = [], jb = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
            }
            return b;
          }, kb = (a, b, c, d) => {
            u("string" === typeof a, `stringToUTF8Array expects a string (got ${typeof a})`);
            if (!(0 < d))
              return 0;
            var f = c;
            d = c + d - 1;
            for (var h = 0; h < a.length; ++h) {
              var m = a.charCodeAt(h);
              if (55296 <= m && 57343 >= m) {
                var p = a.charCodeAt(++h);
                m = 65536 + ((m & 1023) << 10) | p & 1023;
              }
              if (127 >= m) {
                if (c >= d)
                  break;
                b[c++] = m;
              } else {
                if (2047 >= m) {
                  if (c + 1 >= d)
                    break;
                  b[c++] = 192 | m >> 6;
                } else {
                  if (65535 >= m) {
                    if (c + 2 >= d)
                      break;
                    b[c++] = 224 | m >> 12;
                  } else {
                    if (c + 3 >= d)
                      break;
                    1114111 < m && Wa("Invalid Unicode code point " + Ba(m) + " encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).");
                    b[c++] = 240 | m >> 18;
                    b[c++] = 128 | m >> 12 & 63;
                  }
                  b[c++] = 128 | m >> 6 & 63;
                }
                b[c++] = 128 | m & 63;
              }
            }
            b[c] = 0;
            return c - f;
          };
          function lb(a, b) {
            var c = Array(jb(a) + 1);
            a = kb(a, c, 0, c.length);
            b && (c.length = a);
            return c;
          }
          var mb = [];
          function nb(a, b) {
            mb[a] = { input: [], output: [], K: b };
            ob(a, pb);
          }
          var pb = { open(a) {
            var b = mb[a.node.rdev];
            if (!b)
              throw new R.g(43);
            a.tty = b;
            a.seekable = false;
          }, close(a) {
            a.tty.K.fsync(a.tty);
          }, fsync(a) {
            a.tty.K.fsync(a.tty);
          }, read(a, b, c, d) {
            if (!a.tty || !a.tty.K.ra)
              throw new R.g(60);
            for (var f = 0, h = 0; h < d; h++) {
              try {
                var m = a.tty.K.ra(a.tty);
              } catch (p) {
                throw new R.g(29);
              }
              if (void 0 === m && 0 === f)
                throw new R.g(6);
              if (null === m || void 0 === m)
                break;
              f++;
              b[c + h] = m;
            }
            f && (a.node.timestamp = Date.now());
            return f;
          }, write(a, b, c, d) {
            if (!a.tty || !a.tty.K.ia)
              throw new R.g(60);
            try {
              for (var f = 0; f < d; f++)
                a.tty.K.ia(
                  a.tty,
                  b[c + f]
                );
            } catch (h) {
              throw new R.g(29);
            }
            d && (a.node.timestamp = Date.now());
            return f;
          } }, qb = { ra() {
            a: {
              if (!ib.length) {
                var a = null;
                if (n) {
                  var b = Buffer2.alloc(256), c = 0, d = process.stdin.fd;
                  try {
                    c = fs.readSync(d, b);
                  } catch (f) {
                    if (f.toString().includes("EOF"))
                      c = 0;
                    else
                      throw f;
                  }
                  0 < c ? a = b.slice(0, c).toString("utf-8") : a = null;
                } else
                  "undefined" != typeof window && "function" == typeof window.prompt ? (a = window.prompt("Input: "), null !== a && (a += "\n")) : "function" == typeof readline && (a = readline(), null !== a && (a += "\n"));
                if (!a) {
                  a = null;
                  break a;
                }
                ib = lb(
                  a,
                  true
                );
              }
              a = ib.shift();
            }
            return a;
          }, ia(a, b) {
            null === b || 10 === b ? (qa(hb(a.output, 0)), a.output = []) : 0 != b && a.output.push(b);
          }, fsync(a) {
            a.output && 0 < a.output.length && (qa(hb(a.output, 0)), a.output = []);
          }, Ia() {
            return { ab: 25856, cb: 5, $a: 191, bb: 35387, Za: [3, 28, 127, 21, 4, 0, 1, 0, 17, 19, 26, 0, 18, 15, 23, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] };
          }, Ja() {
            return 0;
          }, Ka() {
            return [24, 80];
          } }, rb = { ia(a, b) {
            null === b || 10 === b ? (z(hb(a.output, 0)), a.output = []) : 0 != b && a.output.push(b);
          }, fsync(a) {
            a.output && 0 < a.output.length && (z(hb(a.output, 0)), a.output = []);
          } }, sb = () => {
            g("internal error: mmapAlloc called but `emscripten_builtin_memalign` native symbol not exported");
          };
          function tb(a, b) {
            var c = a.m ? a.m.length : 0;
            c >= b || (b = Math.max(b, c * (1048576 > c ? 2 : 1.125) >>> 0), 0 != c && (b = Math.max(b, 256)), c = a.m, a.m = new Uint8Array(b), 0 < a.o && a.m.set(c.subarray(0, a.o), 0));
          }
          var S = { G: null, s() {
            return S.createNode(null, "/", 16895, 0);
          }, createNode(a, b, c, d) {
            if (24576 === (c & 61440) || R.isFIFO(c))
              throw new R.g(63);
            S.G || (S.G = { dir: { node: { C: S.h.C, v: S.h.v, lookup: S.h.lookup, J: S.h.J, rename: S.h.rename, unlink: S.h.unlink, rmdir: S.h.rmdir, readdir: S.h.readdir, symlink: S.h.symlink }, stream: { D: S.l.D } }, file: { node: { C: S.h.C, v: S.h.v }, stream: { D: S.l.D, read: S.l.read, write: S.l.write, T: S.l.T, S: S.l.S, V: S.l.V } }, link: { node: { C: S.h.C, v: S.h.v, readlink: S.h.readlink }, stream: {} }, na: { node: { C: S.h.C, v: S.h.v }, stream: R.Da } });
            c = R.createNode(a, b, c, d);
            T(c.mode) ? (c.h = S.G.dir.node, c.l = S.G.dir.stream, c.m = {}) : R.isFile(c.mode) ? (c.h = S.G.file.node, c.l = S.G.file.stream, c.o = 0, c.m = null) : 40960 === (c.mode & 61440) ? (c.h = S.G.link.node, c.l = S.G.link.stream) : 8192 === (c.mode & 61440) && (c.h = S.G.na.node, c.l = S.G.na.stream);
            c.timestamp = Date.now();
            a && (a.m[b] = c, a.timestamp = c.timestamp);
            return c;
          }, lb(a) {
            return a.m ? a.m.subarray ? a.m.subarray(0, a.o) : new Uint8Array(a.m) : new Uint8Array(0);
          }, h: { C(a) {
            var b = {};
            b.dev = 8192 === (a.mode & 61440) ? a.id : 1;
            b.ino = a.id;
            b.mode = a.mode;
            b.nlink = 1;
            b.uid = 0;
            b.gid = 0;
            b.rdev = a.rdev;
            T(a.mode) ? b.size = 4096 : R.isFile(a.mode) ? b.size = a.o : 40960 === (a.mode & 61440) ? b.size = a.link.length : b.size = 0;
            b.atime = new Date(a.timestamp);
            b.mtime = new Date(a.timestamp);
            b.ctime = new Date(a.timestamp);
            b.Ba = 4096;
            b.blocks = Math.ceil(b.size / b.Ba);
            return b;
          }, v(a, b) {
            void 0 !== b.mode && (a.mode = b.mode);
            void 0 !== b.timestamp && (a.timestamp = b.timestamp);
            if (void 0 !== b.size && (b = b.size, a.o != b))
              if (0 == b)
                a.m = null, a.o = 0;
              else {
                var c = a.m;
                a.m = new Uint8Array(b);
                c && a.m.set(c.subarray(
                  0,
                  Math.min(b, a.o)
                ));
                a.o = b;
              }
          }, lookup() {
            throw R.da[44];
          }, J(a, b, c, d) {
            return S.createNode(a, b, c, d);
          }, rename(a, b, c) {
            if (T(a.mode)) {
              try {
                var d = U(b, c);
              } catch (h) {
              }
              if (d)
                for (var f in d.m)
                  throw new R.g(55);
            }
            delete a.parent.m[a.name];
            a.parent.timestamp = Date.now();
            a.name = c;
            b.m[c] = a;
            b.timestamp = a.parent.timestamp;
            a.parent = b;
          }, unlink(a, b) {
            delete a.m[b];
            a.timestamp = Date.now();
          }, rmdir(a, b) {
            var c = U(a, b), d;
            for (d in c.m)
              throw new R.g(55);
            delete a.m[b];
            a.timestamp = Date.now();
          }, readdir(a) {
            var b = [".", ".."], c;
            for (c in a.m)
              a.m.hasOwnProperty(c) && b.push(c);
            return b;
          }, symlink(a, b, c) {
            a = S.createNode(a, b, 41471, 0);
            a.link = c;
            return a;
          }, readlink(a) {
            if (40960 !== (a.mode & 61440))
              throw new R.g(28);
            return a.link;
          } }, l: { read(a, b, c, d, f) {
            var h = a.node.m;
            if (f >= a.node.o)
              return 0;
            a = Math.min(a.node.o - f, d);
            u(0 <= a);
            if (8 < a && h.subarray)
              b.set(h.subarray(f, f + a), c);
            else
              for (d = 0; d < a; d++)
                b[c + d] = h[f + d];
            return a;
          }, write(a, b, c, d, f, h) {
            u(!(b instanceof ArrayBuffer));
            b.buffer === E.buffer && (h = false);
            if (!d)
              return 0;
            a = a.node;
            a.timestamp = Date.now();
            if (b.subarray && (!a.m || a.m.subarray)) {
              if (h)
                return u(0 === f, "canOwn must imply no weird position inside the file"), a.m = b.subarray(c, c + d), a.o = d;
              if (0 === a.o && 0 === f)
                return a.m = b.slice(c, c + d), a.o = d;
              if (f + d <= a.o)
                return a.m.set(b.subarray(c, c + d), f), d;
            }
            tb(a, f + d);
            if (a.m.subarray && b.subarray)
              a.m.set(b.subarray(c, c + d), f);
            else
              for (h = 0; h < d; h++)
                a.m[f + h] = b[c + h];
            a.o = Math.max(a.o, f + d);
            return d;
          }, D(a, b, c) {
            1 === c ? b += a.position : 2 === c && R.isFile(a.node.mode) && (b += a.node.o);
            if (0 > b)
              throw new R.g(28);
            return b;
          }, T(a, b, c) {
            tb(a.node, b + c);
            a.node.o = Math.max(a.node.o, b + c);
          }, S(a, b, c, d, f) {
            if (!R.isFile(a.node.mode))
              throw new R.g(43);
            a = a.node.m;
            if (f & 2 || a.buffer !== E.buffer) {
              if (0 < c || c + b < a.length)
                a.subarray ? a = a.subarray(c, c + b) : a = Array.prototype.slice.call(a, c, c + b);
              c = true;
              b = sb();
              if (!b)
                throw new R.g(48);
              E.set(a, b);
            } else
              c = false, b = a.byteOffset;
            return { Ra: b, Aa: c };
          }, V(a, b, c, d) {
            S.l.write(a, b, 0, d, c, false);
            return 0;
          } } }, ub = (a, b, c) => {
            var d = La(`al ${a}`);
            ja(a, (f) => {
              u(f, `Loading data file "${a}" failed (no arrayBuffer).`);
              b(new Uint8Array(f));
              d && Na(d);
            }, () => {
              if (c)
                c();
              else
                throw `Loading data file "${a}" failed.`;
            });
            d && Ma(d);
          }, vb = [], wb = (a, b, c, d) => {
            "undefined" != typeof Browser && Browser.R();
            var f = false;
            vb.forEach((h) => {
              !f && h.canHandle(b) && (h.handle(a, b, c, d), f = true);
            });
            return f;
          }, xb = (a, b) => {
            var c = 0;
            a && (c |= 365);
            b && (c |= 146);
            return c;
          }, yb = {
            0: "Success",
            1: "Arg list too long",
            2: "Permission denied",
            3: "Address already in use",
            4: "Address not available",
            5: "Address family not supported by protocol family",
            6: "No more processes",
            7: "Socket already connected",
            8: "Bad file number",
            9: "Trying to read unreadable message",
            10: "Mount device busy",
            11: "Operation canceled",
            12: "No children",
            13: "Connection aborted",
            14: "Connection refused",
            15: "Connection reset by peer",
            16: "File locking deadlock error",
            17: "Destination address required",
            18: "Math arg out of domain of func",
            19: "Quota exceeded",
            20: "File exists",
            21: "Bad address",
            22: "File too large",
            23: "Host is unreachable",
            24: "Identifier removed",
            25: "Illegal byte sequence",
            26: "Connection already in progress",
            27: "Interrupted system call",
            28: "Invalid argument",
            29: "I/O error",
            30: "Socket is already connected",
            31: "Is a directory",
            32: "Too many symbolic links",
            33: "Too many open files",
            34: "Too many links",
            35: "Message too long",
            36: "Multihop attempted",
            37: "File or path name too long",
            38: "Network interface is not configured",
            39: "Connection reset by network",
            40: "Network is unreachable",
            41: "Too many open files in system",
            42: "No buffer space available",
            43: "No such device",
            44: "No such file or directory",
            45: "Exec format error",
            46: "No record locks available",
            47: "The link has been severed",
            48: "Not enough core",
            49: "No message of desired type",
            50: "Protocol not available",
            51: "No space left on device",
            52: "Function not implemented",
            53: "Socket is not connected",
            54: "Not a directory",
            55: "Directory not empty",
            56: "State not recoverable",
            57: "Socket operation on non-socket",
            59: "Not a typewriter",
            60: "No such device or address",
            61: "Value too large for defined data type",
            62: "Previous owner died",
            63: "Not super-user",
            64: "Broken pipe",
            65: "Protocol error",
            66: "Unknown protocol",
            67: "Protocol wrong type for socket",
            68: "Math result not representable",
            69: "Read only file system",
            70: "Illegal seek",
            71: "No such process",
            72: "Stale file handle",
            73: "Connection timed out",
            74: "Text file busy",
            75: "Cross-device link",
            100: "Device not a stream",
            101: "Bad font file fmt",
            102: "Invalid slot",
            103: "Invalid request code",
            104: "No anode",
            105: "Block device required",
            106: "Channel number out of range",
            107: "Level 3 halted",
            108: "Level 3 reset",
            109: "Link number out of range",
            110: "Protocol driver not attached",
            111: "No CSI structure available",
            112: "Level 2 halted",
            113: "Invalid exchange",
            114: "Invalid request descriptor",
            115: "Exchange full",
            116: "No data (for no delay io)",
            117: "Timer expired",
            118: "Out of streams resources",
            119: "Machine is not on the network",
            120: "Package not installed",
            121: "The object is remote",
            122: "Advertise error",
            123: "Srmount error",
            124: "Communication error on send",
            125: "Cross mount point (not really error)",
            126: "Given log. name not unique",
            127: "f.d. invalid for this operation",
            128: "Remote address changed",
            129: "Can   access a needed shared lib",
            130: "Accessing a corrupted shared lib",
            131: ".lib section in a.out corrupted",
            132: "Attempting to link in too many libs",
            133: "Attempting to exec a shared library",
            135: "Streams pipe error",
            136: "Too many users",
            137: "Socket type not supported",
            138: "Not supported",
            139: "Protocol family not supported",
            140: "Can't send after socket shutdown",
            141: "Too many references",
            142: "Host is down",
            148: "No medium (in tape drive)",
            156: "Level 2 not synchronized"
          }, zb = {
            EPERM: 63,
            ENOENT: 44,
            ESRCH: 71,
            EINTR: 27,
            EIO: 29,
            ENXIO: 60,
            E2BIG: 1,
            ENOEXEC: 45,
            EBADF: 8,
            ECHILD: 12,
            EAGAIN: 6,
            EWOULDBLOCK: 6,
            ENOMEM: 48,
            EACCES: 2,
            EFAULT: 21,
            ENOTBLK: 105,
            EBUSY: 10,
            EEXIST: 20,
            EXDEV: 75,
            ENODEV: 43,
            ENOTDIR: 54,
            EISDIR: 31,
            EINVAL: 28,
            ENFILE: 41,
            EMFILE: 33,
            ENOTTY: 59,
            ETXTBSY: 74,
            EFBIG: 22,
            ENOSPC: 51,
            ESPIPE: 70,
            EROFS: 69,
            EMLINK: 34,
            EPIPE: 64,
            EDOM: 18,
            ERANGE: 68,
            ENOMSG: 49,
            EIDRM: 24,
            ECHRNG: 106,
            EL2NSYNC: 156,
            EL3HLT: 107,
            EL3RST: 108,
            ELNRNG: 109,
            EUNATCH: 110,
            ENOCSI: 111,
            EL2HLT: 112,
            EDEADLK: 16,
            ENOLCK: 46,
            EBADE: 113,
            EBADR: 114,
            EXFULL: 115,
            ENOANO: 104,
            EBADRQC: 103,
            EBADSLT: 102,
            EDEADLOCK: 16,
            EBFONT: 101,
            ENOSTR: 100,
            ENODATA: 116,
            ETIME: 117,
            ENOSR: 118,
            ENONET: 119,
            ENOPKG: 120,
            EREMOTE: 121,
            ENOLINK: 47,
            EADV: 122,
            ESRMNT: 123,
            ECOMM: 124,
            EPROTO: 65,
            EMULTIHOP: 36,
            EDOTDOT: 125,
            EBADMSG: 9,
            ENOTUNIQ: 126,
            EBADFD: 127,
            EREMCHG: 128,
            ELIBACC: 129,
            ELIBBAD: 130,
            ELIBSCN: 131,
            ELIBMAX: 132,
            ELIBEXEC: 133,
            ENOSYS: 52,
            ENOTEMPTY: 55,
            ENAMETOOLONG: 37,
            ELOOP: 32,
            EOPNOTSUPP: 138,
            EPFNOSUPPORT: 139,
            ECONNRESET: 15,
            ENOBUFS: 42,
            EAFNOSUPPORT: 5,
            EPROTOTYPE: 67,
            ENOTSOCK: 57,
            ENOPROTOOPT: 50,
            ESHUTDOWN: 140,
            ECONNREFUSED: 14,
            EADDRINUSE: 3,
            ECONNABORTED: 13,
            ENETUNREACH: 40,
            ENETDOWN: 38,
            ETIMEDOUT: 73,
            EHOSTDOWN: 142,
            EHOSTUNREACH: 23,
            EINPROGRESS: 26,
            EALREADY: 7,
            EDESTADDRREQ: 17,
            EMSGSIZE: 35,
            EPROTONOSUPPORT: 66,
            ESOCKTNOSUPPORT: 137,
            EADDRNOTAVAIL: 4,
            ENETRESET: 39,
            EISCONN: 30,
            ENOTCONN: 53,
            ETOOMANYREFS: 141,
            EUSERS: 136,
            EDQUOT: 19,
            ESTALE: 72,
            ENOTSUP: 138,
            ENOMEDIUM: 148,
            EILSEQ: 25,
            EOVERFLOW: 61,
            ECANCELED: 11,
            ENOTRECOVERABLE: 56,
            EOWNERDEAD: 62,
            ESTRPIPE: 135
          }, Ab = (a) => a.replace(/\b_Z[\w\d_]+/g, function(b) {
            Wa("warning: build with -sDEMANGLE_SUPPORT to link in libcxxabi demangling");
            return b === b ? b : b + " [" + b + "]";
          });
          function ob(a, b) {
            R.pa[a] = { l: b };
          }
          function T(a) {
            return 16384 === (a & 61440);
          }
          function U(a, b) {
            var c;
            if (c = (c = Bb(a, "x")) ? c : a.h.lookup ? 0 : 2)
              throw new R.g(c, a);
            for (c = R.F[Cb(a.id, b)]; c; c = c.N) {
              var d = c.name;
              if (c.parent.id === a.id && d === b)
                return c;
            }
            return R.lookup(a, b);
          }
          function V(a, b = {}) {
            a = db(a);
            if (!a)
              return { path: "", node: null };
            b = Object.assign({ ba: true, ka: 0 }, b);
            if (8 < b.ka)
              throw new R.g(32);
            a = a.split("/").filter((m) => !!m);
            for (var c = R.root, d = "/", f = 0; f < a.length; f++) {
              var h = f === a.length - 1;
              if (h && b.parent)
                break;
              c = U(c, a[f]);
              d = P(d + "/" + a[f]);
              c.A && (!h || h && b.ba) && (c = c.A.root);
              if (!h || b.B) {
                for (h = 0; 40960 === (c.mode & 61440); )
                  if (c = R.readlink(d), d = db($a(d), c), c = V(d, { ka: b.ka + 1 }).node, 40 < h++)
                    throw new R.g(32);
              }
            }
            return { path: d, node: c };
          }
          function Db(a) {
            for (var b; ; ) {
              if (R.Z(a))
                return a = a.s.ua, b ? "/" !== a[a.length - 1] ? `${a}/${b}` : a + b : a;
              b = b ? `${a.name}/${b}` : a.name;
              a = a.parent;
            }
          }
          function Cb(a, b) {
            for (var c = 0, d = 0; d < b.length; d++)
              c = (c << 5) - c + b.charCodeAt(d) | 0;
            return (a + c >>> 0) % R.F.length;
          }
          function Eb(a) {
            var b = Cb(a.parent.id, a.name);
            a.N = R.F[b];
            R.F[b] = a;
          }
          function Fb(a) {
            var b = Cb(a.parent.id, a.name);
            if (R.F[b] === a)
              R.F[b] = a.N;
            else
              for (b = R.F[b]; b; ) {
                if (b.N === a) {
                  b.N = a.N;
                  break;
                }
                b = b.N;
              }
          }
          function Gb(a) {
            var b = ["r", "w", "rw"][a & 3];
            a & 512 && (b += "w");
            return b;
          }
          function Bb(a, b) {
            if (R.ta)
              return 0;
            if (!b.includes("r") || a.mode & 292) {
              if (b.includes("w") && !(a.mode & 146) || b.includes("x") && !(a.mode & 73))
                return 2;
            } else
              return 2;
            return 0;
          }
          function Hb(a, b) {
            try {
              return U(a, b), 20;
            } catch (c) {
            }
            return Bb(a, "wx");
          }
          function Ib(a, b, c) {
            try {
              var d = U(a, b);
            } catch (f) {
              return f.u;
            }
            if (a = Bb(a, "wx"))
              return a;
            if (c) {
              if (!T(d.mode))
                return 54;
              if (R.Z(d) || Db(d) === R.cwd())
                return 10;
            } else if (T(d.mode))
              return 31;
            return 0;
          }
          function Jb() {
            for (var a = 0; a <= R.xa; a++)
              if (!R.streams[a])
                return a;
            throw new R.g(33);
          }
          function W(a) {
            a = R.qa(a);
            if (!a)
              throw new R.g(8);
            return a;
          }
          function Kb(a, b = -1) {
            R.X || (R.X = function() {
              this.I = {};
            }, R.X.prototype = {}, Object.defineProperties(R.X.prototype, { object: { get() {
              return this.node;
            }, set(c) {
              this.node = c;
            } }, flags: { get() {
              return this.I.flags;
            }, set(c) {
              this.I.flags = c;
            } }, position: { get() {
              return this.I.position;
            }, set(c) {
              this.I.position = c;
            } } }));
            a = Object.assign(new R.X(), a);
            -1 == b && (b = Jb());
            a.fd = b;
            return R.streams[b] = a;
          }
          function Lb(a) {
            var b = [];
            for (a = [a]; a.length; ) {
              var c = a.pop();
              b.push(c);
              a.push.apply(a, c.U);
            }
            return b;
          }
          function Mb(a, b, c) {
            "undefined" == typeof c && (c = b, b = 438);
            return R.J(a, b | 8192, c);
          }
          function Nb() {
            R.g || (R.g = function(a, b) {
              this.name = "ErrnoError";
              this.node = b;
              this.Sa = function(c) {
                this.u = c;
                for (var d in zb)
                  if (zb[d] === c) {
                    this.code = d;
                    break;
                  }
              };
              this.Sa(a);
              this.message = yb[a];
              this.stack && (Object.defineProperty(this, "stack", { value: Error().stack, writable: true }), this.stack = Ab(this.stack));
            }, R.g.prototype = Error(), R.g.prototype.constructor = R.g, [44].forEach((a) => {
              R.da[a] = new R.g(a);
              R.da[a].stack = "<generic error, no stack>";
            }));
          }
          function Ob(a, b) {
            try {
              var c = V(a, { B: !b });
              a = c.path;
            } catch (f) {
            }
            var d = { Z: false, exists: false, error: 0, name: null, path: null, object: null, Oa: false, Qa: null, Pa: null };
            try {
              c = V(a, { parent: true }), d.Oa = true, d.Qa = c.path, d.Pa = c.node, d.name = Q(a), c = V(a, { B: !b }), d.exists = true, d.path = c.path, d.object = c.node, d.name = c.node.name, d.Z = "/" === c.path;
            } catch (f) {
              d.error = f.u;
            }
            return d;
          }
          function Pb(a, b, c, d) {
            a = "string" == typeof a ? a : Db(a);
            b = P(a + "/" + b);
            return R.create(b, xb(c, d));
          }
          function Qb(a) {
            if (!(a.La || a.Ma || a.link || a.m)) {
              if ("undefined" != typeof XMLHttpRequest)
                throw Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
              if (ia)
                try {
                  a.m = lb(ia(a.url), true), a.o = a.m.length;
                } catch (b) {
                  throw new R.g(29);
                }
              else
                throw Error("Cannot load without read() or XMLHttpRequest.");
            }
          }
          var R = {
            root: null,
            U: [],
            pa: {},
            streams: [],
            Na: 1,
            F: null,
            oa: "/",
            Y: false,
            ta: true,
            g: null,
            da: {},
            Fa: null,
            W: 0,
            createNode(a, b, c, d) {
              u("object" == typeof a);
              a = new R.wa(a, b, c, d);
              Eb(a);
              return a;
            },
            Z(a) {
              return a === a.parent;
            },
            isFile(a) {
              return 32768 === (a & 61440);
            },
            isFIFO(a) {
              return 4096 === (a & 61440);
            },
            isSocket(a) {
              return 49152 === (a & 49152);
            },
            xa: 4096,
            qa: (a) => R.streams[a],
            Da: { open(a) {
              a.l = R.Ga(a.node.rdev).l;
              a.l.open && a.l.open(a);
            }, D() {
              throw new R.g(70);
            } },
            ha: (a) => a >> 8,
            nb: (a) => a & 255,
            M: (a, b) => a << 8 | b,
            Ga: (a) => R.pa[a],
            va(a, b) {
              function c(m) {
                u(0 < R.W);
                R.W--;
                return b(m);
              }
              function d(m) {
                if (m) {
                  if (!d.Ea)
                    return d.Ea = true, c(m);
                } else
                  ++h >= f.length && c(null);
              }
              "function" == typeof a && (b = a, a = false);
              R.W++;
              1 < R.W && z(`warning: ${R.W} FS.syncfs operations in flight at once, probably just doing extra work`);
              var f = Lb(R.root.s), h = 0;
              f.forEach((m) => {
                if (!m.type.va)
                  return d(null);
                m.type.va(m, a, d);
              });
            },
            s(a, b, c) {
              if ("string" == typeof a)
                throw a;
              var d = "/" === c, f = !c;
              if (d && R.root)
                throw new R.g(10);
              if (!d && !f) {
                var h = V(c, { ba: false });
                c = h.path;
                h = h.node;
                if (h.A)
                  throw new R.g(10);
                if (!T(h.mode))
                  throw new R.g(54);
              }
              b = { type: a, rb: b, ua: c, U: [] };
              a = a.s(b);
              a.s = b;
              b.root = a;
              d ? R.root = a : h && (h.A = b, h.s && h.s.U.push(b));
              return a;
            },
            xb(a) {
              a = V(a, { ba: false });
              if (!a.node.A)
                throw new R.g(28);
              a = a.node;
              var b = a.A, c = Lb(b);
              Object.keys(R.F).forEach((d) => {
                for (d = R.F[d]; d; ) {
                  var f = d.N;
                  c.includes(d.s) && Fb(d);
                  d = f;
                }
              });
              a.A = null;
              b = a.s.U.indexOf(b);
              u(-1 !== b);
              a.s.U.splice(b, 1);
            },
            lookup(a, b) {
              return a.h.lookup(a, b);
            },
            J(a, b, c) {
              var d = V(a, { parent: true }).node;
              a = Q(a);
              if (!a || "." === a || ".." === a)
                throw new R.g(28);
              var f = Hb(d, a);
              if (f)
                throw new R.g(f);
              if (!d.h.J)
                throw new R.g(63);
              return d.h.J(d, a, b, c);
            },
            create(a, b) {
              return R.J(a, (void 0 !== b ? b : 438) & 4095 | 32768, 0);
            },
            mkdir(a, b) {
              return R.J(a, (void 0 !== b ? b : 511) & 1023 | 16384, 0);
            },
            ob(a, b) {
              a = a.split("/");
              for (var c = "", d = 0; d < a.length; ++d)
                if (a[d]) {
                  c += "/" + a[d];
                  try {
                    R.mkdir(c, b);
                  } catch (f) {
                    if (20 != f.u)
                      throw f;
                  }
                }
            },
            symlink(a, b) {
              if (!db(a))
                throw new R.g(44);
              var c = V(b, { parent: true }).node;
              if (!c)
                throw new R.g(44);
              b = Q(b);
              var d = Hb(c, b);
              if (d)
                throw new R.g(d);
              if (!c.h.symlink)
                throw new R.g(63);
              return c.h.symlink(c, b, a);
            },
            rename(a, b) {
              var c = $a(a), d = $a(b), f = Q(a), h = Q(b);
              var m = V(a, { parent: true });
              var p = m.node;
              m = V(b, { parent: true });
              m = m.node;
              if (!p || !m)
                throw new R.g(44);
              if (p.s !== m.s)
                throw new R.g(75);
              var y = U(p, f);
              a = eb(a, d);
              if ("." !== a.charAt(0))
                throw new R.g(28);
              a = eb(b, c);
              if ("." !== a.charAt(0))
                throw new R.g(55);
              try {
                var q = U(m, h);
              } catch (x) {
              }
              if (y !== q) {
                b = T(y.mode);
                if (f = Ib(p, f, b))
                  throw new R.g(f);
                if (f = q ? Ib(m, h, b) : Hb(m, h))
                  throw new R.g(f);
                if (!p.h.rename)
                  throw new R.g(63);
                if (y.A || q && q.A)
                  throw new R.g(10);
                if (m !== p && (f = Bb(p, "w")))
                  throw new R.g(f);
                Fb(y);
                try {
                  p.h.rename(y, m, h);
                } catch (x) {
                  throw x;
                } finally {
                  Eb(y);
                }
              }
            },
            rmdir(a) {
              var b = V(a, { parent: true }).node;
              a = Q(a);
              var c = U(b, a), d = Ib(b, a, true);
              if (d)
                throw new R.g(d);
              if (!b.h.rmdir)
                throw new R.g(63);
              if (c.A)
                throw new R.g(10);
              b.h.rmdir(b, a);
              Fb(c);
            },
            readdir(a) {
              a = V(a, { B: true }).node;
              if (!a.h.readdir)
                throw new R.g(54);
              return a.h.readdir(a);
            },
            unlink(a) {
              var b = V(a, { parent: true }).node;
              if (!b)
                throw new R.g(44);
              a = Q(a);
              var c = U(b, a), d = Ib(b, a, false);
              if (d)
                throw new R.g(d);
              if (!b.h.unlink)
                throw new R.g(63);
              if (c.A)
                throw new R.g(10);
              b.h.unlink(b, a);
              Fb(c);
            },
            readlink(a) {
              a = V(a).node;
              if (!a)
                throw new R.g(44);
              if (!a.h.readlink)
                throw new R.g(28);
              return db(Db(a.parent), a.h.readlink(a));
            },
            stat(a, b) {
              a = V(a, { B: !b }).node;
              if (!a)
                throw new R.g(44);
              if (!a.h.C)
                throw new R.g(63);
              return a.h.C(a);
            },
            lstat(a) {
              return R.stat(a, true);
            },
            chmod(a, b, c) {
              a = "string" == typeof a ? V(a, { B: !c }).node : a;
              if (!a.h.v)
                throw new R.g(63);
              a.h.v(a, { mode: b & 4095 | a.mode & -4096, timestamp: Date.now() });
            },
            lchmod(a, b) {
              R.chmod(a, b, true);
            },
            fchmod(a, b) {
              a = W(a);
              R.chmod(a.node, b);
            },
            chown(a, b, c, d) {
              a = "string" == typeof a ? V(a, { B: !d }).node : a;
              if (!a.h.v)
                throw new R.g(63);
              a.h.v(
                a,
                { timestamp: Date.now() }
              );
            },
            lchown(a, b, c) {
              R.chown(a, b, c, true);
            },
            fchown(a, b, c) {
              a = W(a);
              R.chown(a.node, b, c);
            },
            truncate(a, b) {
              if (0 > b)
                throw new R.g(28);
              a = "string" == typeof a ? V(a, { B: true }).node : a;
              if (!a.h.v)
                throw new R.g(63);
              if (T(a.mode))
                throw new R.g(31);
              if (!R.isFile(a.mode))
                throw new R.g(28);
              var c = Bb(a, "w");
              if (c)
                throw new R.g(c);
              a.h.v(a, { size: b, timestamp: Date.now() });
            },
            kb(a, b) {
              a = W(a);
              if (0 === (a.flags & 2097155))
                throw new R.g(28);
              R.truncate(a.node, b);
            },
            yb(a, b, c) {
              a = V(a, { B: true }).node;
              a.h.v(a, { timestamp: Math.max(b, c) });
            },
            open(a, b, c) {
              if ("" === a)
                throw new R.g(44);
              if ("string" == typeof b) {
                var d = { r: 0, "r+": 2, w: 577, "w+": 578, a: 1089, "a+": 1090 }[b];
                if ("undefined" == typeof d)
                  throw Error(`Unknown file open mode: ${b}`);
                b = d;
              }
              c = b & 64 ? ("undefined" == typeof c ? 438 : c) & 4095 | 32768 : 0;
              if ("object" == typeof a)
                var f = a;
              else {
                a = P(a);
                try {
                  f = V(a, { B: !(b & 131072) }).node;
                } catch (h) {
                }
              }
              d = false;
              if (b & 64)
                if (f) {
                  if (b & 128)
                    throw new R.g(20);
                } else
                  f = R.J(a, c, 0), d = true;
              if (!f)
                throw new R.g(44);
              8192 === (f.mode & 61440) && (b &= -513);
              if (b & 65536 && !T(f.mode))
                throw new R.g(54);
              if (!d && (c = f ? 40960 === (f.mode & 61440) ? 32 : T(f.mode) && ("r" !== Gb(b) || b & 512) ? 31 : Bb(f, Gb(b)) : 44))
                throw new R.g(c);
              b & 512 && !d && R.truncate(f, 0);
              b &= -131713;
              f = Kb({ node: f, path: Db(f), flags: b, seekable: true, position: 0, l: f.l, Xa: [], error: false });
              f.l.open && f.l.open(f);
              !e.logReadFiles || b & 1 || (R.ja || (R.ja = {}), a in R.ja || (R.ja[a] = 1));
              return f;
            },
            close(a) {
              if (null === a.fd)
                throw new R.g(8);
              a.ea && (a.ea = null);
              try {
                a.l.close && a.l.close(a);
              } catch (b) {
                throw b;
              } finally {
                R.streams[a.fd] = null;
              }
              a.fd = null;
            },
            D(a, b, c) {
              if (null === a.fd)
                throw new R.g(8);
              if (!a.seekable || !a.l.D)
                throw new R.g(70);
              if (0 != c && 1 != c && 2 != c)
                throw new R.g(28);
              a.position = a.l.D(a, b, c);
              a.Xa = [];
              return a.position;
            },
            read(a, b, c, d, f) {
              u(0 <= c);
              if (0 > d || 0 > f)
                throw new R.g(28);
              if (null === a.fd)
                throw new R.g(8);
              if (1 === (a.flags & 2097155))
                throw new R.g(8);
              if (T(a.node.mode))
                throw new R.g(31);
              if (!a.l.read)
                throw new R.g(28);
              var h = "undefined" != typeof f;
              if (!h)
                f = a.position;
              else if (!a.seekable)
                throw new R.g(70);
              b = a.l.read(a, b, c, d, f);
              h || (a.position += b);
              return b;
            },
            write(a, b, c, d, f, h) {
              u(0 <= c);
              if (0 > d || 0 > f)
                throw new R.g(28);
              if (null === a.fd)
                throw new R.g(8);
              if (0 === (a.flags & 2097155))
                throw new R.g(8);
              if (T(a.node.mode))
                throw new R.g(31);
              if (!a.l.write)
                throw new R.g(28);
              a.seekable && a.flags & 1024 && R.D(a, 0, 2);
              var m = "undefined" != typeof f;
              if (!m)
                f = a.position;
              else if (!a.seekable)
                throw new R.g(70);
              b = a.l.write(a, b, c, d, f, h);
              m || (a.position += b);
              return b;
            },
            T(a, b, c) {
              if (null === a.fd)
                throw new R.g(8);
              if (0 > b || 0 >= c)
                throw new R.g(28);
              if (0 === (a.flags & 2097155))
                throw new R.g(8);
              if (!R.isFile(a.node.mode) && !T(a.node.mode))
                throw new R.g(43);
              if (!a.l.T)
                throw new R.g(138);
              a.l.T(a, b, c);
            },
            S(a, b, c, d, f) {
              if (0 !== (d & 2) && 0 === (f & 2) && 2 !== (a.flags & 2097155))
                throw new R.g(2);
              if (1 === (a.flags & 2097155))
                throw new R.g(2);
              if (!a.l.S)
                throw new R.g(43);
              return a.l.S(a, b, c, d, f);
            },
            V(a, b, c, d, f) {
              u(0 <= c);
              return a.l.V ? a.l.V(a, b, c, d, f) : 0;
            },
            qb: () => 0,
            fa(a, b, c) {
              if (!a.l.fa)
                throw new R.g(59);
              return a.l.fa(a, b, c);
            },
            readFile(a, b = {}) {
              b.flags = b.flags || 0;
              b.encoding = b.encoding || "binary";
              if ("utf8" !== b.encoding && "binary" !== b.encoding)
                throw Error(`Invalid encoding type "${b.encoding}"`);
              var c, d = R.open(a, b.flags);
              a = R.stat(a).size;
              var f = new Uint8Array(a);
              R.read(d, f, 0, a, 0);
              "utf8" === b.encoding ? c = hb(f, 0) : "binary" === b.encoding && (c = f);
              R.close(d);
              return c;
            },
            writeFile(a, b, c = {}) {
              c.flags = c.flags || 577;
              a = R.open(a, c.flags, c.mode);
              if ("string" == typeof b) {
                var d = new Uint8Array(jb(b) + 1);
                b = kb(b, d, 0, d.length);
                R.write(a, d, 0, b, void 0, c.Ca);
              } else if (ArrayBuffer.isView(b))
                R.write(a, b, 0, b.byteLength, void 0, c.Ca);
              else
                throw Error("Unsupported data type");
              R.close(a);
            },
            cwd: () => R.oa,
            chdir(a) {
              a = V(a, { B: true });
              if (null === a.node)
                throw new R.g(44);
              if (!T(a.node.mode))
                throw new R.g(54);
              var b = Bb(a.node, "x");
              if (b)
                throw new R.g(b);
              R.oa = a.path;
            },
            R(a, b, c) {
              u(!R.R.Y, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
              R.R.Y = true;
              Nb();
              e.stdin = a || e.stdin;
              e.stdout = b || e.stdout;
              e.stderr = c || e.stderr;
              e.stdin ? R.L("/dev", "stdin", e.stdin) : R.symlink("/dev/tty", "/dev/stdin");
              e.stdout ? R.L("/dev", "stdout", null, e.stdout) : R.symlink("/dev/tty", "/dev/stdout");
              e.stderr ? R.L(
                "/dev",
                "stderr",
                null,
                e.stderr
              ) : R.symlink("/dev/tty1", "/dev/stderr");
              a = R.open("/dev/stdin", 0);
              b = R.open("/dev/stdout", 1);
              c = R.open("/dev/stderr", 1);
              u(0 === a.fd, `invalid handle for stdin (${a.fd})`);
              u(1 === b.fd, `invalid handle for stdout (${b.fd})`);
              u(2 === c.fd, `invalid handle for stderr (${c.fd})`);
            },
            sb() {
              R.R.Y = false;
              Rb(0);
              for (var a = 0; a < R.streams.length; a++) {
                var b = R.streams[a];
                b && R.close(b);
              }
            },
            jb(a, b) {
              a = Ob(a, b);
              return a.exists ? a.object : null;
            },
            hb(a, b) {
              a = "string" == typeof a ? a : Db(a);
              for (b = b.split("/").reverse(); b.length; ) {
                var c = b.pop();
                if (c) {
                  var d = P(a + "/" + c);
                  try {
                    R.mkdir(d);
                  } catch (f) {
                  }
                  a = d;
                }
              }
              return d;
            },
            L(a, b, c, d) {
              a = ab("string" == typeof a ? a : Db(a), b);
              b = xb(!!c, !!d);
              R.L.ha || (R.L.ha = 64);
              var f = R.M(R.L.ha++, 0);
              ob(f, { open(h) {
                h.seekable = false;
              }, close() {
                d && d.buffer && d.buffer.length && d(10);
              }, read(h, m, p, y) {
                for (var q = 0, x = 0; x < y; x++) {
                  try {
                    var t = c();
                  } catch (B) {
                    throw new R.g(29);
                  }
                  if (void 0 === t && 0 === q)
                    throw new R.g(6);
                  if (null === t || void 0 === t)
                    break;
                  q++;
                  m[p + x] = t;
                }
                q && (h.node.timestamp = Date.now());
                return q;
              }, write(h, m, p, y) {
                for (var q = 0; q < y; q++)
                  try {
                    d(m[p + q]);
                  } catch (x) {
                    throw new R.g(29);
                  }
                y && (h.node.timestamp = Date.now());
                return q;
              } });
              return Mb(a, b, f);
            },
            fb(a, b, c, d, f) {
              function h() {
                this.ga = false;
                this.I = [];
              }
              function m(t, B, l, w, v) {
                t = t.node.m;
                if (v >= t.length)
                  return 0;
                w = Math.min(t.length - v, w);
                u(0 <= w);
                if (t.slice)
                  for (var A = 0; A < w; A++)
                    B[l + A] = t[v + A];
                else
                  for (A = 0; A < w; A++)
                    B[l + A] = t.get(v + A);
                return w;
              }
              h.prototype.get = function(t) {
                if (!(t > this.length - 1 || 0 > t)) {
                  var B = t % this.chunkSize;
                  return this.sa(t / this.chunkSize | 0)[B];
                }
              };
              h.prototype.Ha = function(t) {
                this.sa = t;
              };
              h.prototype.ma = function() {
                var t = new XMLHttpRequest();
                t.open("HEAD", c, false);
                t.send(null);
                if (!(200 <= t.status && 300 > t.status || 304 === t.status))
                  throw Error("Couldn't load " + c + ". Status: " + t.status);
                var B = Number(t.getResponseHeader("Content-length")), l, w = (l = t.getResponseHeader("Accept-Ranges")) && "bytes" === l;
                t = (l = t.getResponseHeader("Content-Encoding")) && "gzip" === l;
                var v = 1048576;
                w || (v = B);
                var A = this;
                A.Ha((H) => {
                  var N = H * v, O = (H + 1) * v - 1;
                  O = Math.min(O, B - 1);
                  if ("undefined" == typeof A.I[H]) {
                    var fb = A.I;
                    if (N > O)
                      throw Error("invalid range (" + N + ", " + O + ") or no bytes requested!");
                    if (O > B - 1)
                      throw Error("only " + B + " bytes available! programmer error!");
                    var K = new XMLHttpRequest();
                    K.open("GET", c, false);
                    B !== v && K.setRequestHeader("Range", "bytes=" + N + "-" + O);
                    K.responseType = "arraybuffer";
                    K.overrideMimeType && K.overrideMimeType("text/plain; charset=x-user-defined");
                    K.send(null);
                    if (!(200 <= K.status && 300 > K.status || 304 === K.status))
                      throw Error("Couldn't load " + c + ". Status: " + K.status);
                    N = void 0 !== K.response ? new Uint8Array(K.response || []) : lb(K.responseText || "", true);
                    fb[H] = N;
                  }
                  if ("undefined" == typeof A.I[H])
                    throw Error("doXHR failed!");
                  return A.I[H];
                });
                if (t || !B)
                  v = B = 1, v = B = this.sa(0).length, qa("LazyFiles on gzip forces download of the whole file when length is accessed");
                this.za = B;
                this.ya = v;
                this.ga = true;
              };
              if ("undefined" != typeof XMLHttpRequest) {
                if (!k)
                  throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
                var p = new h();
                Object.defineProperties(p, { length: { get: function() {
                  this.ga || this.ma();
                  return this.za;
                } }, chunkSize: { get: function() {
                  this.ga || this.ma();
                  return this.ya;
                } } });
                var y = void 0;
              } else
                y = c, p = void 0;
              var q = Pb(a, b, d, f);
              p ? q.m = p : y && (q.m = null, q.url = y);
              Object.defineProperties(q, { o: { get: function() {
                return this.m.length;
              } } });
              var x = {};
              Object.keys(q.l).forEach((t) => {
                var B = q.l[t];
                x[t] = function() {
                  Qb(q);
                  return B.apply(null, arguments);
                };
              });
              x.read = (t, B, l, w, v) => {
                Qb(q);
                return m(t, B, l, w, v);
              };
              x.S = (t, B, l) => {
                Qb(q);
                var w = sb();
                if (!w)
                  throw new R.g(48);
                m(t, E, w, B, l);
                return { Ra: w, Aa: true };
              };
              q.l = x;
              return q;
            },
            Ya() {
              g("FS.absolutePath has been removed; use PATH_FS.resolve instead");
            },
            eb() {
              g("FS.createFolder has been removed; use FS.mkdir instead");
            },
            gb() {
              g("FS.createLink has been removed; use FS.symlink instead");
            },
            mb() {
              g("FS.joinPath has been removed; use PATH.join instead");
            },
            pb() {
              g("FS.mmapAlloc has been replaced by the top level function mmapAlloc");
            },
            vb() {
              g("FS.standardizePath has been removed; use PATH.normalize instead");
            }
          }, X = (a) => {
            u("number" == typeof a, `UTF8ToString expects a number (got ${typeof a})`);
            return a ? hb(ta, a) : "";
          };
          function Sb(a, b) {
            if ("/" === b.charAt(0))
              return b;
            a = -100 === a ? R.cwd() : W(a).path;
            if (0 == b.length)
              throw new R.g(44);
            return P(a + "/" + b);
          }
          var Tb = void 0;
          function Y() {
            u(void 0 != Tb);
            var a = F[+Tb >> 2];
            Tb += 4;
            return a;
          }
          var Ub = (a, b, c) => {
            u("number" == typeof c, "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
            return kb(a, ta, b, c);
          }, Vb = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), Wb = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], Xb = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], Zb = (a) => {
            var b = jb(a) + 1, c = Yb(b);
            c && Ub(a, c, b);
            return c;
          }, $b = {}, bc = () => {
            if (!ac) {
              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: da || "./this.program" }, b;
              for (b in $b)
                void 0 === $b[b] ? delete a[b] : a[b] = $b[b];
              var c = [];
              for (b in a)
                c.push(`${b}=${a[b]}`);
              ac = c;
            }
            return ac;
          }, ac, cc = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], dc = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], ec = (a, b) => {
            u(0 <= a.length, "writeArrayToMemory array must have a length (should be an array or typed array)");
            E.set(a, b);
          }, fc = [], Z, gc = (a) => {
            var b = fc[a];
            b || (a >= fc.length && (fc.length = a + 1), fc[a] = b = Z.get(a));
            u(Z.get(a) == b, "JavaScript-side Wasm function table mirror is out of date!");
            return b;
          }, hc = (a) => {
            var b = e["_" + a];
            u(b, "Cannot call unknown function " + a + ", make sure it is exported");
            return b;
          }, ic, jc = [];
          function kc(a, b, c, d) {
            a || (a = this);
            this.parent = a;
            this.s = a.s;
            this.A = null;
            this.id = R.Na++;
            this.name = b;
            this.mode = c;
            this.h = {};
            this.l = {};
            this.rdev = d;
          }
          Object.defineProperties(kc.prototype, { read: { get: function() {
            return 365 === (this.mode & 365);
          }, set: function(a) {
            a ? this.mode |= 365 : this.mode &= -366;
          } }, write: { get: function() {
            return 146 === (this.mode & 146);
          }, set: function(a) {
            a ? this.mode |= 146 : this.mode &= -147;
          } }, Ma: { get: function() {
            return T(this.mode);
          } }, La: { get: function() {
            return 8192 === (this.mode & 61440);
          } } });
          R.wa = kc;
          R.ib = (a, b, c, d, f, h, m, p, y, q) => {
            function x(l) {
              function w(v) {
                q && q();
                if (!p) {
                  var A = a, H = b;
                  A && (A = "string" == typeof A ? A : Db(A), H = b ? P(A + "/" + b) : A);
                  A = xb(d, f);
                  H = R.create(H, A);
                  if (v) {
                    if ("string" == typeof v) {
                      for (var N = Array(v.length), O = 0, fb = v.length; O < fb; ++O)
                        N[O] = v.charCodeAt(O);
                      v = N;
                    }
                    R.chmod(H, A | 146);
                    N = R.open(H, 577);
                    R.write(N, v, 0, v.length, 0, y);
                    R.close(N);
                    R.chmod(H, A);
                  }
                }
                h && h();
                Na(B);
              }
              wb(l, t, w, () => {
                m && m();
                Na(B);
              }) || w(l);
            }
            var t = b ? db(P(a + "/" + b)) : a, B = La(`cp ${t}`);
            Ma(B);
            "string" == typeof c ? ub(c, (l) => x(l), m) : x(c);
          };
          Nb();
          R.F = Array(4096);
          R.s(S, {}, "/");
          R.mkdir("/tmp");
          R.mkdir("/home");
          R.mkdir("/home/web_user");
          (function() {
            R.mkdir("/dev");
            ob(R.M(1, 3), { read: () => 0, write: (d, f, h, m) => m });
            Mb("/dev/null", R.M(1, 3));
            nb(R.M(5, 0), qb);
            nb(R.M(6, 0), rb);
            Mb("/dev/tty", R.M(5, 0));
            Mb("/dev/tty1", R.M(6, 0));
            var a = new Uint8Array(1024), b = 0, c = () => {
              0 === b && (b = cb(a).byteLength);
              return a[--b];
            };
            R.L("/dev", "random", c);
            R.L("/dev", "urandom", c);
            R.mkdir("/dev/shm");
            R.mkdir("/dev/shm/tmp");
          })();
          (function() {
            R.mkdir("/proc");
            var a = R.mkdir("/proc/self");
            R.mkdir("/proc/self/fd");
            R.s({ s() {
              var b = R.createNode(a, "fd", 16895, 73);
              b.h = { lookup(c, d) {
                var f = W(+d);
                c = { parent: null, s: { ua: "fake" }, h: { readlink: () => f.path } };
                return c.parent = c;
              } };
              return b;
            } }, {}, "/proc/self/fd");
          })();
          R.Fa = { MEMFS: S };
          var oc = {
            __syscall_dup3: function(a, b, c) {
              try {
                var d = W(a);
                u(!c);
                if (d.fd === b)
                  return -28;
                var f = R.qa(b);
                f && R.close(f);
                return Kb(d, b).fd;
              } catch (h) {
                if ("undefined" == typeof R || "ErrnoError" !== h.name)
                  throw h;
                return -h.u;
              }
            },
            __syscall_fcntl64: function(a, b, c) {
              Tb = c;
              try {
                var d = W(a);
                switch (b) {
                  case 0:
                    var f = Y();
                    if (0 > f)
                      return -28;
                    for (; R.streams[f]; )
                      f++;
                    return Kb(d, f).fd;
                  case 1:
                  case 2:
                    return 0;
                  case 3:
                    return d.flags;
                  case 4:
                    return f = Y(), d.flags |= f, 0;
                  case 5:
                    return f = Y(), ua[f + 0 >> 1] = 2, 0;
                  case 6:
                  case 7:
                    return 0;
                  case 16:
                  case 8:
                    return -28;
                  case 9:
                    return F[lc() >> 2] = 28, -1;
                  default:
                    return -28;
                }
              } catch (h) {
                if ("undefined" == typeof R || "ErrnoError" !== h.name)
                  throw h;
                return -h.u;
              }
            },
            __syscall_ioctl: function(a, b, c) {
              Tb = c;
              try {
                var d = W(a);
                switch (b) {
                  case 21509:
                    return d.tty ? 0 : -59;
                  case 21505:
                    if (!d.tty)
                      return -59;
                    if (d.tty.K.Ia) {
                      a = [3, 28, 127, 21, 4, 0, 1, 0, 17, 19, 26, 0, 18, 15, 23, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                      var f = Y();
                      F[f >> 2] = 25856;
                      F[f + 4 >> 2] = 5;
                      F[f + 8 >> 2] = 191;
                      F[f + 12 >> 2] = 35387;
                      for (var h = 0; 32 > h; h++)
                        E[f + h + 17 >> 0] = a[h] || 0;
                    }
                    return 0;
                  case 21510:
                  case 21511:
                  case 21512:
                    return d.tty ? 0 : -59;
                  case 21506:
                  case 21507:
                  case 21508:
                    if (!d.tty)
                      return -59;
                    if (d.tty.K.Ja)
                      for (f = Y(), a = [], h = 0; 32 > h; h++)
                        a.push(E[f + h + 17 >> 0]);
                    return 0;
                  case 21519:
                    if (!d.tty)
                      return -59;
                    f = Y();
                    return F[f >> 2] = 0;
                  case 21520:
                    return d.tty ? -28 : -59;
                  case 21531:
                    return f = Y(), R.fa(d, b, f);
                  case 21523:
                    if (!d.tty)
                      return -59;
                    d.tty.K.Ka && (h = [24, 80], f = Y(), ua[f >> 1] = h[0], ua[f + 2 >> 1] = h[1]);
                    return 0;
                  case 21524:
                    return d.tty ? 0 : -59;
                  case 21515:
                    return d.tty ? 0 : -59;
                  default:
                    return -28;
                }
              } catch (m) {
                if ("undefined" == typeof R || "ErrnoError" !== m.name)
                  throw m;
                return -m.u;
              }
            },
            __syscall_openat: function(a, b, c, d) {
              Tb = d;
              try {
                b = X(b);
                b = Sb(a, b);
                var f = d ? Y() : 0;
                return R.open(b, c, f).fd;
              } catch (h) {
                if ("undefined" == typeof R || "ErrnoError" !== h.name)
                  throw h;
                return -h.u;
              }
            },
            __syscall_readlinkat: function(a, b, c, d) {
              try {
                b = X(b);
                b = Sb(a, b);
                if (0 >= d)
                  return -28;
                var f = R.readlink(b), h = Math.min(d, jb(f)), m = E[c + h];
                Ub(f, c, d + 1);
                E[c + h] = m;
                return h;
              } catch (p) {
                if ("undefined" == typeof R || "ErrnoError" !== p.name)
                  throw p;
                return -p.u;
              }
            },
            __syscall_renameat: function(a, b, c, d) {
              try {
                return b = X(b), d = X(d), b = Sb(a, b), d = Sb(c, d), R.rename(
                  b,
                  d
                ), 0;
              } catch (f) {
                if ("undefined" == typeof R || "ErrnoError" !== f.name)
                  throw f;
                return -f.u;
              }
            },
            __syscall_rmdir: function(a) {
              try {
                return a = X(a), R.rmdir(a), 0;
              } catch (b) {
                if ("undefined" == typeof R || "ErrnoError" !== b.name)
                  throw b;
                return -b.u;
              }
            },
            __syscall_unlinkat: function(a, b, c) {
              try {
                return b = X(b), b = Sb(a, b), 0 === c ? R.unlink(b) : 512 === c ? R.rmdir(b) : g("Invalid flags passed to unlinkat"), 0;
              } catch (d) {
                if ("undefined" == typeof R || "ErrnoError" !== d.name)
                  throw d;
                return -d.u;
              }
            },
            _emscripten_get_now_is_monotonic: () => 1,
            _emscripten_throw_longjmp: () => {
              throw Infinity;
            },
            _gmtime_js: function(a, b) {
              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
              a = new Date(1e3 * a);
              F[b >> 2] = a.getUTCSeconds();
              F[b + 4 >> 2] = a.getUTCMinutes();
              F[b + 8 >> 2] = a.getUTCHours();
              F[b + 12 >> 2] = a.getUTCDate();
              F[b + 16 >> 2] = a.getUTCMonth();
              F[b + 20 >> 2] = a.getUTCFullYear() - 1900;
              F[b + 24 >> 2] = a.getUTCDay();
              F[b + 28 >> 2] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
            },
            _localtime_js: function(a, b) {
              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
              a = new Date(1e3 * a);
              F[b >> 2] = a.getSeconds();
              F[b + 4 >> 2] = a.getMinutes();
              F[b + 8 >> 2] = a.getHours();
              F[b + 12 >> 2] = a.getDate();
              F[b + 16 >> 2] = a.getMonth();
              F[b + 20 >> 2] = a.getFullYear() - 1900;
              F[b + 24 >> 2] = a.getDay();
              F[b + 28 >> 2] = (Vb(a.getFullYear()) ? Wb : Xb)[a.getMonth()] + a.getDate() - 1 | 0;
              F[b + 36 >> 2] = -(60 * a.getTimezoneOffset());
              var c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset(), d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
              F[b + 32 >> 2] = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;
            },
            _mktime_js: function(a) {
              var b = new Date(F[a + 20 >> 2] + 1900, F[a + 16 >> 2], F[a + 12 >> 2], F[a + 8 >> 2], F[a + 4 >> 2], F[a >> 2], 0), c = F[a + 32 >> 2], d = b.getTimezoneOffset(), f = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), m = Math.min(h, f);
              0 > c ? F[a + 32 >> 2] = Number(f != h && m == d) : 0 < c != (m == d) && (f = Math.max(h, f), b.setTime(b.getTime() + 6e4 * ((0 < c ? m : f) - d)));
              F[a + 24 >> 2] = b.getDay();
              F[a + 28 >> 2] = (Vb(b.getFullYear()) ? Wb : Xb)[b.getMonth()] + b.getDate() - 1 | 0;
              F[a >> 2] = b.getSeconds();
              F[a + 4 >> 2] = b.getMinutes();
              F[a + 8 >> 2] = b.getHours();
              F[a + 12 >> 2] = b.getDate();
              F[a + 16 >> 2] = b.getMonth();
              F[a + 20 >> 2] = b.getYear();
              a = b.getTime();
              isNaN(a) ? (F[lc() >> 2] = 61, a = -1) : a /= 1e3;
              return BigInt(a);
            },
            _tzset_js: (a, b, c) => {
              function d(y) {
                return (y = y.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? y[1] : "GMT";
              }
              var f = new Date().getFullYear(), h = new Date(f, 0, 1), m = new Date(f, 6, 1);
              f = h.getTimezoneOffset();
              var p = m.getTimezoneOffset();
              G[a >> 2] = 60 * Math.max(f, p);
              F[b >> 2] = Number(f != p);
              a = d(h);
              b = d(m);
              a = Zb(a);
              b = Zb(b);
              p < f ? (G[c >> 2] = a, G[c + 4 >> 2] = b) : (G[c >> 2] = b, G[c + 4 >> 2] = a);
            },
            abort: () => {
              g("native code called abort()");
            },
            emscripten_date_now: () => Date.now(),
            emscripten_get_now: () => performance.now(),
            emscripten_resize_heap: (a) => {
              var b = ta.length;
              a >>>= 0;
              u(a > b);
              if (2147483648 < a)
                return z(`Cannot enlarge memory, requested ${a} bytes, but the limit is ${2147483648} bytes!`), false;
              for (var c = 1; 4 >= c; c *= 2) {
                var d = b * (1 + 0.2 / c);
                d = Math.min(d, a + 100663296);
                var f = Math;
                d = Math.max(a, d);
                f = f.min.call(f, 2147483648, d + (65536 - d % 65536) % 65536);
                a: {
                  d = f;
                  var h = ra.buffer, m = (d - h.byteLength + 65535) / 65536;
                  try {
                    ra.grow(m);
                    ya();
                    var p = 1;
                    break a;
                  } catch (y) {
                    z(`growMemory: Attempted to grow heap from ${h.byteLength} bytes to ${d} bytes, but got error: ${y}`);
                  }
                  p = void 0;
                }
                if (p)
                  return true;
              }
              z(`Failed to grow the heap from ${b} bytes to ${f} bytes, not enough memory!`);
              return false;
            },
            environ_get: (a, b) => {
              var c = 0;
              bc().forEach((d, f) => {
                var h = b + c;
                f = G[a + 4 * f >> 2] = h;
                for (h = 0; h < d.length; ++h)
                  u(d.charCodeAt(h) === (d.charCodeAt(h) & 255)), E[f++ >> 0] = d.charCodeAt(h);
                E[f >> 0] = 0;
                c += d.length + 1;
              });
              return 0;
            },
            environ_sizes_get: (a, b) => {
              var c = bc();
              G[a >> 2] = c.length;
              var d = 0;
              c.forEach((f) => d += f.length + 1);
              G[b >> 2] = d;
              return 0;
            },
            exit: (a) => {
              mc();
              sa = true;
              ea(a, new pa(a));
            },
            fd_close: function(a) {
              try {
                var b = W(a);
                R.close(b);
                return 0;
              } catch (c) {
                if ("undefined" == typeof R || "ErrnoError" !== c.name)
                  throw c;
                return c.u;
              }
            },
            fd_read: function(a, b, c, d) {
              try {
                a: {
                  var f = W(a);
                  a = b;
                  for (var h, m = b = 0; m < c; m++) {
                    var p = G[a >> 2], y = G[a + 4 >> 2];
                    a += 8;
                    var q = R.read(f, E, p, y, h);
                    if (0 > q) {
                      var x = -1;
                      break a;
                    }
                    b += q;
                    if (q < y)
                      break;
                    "undefined" !== typeof h && (h += q);
                  }
                  x = b;
                }
                G[d >> 2] = x;
                return 0;
              } catch (t) {
                if ("undefined" == typeof R || "ErrnoError" !== t.name)
                  throw t;
                return t.u;
              }
            },
            fd_seek: function(a, b, c, d) {
              b = -9007199254740992 > b || 9007199254740992 < b ? NaN : Number(b);
              try {
                if (isNaN(b))
                  return 61;
                var f = W(a);
                R.D(f, b, c);
                wa[d >> 3] = BigInt(f.position);
                f.ea && 0 === b && 0 === c && (f.ea = null);
                return 0;
              } catch (h) {
                if ("undefined" == typeof R || "ErrnoError" !== h.name)
                  throw h;
                return h.u;
              }
            },
            fd_write: function(a, b, c, d) {
              try {
                a: {
                  var f = W(a);
                  a = b;
                  for (var h, m = b = 0; m < c; m++) {
                    var p = G[a >> 2], y = G[a + 4 >> 2];
                    a += 8;
                    var q = R.write(f, E, p, y, h);
                    if (0 > q) {
                      var x = -1;
                      break a;
                    }
                    b += q;
                    "undefined" !== typeof h && (h += q);
                  }
                  x = b;
                }
                G[d >> 2] = x;
                return 0;
              } catch (t) {
                if ("undefined" == typeof R || "ErrnoError" !== t.name)
                  throw t;
                return t.u;
              }
            },
            invoke_vii: nc,
            strftime: (a, b, c, d) => {
              function f(l, w, v) {
                for (l = "number" == typeof l ? l.toString() : l || ""; l.length < w; )
                  l = v[0] + l;
                return l;
              }
              function h(l, w) {
                return f(l, w, "0");
              }
              function m(l, w) {
                function v(H) {
                  return 0 > H ? -1 : 0 < H ? 1 : 0;
                }
                var A;
                0 === (A = v(l.getFullYear() - w.getFullYear())) && 0 === (A = v(l.getMonth() - w.getMonth())) && (A = v(l.getDate() - w.getDate()));
                return A;
              }
              function p(l) {
                switch (l.getDay()) {
                  case 0:
                    return new Date(l.getFullYear() - 1, 11, 29);
                  case 1:
                    return l;
                  case 2:
                    return new Date(l.getFullYear(), 0, 3);
                  case 3:
                    return new Date(l.getFullYear(), 0, 2);
                  case 4:
                    return new Date(
                      l.getFullYear(),
                      0,
                      1
                    );
                  case 5:
                    return new Date(l.getFullYear() - 1, 11, 31);
                  case 6:
                    return new Date(l.getFullYear() - 1, 11, 30);
                }
              }
              function y(l) {
                var w = l.O;
                for (l = new Date(new Date(l.P + 1900, 0, 1).getTime()); 0 < w; ) {
                  var v = l.getMonth(), A = (Vb(l.getFullYear()) ? cc : dc)[v];
                  if (w > A - l.getDate())
                    w -= A - l.getDate() + 1, l.setDate(1), 11 > v ? l.setMonth(v + 1) : (l.setMonth(0), l.setFullYear(l.getFullYear() + 1));
                  else {
                    l.setDate(l.getDate() + w);
                    break;
                  }
                }
                v = new Date(l.getFullYear() + 1, 0, 4);
                w = p(new Date(l.getFullYear(), 0, 4));
                v = p(v);
                return 0 >= m(w, l) ? 0 >= m(v, l) ? l.getFullYear() + 1 : l.getFullYear() : l.getFullYear() - 1;
              }
              var q = G[d + 40 >> 2];
              d = { Va: F[d >> 2], Ua: F[d + 4 >> 2], $: F[d + 8 >> 2], la: F[d + 12 >> 2], aa: F[d + 16 >> 2], P: F[d + 20 >> 2], H: F[d + 24 >> 2], O: F[d + 28 >> 2], wb: F[d + 32 >> 2], Ta: F[d + 36 >> 2], Wa: q ? X(q) : "" };
              c = X(c);
              q = {
                "%c": "%a %b %d %H:%M:%S %Y",
                "%D": "%m/%d/%y",
                "%F": "%Y-%m-%d",
                "%h": "%b",
                "%r": "%I:%M:%S %p",
                "%R": "%H:%M",
                "%T": "%H:%M:%S",
                "%x": "%m/%d/%y",
                "%X": "%H:%M:%S",
                "%Ec": "%c",
                "%EC": "%C",
                "%Ex": "%m/%d/%y",
                "%EX": "%H:%M:%S",
                "%Ey": "%y",
                "%EY": "%Y",
                "%Od": "%d",
                "%Oe": "%e",
                "%OH": "%H",
                "%OI": "%I",
                "%Om": "%m",
                "%OM": "%M",
                "%OS": "%S",
                "%Ou": "%u",
                "%OU": "%U",
                "%OV": "%V",
                "%Ow": "%w",
                "%OW": "%W",
                "%Oy": "%y"
              };
              for (var x in q)
                c = c.replace(new RegExp(x, "g"), q[x]);
              var t = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), B = "January February March April May June July August September October November December".split(" ");
              q = {
                "%a": (l) => t[l.H].substring(0, 3),
                "%A": (l) => t[l.H],
                "%b": (l) => B[l.aa].substring(0, 3),
                "%B": (l) => B[l.aa],
                "%C": (l) => h((l.P + 1900) / 100 | 0, 2),
                "%d": (l) => h(l.la, 2),
                "%e": (l) => f(l.la, 2, " "),
                "%g": (l) => y(l).toString().substring(2),
                "%G": (l) => y(l),
                "%H": (l) => h(l.$, 2),
                "%I": (l) => {
                  l = l.$;
                  0 == l ? l = 12 : 12 < l && (l -= 12);
                  return h(l, 2);
                },
                "%j": (l) => {
                  for (var w = 0, v = 0; v <= l.aa - 1; w += (Vb(l.P + 1900) ? cc : dc)[v++])
                    ;
                  return h(l.la + w, 3);
                },
                "%m": (l) => h(l.aa + 1, 2),
                "%M": (l) => h(l.Ua, 2),
                "%n": () => "\n",
                "%p": (l) => 0 <= l.$ && 12 > l.$ ? "AM" : "PM",
                "%S": (l) => h(l.Va, 2),
                "%t": () => "	",
                "%u": (l) => l.H || 7,
                "%U": (l) => h(Math.floor((l.O + 7 - l.H) / 7), 2),
                "%V": (l) => {
                  var w = Math.floor((l.O + 7 - (l.H + 6) % 7) / 7);
                  2 >= (l.H + 371 - l.O - 2) % 7 && w++;
                  if (w)
                    53 == w && (v = (l.H + 371 - l.O) % 7, 4 == v || 3 == v && Vb(l.P) || (w = 1));
                  else {
                    w = 52;
                    var v = (l.H + 7 - l.O - 1) % 7;
                    (4 == v || 5 == v && Vb(l.P % 400 - 1)) && w++;
                  }
                  return h(w, 2);
                },
                "%w": (l) => l.H,
                "%W": (l) => h(Math.floor((l.O + 7 - (l.H + 6) % 7) / 7), 2),
                "%y": (l) => (l.P + 1900).toString().substring(2),
                "%Y": (l) => l.P + 1900,
                "%z": (l) => {
                  l = l.Ta;
                  var w = 0 <= l;
                  l = Math.abs(l) / 60;
                  return (w ? "+" : "-") + String("0000" + (l / 60 * 100 + l % 60)).slice(-4);
                },
                "%Z": (l) => l.Wa,
                "%%": () => "%"
              };
              c = c.replace(/%%/g, "\0\0");
              for (x in q)
                c.includes(x) && (c = c.replace(new RegExp(x, "g"), q[x](d)));
              c = c.replace(/\0\0/g, "%");
              x = lb(c, false);
              if (x.length > b)
                return 0;
              ec(x, a);
              return x.length - 1;
            },
            system: (a) => {
              if (n) {
                if (!a)
                  return 1;
                a = X(a);
                if (!a.length)
                  return 0;
                a = require$1("child_process").ub(a, [], { tb: true, stdio: "inherit" });
                var b = (c, d) => c << 8 | d;
                return null === a.status ? b(0, ((c) => {
                  switch (c) {
                    case "SIGHUP":
                      return 1;
                    case "SIGQUIT":
                      return 3;
                    case "SIGFPE":
                      return 8;
                    case "SIGKILL":
                      return 9;
                    case "SIGALRM":
                      return 14;
                    case "SIGTERM":
                      return 15;
                  }
                  return 2;
                })(a.signal)) : a.status << 8 | 0;
              }
              if (!a)
                return 0;
              F[lc() >> 2] = 52;
              return -1;
            }
          }, L = function() {
            var a = { env: oc, wasi_snapshot_preview1: oc };
            Ma("wasm-instantiate");
            var b = e;
            Ta(a, function(c) {
              u(e === b, "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");
              b = null;
              L = c.instance.exports;
              ra = L.memory;
              u(ra, "memory not found in wasm exports");
              ya();
              Z = L.__indirect_function_table;
              u(Z, "table not found in wasm exports");
              Fa.unshift(L.__wasm_call_ctors);
              Na("wasm-instantiate");
            }).catch(ba);
            return {};
          }();
          e._lua_checkstack = J("lua_checkstack");
          e._lua_xmove = J("lua_xmove");
          e._lua_atpanic = J("lua_atpanic");
          e._lua_version = J("lua_version");
          e._lua_absindex = J("lua_absindex");
          e._lua_gettop = J("lua_gettop");
          e._lua_settop = J("lua_settop");
          e._lua_closeslot = J("lua_closeslot");
          e._lua_rotate = J("lua_rotate");
          e._lua_copy = J("lua_copy");
          e._lua_pushvalue = J("lua_pushvalue");
          e._lua_type = J("lua_type");
          e._lua_typename = J("lua_typename");
          e._lua_iscfunction = J("lua_iscfunction");
          e._lua_isinteger = J("lua_isinteger");
          e._lua_isnumber = J("lua_isnumber");
          e._lua_isstring = J("lua_isstring");
          e._lua_isuserdata = J("lua_isuserdata");
          e._lua_rawequal = J("lua_rawequal");
          e._lua_arith = J("lua_arith");
          e._lua_compare = J("lua_compare");
          e._lua_stringtonumber = J("lua_stringtonumber");
          e._lua_tonumberx = J("lua_tonumberx");
          e._lua_tointegerx = J("lua_tointegerx");
          e._lua_toboolean = J("lua_toboolean");
          e._lua_tolstring = J("lua_tolstring");
          e._lua_rawlen = J("lua_rawlen");
          e._lua_tocfunction = J("lua_tocfunction");
          e._lua_touserdata = J("lua_touserdata");
          e._lua_tothread = J("lua_tothread");
          e._lua_topointer = J("lua_topointer");
          e._lua_pushnil = J("lua_pushnil");
          e._lua_pushnumber = J("lua_pushnumber");
          e._lua_pushinteger = J("lua_pushinteger");
          e._lua_pushlstring = J("lua_pushlstring");
          e._lua_pushstring = J("lua_pushstring");
          e._lua_pushcclosure = J("lua_pushcclosure");
          e._lua_pushboolean = J("lua_pushboolean");
          e._lua_pushlightuserdata = J("lua_pushlightuserdata");
          e._lua_pushthread = J("lua_pushthread");
          e._lua_getglobal = J("lua_getglobal");
          e._lua_gettable = J("lua_gettable");
          e._lua_getfield = J("lua_getfield");
          e._lua_geti = J("lua_geti");
          e._lua_rawget = J("lua_rawget");
          e._lua_rawgeti = J("lua_rawgeti");
          e._lua_rawgetp = J("lua_rawgetp");
          e._lua_createtable = J("lua_createtable");
          e._lua_getmetatable = J("lua_getmetatable");
          e._lua_getiuservalue = J("lua_getiuservalue");
          e._lua_setglobal = J("lua_setglobal");
          e._lua_settable = J("lua_settable");
          e._lua_setfield = J("lua_setfield");
          e._lua_seti = J("lua_seti");
          e._lua_rawset = J("lua_rawset");
          e._lua_rawsetp = J("lua_rawsetp");
          e._lua_rawseti = J("lua_rawseti");
          e._lua_setmetatable = J("lua_setmetatable");
          e._lua_setiuservalue = J("lua_setiuservalue");
          e._lua_callk = J("lua_callk");
          e._lua_pcallk = J("lua_pcallk");
          e._lua_load = J("lua_load");
          e._lua_dump = J("lua_dump");
          e._lua_status = J("lua_status");
          e._lua_error = J("lua_error");
          e._lua_next = J("lua_next");
          e._lua_toclose = J("lua_toclose");
          e._lua_concat = J("lua_concat");
          e._lua_len = J("lua_len");
          e._lua_getallocf = J("lua_getallocf");
          e._lua_setallocf = J("lua_setallocf");
          e._lua_setwarnf = J("lua_setwarnf");
          e._lua_warning = J("lua_warning");
          e._lua_newuserdatauv = J("lua_newuserdatauv");
          e._lua_getupvalue = J("lua_getupvalue");
          e._lua_setupvalue = J("lua_setupvalue");
          e._lua_upvalueid = J("lua_upvalueid");
          e._lua_upvaluejoin = J("lua_upvaluejoin");
          e._luaL_traceback = J("luaL_traceback");
          e._lua_getstack = J("lua_getstack");
          e._lua_getinfo = J("lua_getinfo");
          e._luaL_buffinit = J("luaL_buffinit");
          e._luaL_addstring = J("luaL_addstring");
          e._luaL_prepbuffsize = J("luaL_prepbuffsize");
          e._luaL_addvalue = J("luaL_addvalue");
          e._luaL_pushresult = J("luaL_pushresult");
          e._luaL_argerror = J("luaL_argerror");
          e._luaL_typeerror = J("luaL_typeerror");
          e._luaL_getmetafield = J("luaL_getmetafield");
          e._luaL_where = J("luaL_where");
          e._luaL_fileresult = J("luaL_fileresult");
          var lc = J("__errno_location");
          e._luaL_execresult = J("luaL_execresult");
          e._luaL_newmetatable = J("luaL_newmetatable");
          e._luaL_setmetatable = J("luaL_setmetatable");
          e._luaL_testudata = J("luaL_testudata");
          e._luaL_checkudata = J("luaL_checkudata");
          e._luaL_optlstring = J("luaL_optlstring");
          e._luaL_checklstring = J("luaL_checklstring");
          e._luaL_checkstack = J("luaL_checkstack");
          e._luaL_checktype = J("luaL_checktype");
          e._luaL_checkany = J("luaL_checkany");
          e._luaL_checknumber = J("luaL_checknumber");
          e._luaL_optnumber = J("luaL_optnumber");
          e._luaL_checkinteger = J("luaL_checkinteger");
          e._luaL_optinteger = J("luaL_optinteger");
          e._luaL_setfuncs = J("luaL_setfuncs");
          e._luaL_addlstring = J("luaL_addlstring");
          e._luaL_pushresultsize = J("luaL_pushresultsize");
          e._luaL_buffinitsize = J("luaL_buffinitsize");
          e._luaL_ref = J("luaL_ref");
          e._luaL_unref = J("luaL_unref");
          e._luaL_loadfilex = J("luaL_loadfilex");
          e._luaL_loadbufferx = J("luaL_loadbufferx");
          e._luaL_loadstring = J("luaL_loadstring");
          e._luaL_callmeta = J("luaL_callmeta");
          e._luaL_len = J("luaL_len");
          e._luaL_tolstring = J("luaL_tolstring");
          e._luaL_getsubtable = J("luaL_getsubtable");
          e._luaL_requiref = J("luaL_requiref");
          e._luaL_addgsub = J("luaL_addgsub");
          e._luaL_gsub = J("luaL_gsub");
          e._luaL_newstate = J("luaL_newstate");
          e._lua_newstate = J("lua_newstate");
          e._free = J("free");
          e._realloc = J("realloc");
          var Rb = e._fflush = J("fflush");
          e._luaL_checkversion_ = J("luaL_checkversion_");
          e._luaopen_base = J("luaopen_base");
          e._luaopen_coroutine = J("luaopen_coroutine");
          e._lua_newthread = J("lua_newthread");
          e._lua_yieldk = J("lua_yieldk");
          e._lua_isyieldable = J("lua_isyieldable");
          e._lua_resetthread = J("lua_resetthread");
          e._lua_resume = J("lua_resume");
          e._luaopen_debug = J("luaopen_debug");
          e._lua_gethookmask = J("lua_gethookmask");
          e._lua_gethook = J("lua_gethook");
          e._lua_gethookcount = J("lua_gethookcount");
          e._lua_getlocal = J("lua_getlocal");
          e._lua_sethook = J("lua_sethook");
          e._lua_setlocal = J("lua_setlocal");
          e._lua_setcstacklimit = J("lua_setcstacklimit");
          var Yb = e._malloc = J("malloc");
          e._luaL_openlibs = J("luaL_openlibs");
          e._luaopen_package = J("luaopen_package");
          e._luaopen_table = J("luaopen_table");
          e._luaopen_io = J("luaopen_io");
          e._luaopen_os = J("luaopen_os");
          e._luaopen_string = J("luaopen_string");
          e._luaopen_math = J("luaopen_math");
          e._luaopen_utf8 = J("luaopen_utf8");
          e._lua_close = J("lua_close");
          var pc = J("setThrew"), qc = () => (qc = L.emscripten_stack_init)(), Aa = () => (Aa = L.emscripten_stack_get_end)(), rc = J("stackSave"), sc = J("stackRestore"), tc = J("stackAlloc");
          function nc(a, b, c) {
            var d = rc();
            try {
              gc(a)(b, c);
            } catch (f) {
              sc(d);
              if (f !== f + 0)
                throw f;
              pc(1, 0);
            }
          }
          e.ENV = $b;
          e.ccall = (a, b, c, d) => {
            var f = { string: (q) => {
              var x = 0;
              if (null !== q && void 0 !== q && 0 !== q) {
                x = jb(q) + 1;
                var t = tc(x);
                Ub(q, t, x);
                x = t;
              }
              return x;
            }, array: (q) => {
              var x = tc(q.length);
              ec(q, x);
              return x;
            } };
            a = hc(a);
            var h = [], m = 0;
            u("array" !== b, 'Return type should not be "array".');
            if (d)
              for (var p = 0; p < d.length; p++) {
                var y = f[c[p]];
                y ? (0 === m && (m = rc()), h[p] = y(d[p])) : h[p] = d[p];
              }
            c = a.apply(null, h);
            return c = function(q) {
              0 !== m && sc(m);
              return "string" === b ? X(q) : "boolean" === b ? !!q : q;
            }(c);
          };
          e.addFunction = (a, b) => {
            u("undefined" != typeof a);
            if (!ic) {
              ic = /* @__PURE__ */ new WeakMap();
              var c = Z.length;
              if (ic)
                for (var d = 0; d < 0 + c; d++) {
                  var f = gc(d);
                  f && ic.set(f, d);
                }
            }
            if (c = ic.get(a) || 0)
              return c;
            if (jc.length)
              c = jc.pop();
            else {
              try {
                Z.grow(1);
              } catch (p) {
                if (!(p instanceof RangeError))
                  throw p;
                throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
              }
              c = Z.length - 1;
            }
            try {
              d = c, Z.set(d, a), fc[d] = Z.get(d);
            } catch (p) {
              if (!(p instanceof TypeError))
                throw p;
              u("undefined" != typeof b, "Missing signature argument to addFunction: " + a);
              if ("function" == typeof WebAssembly.Function) {
                d = WebAssembly.Function;
                f = { i: "i32", j: "i64", f: "f32", d: "f64", e: "externref", p: "i32" };
                for (var h = { parameters: [], results: "v" == b[0] ? [] : [f[b[0]]] }, m = 1; m < b.length; ++m)
                  u(b[m] in f, "invalid signature char: " + b[m]), h.parameters.push(f[b[m]]);
                b = new d(h, a);
              } else {
                d = [1];
                f = b.slice(0, 1);
                b = b.slice(1);
                h = { i: 127, p: 127, j: 126, f: 125, d: 124, e: 111 };
                d.push(96);
                m = b.length;
                u(16384 > m);
                128 > m ? d.push(m) : d.push(m % 128 | 128, m >> 7);
                for (m = 0; m < b.length; ++m)
                  u(b[m] in h, "invalid signature char: " + b[m]), d.push(h[b[m]]);
                "v" == f ? d.push(0) : d.push(1, h[f]);
                b = [0, 97, 115, 109, 1, 0, 0, 0, 1];
                f = d.length;
                u(16384 > f);
                128 > f ? b.push(f) : b.push(f % 128 | 128, f >> 7);
                b.push.apply(b, d);
                b.push(2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0);
                b = new WebAssembly.Module(new Uint8Array(b));
                b = new WebAssembly.Instance(b, { e: { f: a } }).exports.f;
              }
              d = c;
              Z.set(d, b);
              fc[d] = Z.get(d);
            }
            ic.set(a, c);
            return c;
          };
          e.removeFunction = (a) => {
            ic.delete(gc(a));
            Z.set(a, null);
            fc[a] = Z.get(a);
            jc.push(a);
          };
          e.setValue = function(a, b, c = "i8") {
            c.endsWith("*") && (c = "*");
            switch (c) {
              case "i1":
                E[a >> 0] = b;
                break;
              case "i8":
                E[a >> 0] = b;
                break;
              case "i16":
                ua[a >> 1] = b;
                break;
              case "i32":
                F[a >> 2] = b;
                break;
              case "i64":
                wa[a >> 3] = BigInt(b);
                break;
              case "float":
                va[a >> 2] = b;
                break;
              case "double":
                xa[a >> 3] = b;
                break;
              case "*":
                G[a >> 2] = b;
                break;
              default:
                g(`invalid type for setValue: ${c}`);
            }
          };
          e.getValue = function(a, b = "i8") {
            b.endsWith("*") && (b = "*");
            switch (b) {
              case "i1":
                return E[a >> 0];
              case "i8":
                return E[a >> 0];
              case "i16":
                return ua[a >> 1];
              case "i32":
                return F[a >> 2];
              case "i64":
                return wa[a >> 3];
              case "float":
                return va[a >> 2];
              case "double":
                return xa[a >> 3];
              case "*":
                return G[a >> 2];
              default:
                g(`invalid type for getValue: ${b}`);
            }
          };
          e.stringToUTF8 = Ub;
          e.lengthBytesUTF8 = jb;
          e.stringToNewUTF8 = Zb;
          e.FS = R;
          "writeI53ToI64 writeI53ToI64Clamped writeI53ToI64Signaling writeI53ToU64Clamped writeI53ToU64Signaling readI53FromI64 readI53FromU64 convertI32PairToI53 convertI32PairToI53Checked convertU32PairToI53 inetPton4 inetNtop4 inetPton6 inetNtop6 readSockaddr writeSockaddr getHostByName getCallstack emscriptenLog convertPCtoSourceLocation readEmAsmArgs jstoi_q jstoi_s listenOnce autoResumeAudioContext getDynCaller dynCall handleException runtimeKeepalivePush runtimeKeepalivePop callUserCallback maybeExit asmjsMangle handleAllocatorInit HandleAllocator getNativeTypeSize STACK_SIZE STACK_ALIGN POINTER_SIZE ASSERTIONS cwrap reallyNegative unSign strLen reSign formatString intArrayToString AsciiToString UTF16ToString stringToUTF16 lengthBytesUTF16 UTF32ToString stringToUTF32 lengthBytesUTF32 registerKeyEventCallback maybeCStringToJsString findEventTarget findCanvasEventTarget getBoundingClientRect fillMouseEventData registerMouseEventCallback registerWheelEventCallback registerUiEventCallback registerFocusEventCallback fillDeviceOrientationEventData registerDeviceOrientationEventCallback fillDeviceMotionEventData registerDeviceMotionEventCallback screenOrientation fillOrientationChangeEventData registerOrientationChangeEventCallback fillFullscreenChangeEventData registerFullscreenChangeEventCallback JSEvents_requestFullscreen JSEvents_resizeCanvasForFullscreen registerRestoreOldStyle hideEverythingExceptGivenElement restoreHiddenElements setLetterbox softFullscreenResizeWebGLRenderTarget doRequestFullscreen fillPointerlockChangeEventData registerPointerlockChangeEventCallback registerPointerlockErrorEventCallback requestPointerLock fillVisibilityChangeEventData registerVisibilityChangeEventCallback registerTouchEventCallback fillGamepadEventData registerGamepadEventCallback registerBeforeUnloadEventCallback fillBatteryEventData battery registerBatteryEventCallback setCanvasElementSize getCanvasElementSize jsStackTrace stackTrace checkWasiClock wasiRightsToMuslOFlags wasiOFlagsToMuslOFlags createDyncallWrapper safeSetTimeout setImmediateWrapped clearImmediateWrapped polyfillSetImmediate getPromise makePromise idsToPromises makePromiseCallback setMainLoop getSocketFromFD getSocketAddress FS_unlink FS_mkdirTree _setNetworkCallback".split(" ").forEach(function(a) {
            "undefined" === typeof globalThis || Object.getOwnPropertyDescriptor(globalThis, a) || Object.defineProperty(globalThis, a, { configurable: true, get() {
              var b = `\`${a}\` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line`, c = a;
              c.startsWith("_") || (c = "$" + a);
              b += ` (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='${c}')`;
              Ua(a) && (b += ". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you");
              Wa(b);
            } });
            Xa(a);
          });
          "run addOnPreRun addOnInit addOnPreMain addOnExit addOnPostRun addRunDependency removeRunDependency FS_createFolder FS_createPath FS_createLazyFile FS_createLink FS_createDevice FS_readFile out err callMain abort wasmMemory wasmExports stackAlloc stackSave stackRestore getTempRet0 setTempRet0 writeStackCookie checkStackCookie MAX_INT53 MIN_INT53 bigintToI53Checked ptrToString zeroMemory exitJS getHeapMax growMemory MONTH_DAYS_REGULAR MONTH_DAYS_LEAP MONTH_DAYS_REGULAR_CUMULATIVE MONTH_DAYS_LEAP_CUMULATIVE isLeapYear ydayFromDate arraySum addDays ERRNO_CODES ERRNO_MESSAGES setErrNo DNS Protocols Sockets initRandomFill randomFill timers warnOnce UNWIND_CACHE readEmAsmArgsArray getExecutableName keepRuntimeAlive asyncLoad alignMemory mmapAlloc wasmTable noExitRuntime getCFunc uleb128Encode sigToWasmTypes generateFuncType convertJsFunctionToWasm freeTableIndexes functionsInTableMap getEmptyTableSlot updateTableMap getFunctionAddress PATH PATH_FS UTF8Decoder UTF8ArrayToString UTF8ToString stringToUTF8Array intArrayFromString stringToAscii UTF16Decoder stringToUTF8OnStack writeArrayToMemory JSEvents specialHTMLTargets currentFullscreenStrategy restoreOldWindowedStyle demangle demangleAll ExitStatus getEnvStrings doReadv doWritev promiseMap Browser wget SYSCALLS preloadPlugins FS_createPreloadedFile FS_modeStringToFlags FS_getMode FS_stdin_getChar_buffer FS_stdin_getChar FS_createDataFile MEMFS TTY PIPEFS SOCKFS".split(" ").forEach(Xa);
          var uc;
          Ja = function vc() {
            uc || wc();
            uc || (Ja = vc);
          };
          function wc() {
            if (!(0 < Ia)) {
              qc();
              var a = Aa();
              u(0 == (a & 3));
              0 == a && (a += 4);
              G[a >> 2] = 34821223;
              G[a + 4 >> 2] = 2310721022;
              G[0] = 1668509029;
              if (e.preRun)
                for ("function" == typeof e.preRun && (e.preRun = [e.preRun]); e.preRun.length; )
                  a = e.preRun.shift(), Ea.unshift(a);
              for (; 0 < Ea.length; )
                Ea.shift()(e);
              if (!(0 < Ia)) {
                if (!uc && (uc = true, e.calledRun = true, !sa)) {
                  u(!Ha);
                  Ha = true;
                  za();
                  e.noFSInit || R.R.Y || R.R();
                  for (R.ta = false; 0 < Fa.length; )
                    Fa.shift()(e);
                  aa(e);
                  u(!e._main, 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');
                  for (za(); 0 < Ga.length; )
                    Ga.shift()(e);
                }
                za();
              }
            }
          }
          function mc() {
            var a = qa, b = z, c = false;
            qa = z = () => {
              c = true;
            };
            try {
              Rb(0), ["stdout", "stderr"].forEach(function(d) {
                (d = Ob("/dev/" + d)) && (d = mb[d.object.rdev]) && d.output && d.output.length && (c = true);
              });
            } catch (d) {
            }
            qa = a;
            z = b;
            c && Wa("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the Emscripten FAQ), or make sure to emit a newline when you printf etc.");
          }
          wc();
          return moduleArg.ready;
        };
      })();
      class LuaWasm {
        static async initialize(customWasmFileLocation, environmentVariables) {
          const module3 = await initWasmModule({
            locateFile: (path, scriptDirectory) => {
              return customWasmFileLocation || scriptDirectory + path;
            },
            preRun: (initializedModule) => {
              if (typeof environmentVariables === "object") {
                Object.entries(environmentVariables).forEach(([k, v]) => initializedModule.ENV[k] = v);
              }
            }
          });
          return new LuaWasm(module3);
        }
        constructor(module3) {
          this.referenceTracker = /* @__PURE__ */ new WeakMap();
          this.referenceMap = /* @__PURE__ */ new Map();
          this.availableReferences = [];
          this.module = module3;
          this.luaL_checkversion_ = this.cwrap("luaL_checkversion_", null, ["number", "number", "number"]);
          this.luaL_getmetafield = this.cwrap("luaL_getmetafield", "number", ["number", "number", "string"]);
          this.luaL_callmeta = this.cwrap("luaL_callmeta", "number", ["number", "number", "string"]);
          this.luaL_tolstring = this.cwrap("luaL_tolstring", "string", ["number", "number", "number"]);
          this.luaL_argerror = this.cwrap("luaL_argerror", "number", ["number", "number", "string"]);
          this.luaL_typeerror = this.cwrap("luaL_typeerror", "number", ["number", "number", "string"]);
          this.luaL_checklstring = this.cwrap("luaL_checklstring", "string", ["number", "number", "number"]);
          this.luaL_optlstring = this.cwrap("luaL_optlstring", "string", ["number", "number", "string", "number"]);
          this.luaL_checknumber = this.cwrap("luaL_checknumber", "number", ["number", "number"]);
          this.luaL_optnumber = this.cwrap("luaL_optnumber", "number", ["number", "number", "number"]);
          this.luaL_checkinteger = this.cwrap("luaL_checkinteger", "number", ["number", "number"]);
          this.luaL_optinteger = this.cwrap("luaL_optinteger", "number", ["number", "number", "number"]);
          this.luaL_checkstack = this.cwrap("luaL_checkstack", null, ["number", "number", "string"]);
          this.luaL_checktype = this.cwrap("luaL_checktype", null, ["number", "number", "number"]);
          this.luaL_checkany = this.cwrap("luaL_checkany", null, ["number", "number"]);
          this.luaL_newmetatable = this.cwrap("luaL_newmetatable", "number", ["number", "string"]);
          this.luaL_setmetatable = this.cwrap("luaL_setmetatable", null, ["number", "string"]);
          this.luaL_testudata = this.cwrap("luaL_testudata", "number", ["number", "number", "string"]);
          this.luaL_checkudata = this.cwrap("luaL_checkudata", "number", ["number", "number", "string"]);
          this.luaL_where = this.cwrap("luaL_where", null, ["number", "number"]);
          this.luaL_fileresult = this.cwrap("luaL_fileresult", "number", ["number", "number", "string"]);
          this.luaL_execresult = this.cwrap("luaL_execresult", "number", ["number", "number"]);
          this.luaL_ref = this.cwrap("luaL_ref", "number", ["number", "number"]);
          this.luaL_unref = this.cwrap("luaL_unref", null, ["number", "number", "number"]);
          this.luaL_loadfilex = this.cwrap("luaL_loadfilex", "number", ["number", "string", "string"]);
          this.luaL_loadbufferx = this.cwrap("luaL_loadbufferx", "number", ["number", "string|number", "number", "string|number", "string"]);
          this.luaL_loadstring = this.cwrap("luaL_loadstring", "number", ["number", "string"]);
          this.luaL_newstate = this.cwrap("luaL_newstate", "number", []);
          this.luaL_len = this.cwrap("luaL_len", "number", ["number", "number"]);
          this.luaL_addgsub = this.cwrap("luaL_addgsub", null, ["number", "string", "string", "string"]);
          this.luaL_gsub = this.cwrap("luaL_gsub", "string", ["number", "string", "string", "string"]);
          this.luaL_setfuncs = this.cwrap("luaL_setfuncs", null, ["number", "number", "number"]);
          this.luaL_getsubtable = this.cwrap("luaL_getsubtable", "number", ["number", "number", "string"]);
          this.luaL_traceback = this.cwrap("luaL_traceback", null, ["number", "number", "string", "number"]);
          this.luaL_requiref = this.cwrap("luaL_requiref", null, ["number", "string", "number", "number"]);
          this.luaL_buffinit = this.cwrap("luaL_buffinit", null, ["number", "number"]);
          this.luaL_prepbuffsize = this.cwrap("luaL_prepbuffsize", "string", ["number", "number"]);
          this.luaL_addlstring = this.cwrap("luaL_addlstring", null, ["number", "string", "number"]);
          this.luaL_addstring = this.cwrap("luaL_addstring", null, ["number", "string"]);
          this.luaL_addvalue = this.cwrap("luaL_addvalue", null, ["number"]);
          this.luaL_pushresult = this.cwrap("luaL_pushresult", null, ["number"]);
          this.luaL_pushresultsize = this.cwrap("luaL_pushresultsize", null, ["number", "number"]);
          this.luaL_buffinitsize = this.cwrap("luaL_buffinitsize", "string", ["number", "number", "number"]);
          this.lua_newstate = this.cwrap("lua_newstate", "number", ["number", "number"]);
          this.lua_close = this.cwrap("lua_close", null, ["number"]);
          this.lua_newthread = this.cwrap("lua_newthread", "number", ["number"]);
          this.lua_resetthread = this.cwrap("lua_resetthread", "number", ["number"]);
          this.lua_atpanic = this.cwrap("lua_atpanic", "number", ["number", "number"]);
          this.lua_version = this.cwrap("lua_version", "number", ["number"]);
          this.lua_absindex = this.cwrap("lua_absindex", "number", ["number", "number"]);
          this.lua_gettop = this.cwrap("lua_gettop", "number", ["number"]);
          this.lua_settop = this.cwrap("lua_settop", null, ["number", "number"]);
          this.lua_pushvalue = this.cwrap("lua_pushvalue", null, ["number", "number"]);
          this.lua_rotate = this.cwrap("lua_rotate", null, ["number", "number", "number"]);
          this.lua_copy = this.cwrap("lua_copy", null, ["number", "number", "number"]);
          this.lua_checkstack = this.cwrap("lua_checkstack", "number", ["number", "number"]);
          this.lua_xmove = this.cwrap("lua_xmove", null, ["number", "number", "number"]);
          this.lua_isnumber = this.cwrap("lua_isnumber", "number", ["number", "number"]);
          this.lua_isstring = this.cwrap("lua_isstring", "number", ["number", "number"]);
          this.lua_iscfunction = this.cwrap("lua_iscfunction", "number", ["number", "number"]);
          this.lua_isinteger = this.cwrap("lua_isinteger", "number", ["number", "number"]);
          this.lua_isuserdata = this.cwrap("lua_isuserdata", "number", ["number", "number"]);
          this.lua_type = this.cwrap("lua_type", "number", ["number", "number"]);
          this.lua_typename = this.cwrap("lua_typename", "string", ["number", "number"]);
          this.lua_tonumberx = this.cwrap("lua_tonumberx", "number", ["number", "number", "number"]);
          this.lua_tointegerx = this.cwrap("lua_tointegerx", "number", ["number", "number", "number"]);
          this.lua_toboolean = this.cwrap("lua_toboolean", "number", ["number", "number"]);
          this.lua_tolstring = this.cwrap("lua_tolstring", "string", ["number", "number", "number"]);
          this.lua_rawlen = this.cwrap("lua_rawlen", "number", ["number", "number"]);
          this.lua_tocfunction = this.cwrap("lua_tocfunction", "number", ["number", "number"]);
          this.lua_touserdata = this.cwrap("lua_touserdata", "number", ["number", "number"]);
          this.lua_tothread = this.cwrap("lua_tothread", "number", ["number", "number"]);
          this.lua_topointer = this.cwrap("lua_topointer", "number", ["number", "number"]);
          this.lua_arith = this.cwrap("lua_arith", null, ["number", "number"]);
          this.lua_rawequal = this.cwrap("lua_rawequal", "number", ["number", "number", "number"]);
          this.lua_compare = this.cwrap("lua_compare", "number", ["number", "number", "number", "number"]);
          this.lua_pushnil = this.cwrap("lua_pushnil", null, ["number"]);
          this.lua_pushnumber = this.cwrap("lua_pushnumber", null, ["number", "number"]);
          this.lua_pushinteger = this.cwrap("lua_pushinteger", null, ["number", "number"]);
          this.lua_pushlstring = this.cwrap("lua_pushlstring", "string", ["number", "string|number", "number"]);
          this.lua_pushstring = this.cwrap("lua_pushstring", "string", ["number", "string|number"]);
          this.lua_pushcclosure = this.cwrap("lua_pushcclosure", null, ["number", "number", "number"]);
          this.lua_pushboolean = this.cwrap("lua_pushboolean", null, ["number", "number"]);
          this.lua_pushlightuserdata = this.cwrap("lua_pushlightuserdata", null, ["number", "number"]);
          this.lua_pushthread = this.cwrap("lua_pushthread", "number", ["number"]);
          this.lua_getglobal = this.cwrap("lua_getglobal", "number", ["number", "string"]);
          this.lua_gettable = this.cwrap("lua_gettable", "number", ["number", "number"]);
          this.lua_getfield = this.cwrap("lua_getfield", "number", ["number", "number", "string"]);
          this.lua_geti = this.cwrap("lua_geti", "number", ["number", "number", "number"]);
          this.lua_rawget = this.cwrap("lua_rawget", "number", ["number", "number"]);
          this.lua_rawgeti = this.cwrap("lua_rawgeti", "number", ["number", "number", "number"]);
          this.lua_rawgetp = this.cwrap("lua_rawgetp", "number", ["number", "number", "number"]);
          this.lua_createtable = this.cwrap("lua_createtable", null, ["number", "number", "number"]);
          this.lua_newuserdatauv = this.cwrap("lua_newuserdatauv", "number", ["number", "number", "number"]);
          this.lua_getmetatable = this.cwrap("lua_getmetatable", "number", ["number", "number"]);
          this.lua_getiuservalue = this.cwrap("lua_getiuservalue", "number", ["number", "number", "number"]);
          this.lua_setglobal = this.cwrap("lua_setglobal", null, ["number", "string"]);
          this.lua_settable = this.cwrap("lua_settable", null, ["number", "number"]);
          this.lua_setfield = this.cwrap("lua_setfield", null, ["number", "number", "string"]);
          this.lua_seti = this.cwrap("lua_seti", null, ["number", "number", "number"]);
          this.lua_rawset = this.cwrap("lua_rawset", null, ["number", "number"]);
          this.lua_rawseti = this.cwrap("lua_rawseti", null, ["number", "number", "number"]);
          this.lua_rawsetp = this.cwrap("lua_rawsetp", null, ["number", "number", "number"]);
          this.lua_setmetatable = this.cwrap("lua_setmetatable", "number", ["number", "number"]);
          this.lua_setiuservalue = this.cwrap("lua_setiuservalue", "number", ["number", "number", "number"]);
          this.lua_callk = this.cwrap("lua_callk", null, ["number", "number", "number", "number", "number"]);
          this.lua_pcallk = this.cwrap("lua_pcallk", "number", ["number", "number", "number", "number", "number", "number"]);
          this.lua_load = this.cwrap("lua_load", "number", ["number", "number", "number", "string", "string"]);
          this.lua_dump = this.cwrap("lua_dump", "number", ["number", "number", "number", "number"]);
          this.lua_yieldk = this.cwrap("lua_yieldk", "number", ["number", "number", "number", "number"]);
          this.lua_resume = this.cwrap("lua_resume", "number", ["number", "number", "number", "number"]);
          this.lua_status = this.cwrap("lua_status", "number", ["number"]);
          this.lua_isyieldable = this.cwrap("lua_isyieldable", "number", ["number"]);
          this.lua_setwarnf = this.cwrap("lua_setwarnf", null, ["number", "number", "number"]);
          this.lua_warning = this.cwrap("lua_warning", null, ["number", "string", "number"]);
          this.lua_error = this.cwrap("lua_error", "number", ["number"]);
          this.lua_next = this.cwrap("lua_next", "number", ["number", "number"]);
          this.lua_concat = this.cwrap("lua_concat", null, ["number", "number"]);
          this.lua_len = this.cwrap("lua_len", null, ["number", "number"]);
          this.lua_stringtonumber = this.cwrap("lua_stringtonumber", "number", ["number", "string"]);
          this.lua_getallocf = this.cwrap("lua_getallocf", "number", ["number", "number"]);
          this.lua_setallocf = this.cwrap("lua_setallocf", null, ["number", "number", "number"]);
          this.lua_toclose = this.cwrap("lua_toclose", null, ["number", "number"]);
          this.lua_closeslot = this.cwrap("lua_closeslot", null, ["number", "number"]);
          this.lua_getstack = this.cwrap("lua_getstack", "number", ["number", "number", "number"]);
          this.lua_getinfo = this.cwrap("lua_getinfo", "number", ["number", "string", "number"]);
          this.lua_getlocal = this.cwrap("lua_getlocal", "string", ["number", "number", "number"]);
          this.lua_setlocal = this.cwrap("lua_setlocal", "string", ["number", "number", "number"]);
          this.lua_getupvalue = this.cwrap("lua_getupvalue", "string", ["number", "number", "number"]);
          this.lua_setupvalue = this.cwrap("lua_setupvalue", "string", ["number", "number", "number"]);
          this.lua_upvalueid = this.cwrap("lua_upvalueid", "number", ["number", "number", "number"]);
          this.lua_upvaluejoin = this.cwrap("lua_upvaluejoin", null, ["number", "number", "number", "number", "number"]);
          this.lua_sethook = this.cwrap("lua_sethook", null, ["number", "number", "number", "number"]);
          this.lua_gethook = this.cwrap("lua_gethook", "number", ["number"]);
          this.lua_gethookmask = this.cwrap("lua_gethookmask", "number", ["number"]);
          this.lua_gethookcount = this.cwrap("lua_gethookcount", "number", ["number"]);
          this.lua_setcstacklimit = this.cwrap("lua_setcstacklimit", "number", ["number", "number"]);
          this.luaopen_base = this.cwrap("luaopen_base", "number", ["number"]);
          this.luaopen_coroutine = this.cwrap("luaopen_coroutine", "number", ["number"]);
          this.luaopen_table = this.cwrap("luaopen_table", "number", ["number"]);
          this.luaopen_io = this.cwrap("luaopen_io", "number", ["number"]);
          this.luaopen_os = this.cwrap("luaopen_os", "number", ["number"]);
          this.luaopen_string = this.cwrap("luaopen_string", "number", ["number"]);
          this.luaopen_utf8 = this.cwrap("luaopen_utf8", "number", ["number"]);
          this.luaopen_math = this.cwrap("luaopen_math", "number", ["number"]);
          this.luaopen_debug = this.cwrap("luaopen_debug", "number", ["number"]);
          this.luaopen_package = this.cwrap("luaopen_package", "number", ["number"]);
          this.luaL_openlibs = this.cwrap("luaL_openlibs", null, ["number"]);
        }
        lua_remove(luaState, index) {
          this.lua_rotate(luaState, index, -1);
          this.lua_pop(luaState, 1);
        }
        lua_pop(luaState, count) {
          this.lua_settop(luaState, -count - 1);
        }
        luaL_getmetatable(luaState, name) {
          return this.lua_getfield(luaState, LUA_REGISTRYINDEX, name);
        }
        lua_yield(luaState, count) {
          return this.lua_yieldk(luaState, count, 0, null);
        }
        lua_upvalueindex(index) {
          return LUA_REGISTRYINDEX - index;
        }
        ref(data) {
          const existing = this.referenceTracker.get(data);
          if (existing) {
            existing.refCount++;
            return existing.index;
          }
          const availableIndex = this.availableReferences.pop();
          const index = availableIndex === void 0 ? this.referenceMap.size + 1 : availableIndex;
          this.referenceMap.set(index, data);
          this.referenceTracker.set(data, {
            refCount: 1,
            index
          });
          this.lastRefIndex = index;
          return index;
        }
        unref(index) {
          const ref = this.referenceMap.get(index);
          if (ref === void 0) {
            return;
          }
          const metadata = this.referenceTracker.get(ref);
          if (metadata === void 0) {
            this.referenceTracker.delete(ref);
            this.availableReferences.push(index);
            return;
          }
          metadata.refCount--;
          if (metadata.refCount <= 0) {
            this.referenceTracker.delete(ref);
            this.referenceMap.delete(index);
            this.availableReferences.push(index);
          }
        }
        getRef(index) {
          return this.referenceMap.get(index);
        }
        getLastRefIndex() {
          return this.lastRefIndex;
        }
        printRefs() {
          for (const [key, value] of this.referenceMap.entries()) {
            console.log(key, value);
          }
        }
        cwrap(name, returnType, argTypes) {
          const hasStringOrNumber = argTypes.some((argType) => argType === "string|number");
          if (!hasStringOrNumber) {
            return (...args) => this.module.ccall(name, returnType, argTypes, args);
          }
          return (...args) => {
            const pointersToBeFreed = [];
            const resolvedArgTypes = argTypes.map((argType, i) => {
              var _a;
              if (argType === "string|number") {
                if (typeof args[i] === "number") {
                  return "number";
                } else {
                  if (((_a = args[i]) === null || _a === void 0 ? void 0 : _a.length) > 1024) {
                    const bufferPointer = this.module.stringToNewUTF8(args[i]);
                    args[i] = bufferPointer;
                    pointersToBeFreed.push(bufferPointer);
                    return "number";
                  } else {
                    return "string";
                  }
                }
              }
              return argType;
            });
            try {
              return this.module.ccall(name, returnType, resolvedArgTypes, args);
            } finally {
              for (const pointer of pointersToBeFreed) {
                this.module._free(pointer);
              }
            }
          };
        }
      }
      var version2 = "1.16.0";
      class LuaFactory2 {
        constructor(customWasmUri, environmentVariables) {
          var _a;
          if (customWasmUri === void 0) {
            const isBrowser = typeof window === "object" && typeof window.document !== "undefined" || typeof self === "object" && ((_a = self === null || self === void 0 ? void 0 : self.constructor) === null || _a === void 0 ? void 0 : _a.name) === "DedicatedWorkerGlobalScope";
            if (isBrowser) {
              customWasmUri = `https://unpkg.com/wasmoon@${version2}/dist/glue.wasm`;
            }
          }
          this.luaWasmPromise = LuaWasm.initialize(customWasmUri, environmentVariables);
        }
        async mountFile(path, content) {
          this.mountFileSync(await this.getLuaModule(), path, content);
        }
        mountFileSync(luaWasm, path, content) {
          const fileSep = path.lastIndexOf("/");
          const file = path.substring(fileSep + 1);
          const body = path.substring(0, path.length - file.length - 1);
          if (body.length > 0) {
            const parts = body.split("/").reverse();
            let parent = "";
            while (parts.length) {
              const part = parts.pop();
              if (!part) {
                continue;
              }
              const current = `${parent}/${part}`;
              try {
                luaWasm.module.FS.mkdir(current);
              } catch (err) {
              }
              parent = current;
            }
          }
          luaWasm.module.FS.writeFile(path, content);
        }
        async createEngine(options = {}) {
          return new LuaEngine2(await this.getLuaModule(), options);
        }
        async getLuaModule() {
          return this.luaWasmPromise;
        }
      }
      exports2.Decoration = Decoration;
      exports2.LUAI_MAXSTACK = LUAI_MAXSTACK;
      exports2.LUA_MULTRET = LUA_MULTRET;
      exports2.LUA_REGISTRYINDEX = LUA_REGISTRYINDEX;
      exports2.LuaEngine = LuaEngine2;
      exports2.LuaFactory = LuaFactory2;
      exports2.LuaGlobal = Global;
      exports2.LuaMultiReturn = MultiReturn;
      exports2.LuaRawResult = RawResult;
      exports2.LuaThread = Thread;
      exports2.LuaTimeoutError = LuaTimeoutError;
      exports2.LuaTypeExtension = LuaTypeExtension;
      exports2.LuaWasm = LuaWasm;
      exports2.PointerSize = PointerSize;
      exports2.decorate = decorate;
      exports2.decorateFunction = decorateFunction;
      exports2.decorateProxy = decorateProxy;
      exports2.decorateUserdata = decorateUserdata;
    });
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LuaConsolePlugin
});
module.exports = __toCommonJS(main_exports);
init_process();
init_buffer();
var import_obsidian2 = require("obsidian");

// LuaConsoleView.ts
init_process();
init_buffer();
var import_obsidian = require("obsidian");

// LuaEngine.ts
init_process();
init_buffer();
var import_wasmoon = __toESM(require_dist());
var LuaEngine = class {
  constructor(app) {
    this.factory = null;
    this.lua = null;
    this.app = app;
  }
  async initialize() {
    if (this.lua) {
      return;
    }
    try {
      this.factory = new import_wasmoon.LuaFactory();
      this.lua = await this.factory.createEngine();
      await this.exposeObsidianAPI();
      await this.setupPrintCapture();
    } catch (error2) {
      console.error("Failed to initialize Lua engine:", error2);
      throw new Error(`Lua initialization failed: ${error2.message}`);
    }
  }
  async exposeObsidianAPI() {
    if (!this.lua)
      return;
    const appProxy = {
      getName: () => this.app.vault.getName(),
      getActiveFile: () => {
        const file = this.app.workspace.getActiveFile();
        return file ? {
          path: file.path,
          name: file.name,
          basename: file.basename,
          extension: file.extension
        } : null;
      },
      getAllFiles: () => {
        return this.app.vault.getMarkdownFiles().map((f) => ({
          path: f.path,
          name: f.name,
          basename: f.basename
        }));
      },
      // Expose the full app object with caution
      _raw: this.app
    };
    this.lua.global.set("app", appProxy);
    this.lua.global.set("log", (message) => {
      console.log("[Lua]", message);
      return message;
    });
  }
  async setupPrintCapture() {
    if (!this.lua)
      return;
    await this.lua.doString(`
            _print_output = ""
            function print(...)
                local args = {...}
                local output = {}
                for i, v in ipairs(args) do
                    table.insert(output, tostring(v))
                end
                _print_output = _print_output .. table.concat(output, "\\t") .. "\\n"
            end
        `);
  }
  async execute(code) {
    if (!this.lua) {
      throw new Error("Lua engine not initialized");
    }
    await this.lua.doString('_print_output = ""');
    try {
      const result = await this.lua.doString(code);
      const printOutput = await this.lua.doString("return _print_output");
      if (printOutput && printOutput.trim()) {
        return printOutput.trim();
      }
      return result;
    } catch (error2) {
      throw new Error(this.formatLuaError(error2));
    }
  }
  formatLuaError(error2) {
    if (error2.message) {
      return error2.message;
    }
    return String(error2);
  }
  async cleanup() {
    if (this.lua) {
      this.lua.global.close();
    }
    this.factory = null;
    this.lua = null;
  }
};

// LuaConsoleView.ts
var LUA_CONSOLE_VIEW_TYPE = "lua-console-view";
var LuaConsoleView = class extends import_obsidian.ItemView {
  constructor(leaf, app) {
    super(leaf);
    this.prismLoaded = false;
    this.luaEngine = new LuaEngine(app);
    this.loadPrism();
  }
  getViewType() {
    return LUA_CONSOLE_VIEW_TYPE;
  }
  getDisplayText() {
    return "Lua Console";
  }
  getIcon() {
    return "terminal";
  }
  loadPrism() {
    if (!document.getElementById("prism-css")) {
      const link = document.createElement("link");
      link.id = "prism-css";
      link.rel = "stylesheet";
      link.href = "https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css";
      document.head.appendChild(link);
    }
    if (!window.Prism) {
      const script = document.createElement("script");
      script.src = "https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js";
      script.onload = () => {
        const luaScript = document.createElement("script");
        luaScript.src = "https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-lua.min.js";
        luaScript.onload = () => {
          this.prismLoaded = true;
        };
        document.head.appendChild(luaScript);
      };
      document.head.appendChild(script);
    } else {
      this.prismLoaded = true;
    }
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("lua-console-container");
    container.style.position = "relative";
    container.style.height = "100%";
    container.style.width = "100%";
    container.style.overflow = "hidden";
    container.style.display = "flex";
    container.style.flexDirection = "column";
    this.outputEl = container.createDiv({ cls: "lua-console-output" });
    this.outputEl.style.flex = "1";
    this.outputEl.style.overflowY = "auto";
    this.outputEl.style.overflowX = "hidden";
    this.outputEl.style.margin = "10px";
    this.outputEl.style.padding = "12px";
    this.outputEl.style.border = "1px solid var(--background-modifier-border)";
    this.outputEl.style.borderRadius = "6px";
    this.outputEl.style.backgroundColor = "var(--background-primary-alt)";
    this.outputEl.style.fontFamily = "var(--font-monospace)";
    try {
      await this.luaEngine.initialize();
      this.addOutput('Lua Console ready. The Obsidian app is available as "app".', "info");
    } catch (error2) {
      this.addOutput(`Failed to initialize Lua: ${error2.message}`, "error");
      this.addOutput("Check the developer console for details.", "error");
      console.error("Lua initialization error:", error2);
      return;
    }
    const inputContainer = container.createDiv({ cls: "lua-console-input-container" });
    inputContainer.style.flexShrink = "0";
    inputContainer.style.padding = "10px";
    inputContainer.style.borderTop = "1px solid var(--background-modifier-border)";
    inputContainer.style.backgroundColor = "var(--background-primary)";
    this.inputEl = inputContainer.createEl("textarea", {
      cls: "lua-console-input",
      attr: {
        placeholder: "Enter Lua code...",
        rows: "3"
      }
    });
    this.inputEl.style.width = "100%";
    this.inputEl.style.fontFamily = "var(--font-monospace)";
    this.inputEl.style.fontSize = "13px";
    this.inputEl.style.padding = "10px";
    this.inputEl.style.boxSizing = "border-box";
    this.inputEl.style.resize = "vertical";
    this.inputEl.style.minHeight = "80px";
    this.inputEl.addEventListener("keydown", (e) => {
      if (e.shiftKey && (e.ctrlKey || e.metaKey) && e.key === "Enter") {
        e.preventDefault();
        this.executeCode();
      }
    });
    const buttonContainer = inputContainer.createDiv({ cls: "lua-console-buttons" });
    buttonContainer.style.display = "flex";
    buttonContainer.style.gap = "8px";
    buttonContainer.style.marginTop = "8px";
    const executeBtn = buttonContainer.createEl("button", {
      text: "Execute (Shift+Ctrl+Enter)",
      cls: "mod-cta"
    });
    executeBtn.style.flex = "1";
    executeBtn.addEventListener("click", () => this.executeCode());
    const clearBtn = buttonContainer.createEl("button", {
      text: "Clear Output"
    });
    clearBtn.style.flex = "1";
    clearBtn.addEventListener("click", () => this.clearOutput());
    const resetBtn = buttonContainer.createEl("button", {
      text: "Reset Session",
      cls: "mod-warning"
    });
    resetBtn.style.flex = "1";
    resetBtn.style.backgroundColor = "var(--color-red)";
    resetBtn.style.color = "var(--text-on-accent)";
    resetBtn.addEventListener("click", () => this.resetSession());
  }
  async onClose() {
    await this.luaEngine.cleanup();
  }
  async executeCode() {
    const code = this.inputEl.value.trim();
    if (!code)
      return;
    this.addOutput(`> ${code}`, "input");
    try {
      const result = await this.luaEngine.execute(code);
      if (result !== void 0 && result !== null) {
        this.addOutput(this.formatResult(result), "success");
      }
    } catch (error2) {
      this.addOutput(`Error: ${error2.message}`, "error");
    }
    this.inputEl.value = "";
  }
  formatResult(result) {
    if (typeof result === "object") {
      try {
        return JSON.stringify(result, null, 2);
      } catch (e) {
        return String(result);
      }
    }
    return String(result);
  }
  addOutput(text, type = "success") {
    const line = this.outputEl.createDiv({ cls: `lua-console-line lua-console-${type}` });
    const codeBlock = line.createEl("pre");
    const code = codeBlock.createEl("code", { cls: "language-lua" });
    code.textContent = text;
    if (this.prismLoaded && window.Prism) {
      window.Prism.highlightElement(code);
    }
    codeBlock.style.margin = "0";
    codeBlock.style.padding = "8px 10px";
    codeBlock.style.borderRadius = "4px";
    codeBlock.style.fontFamily = "var(--font-monospace)";
    codeBlock.style.fontSize = "13px";
    codeBlock.style.whiteSpace = "pre-wrap";
    codeBlock.style.wordBreak = "break-word";
    codeBlock.style.userSelect = "text";
    codeBlock.style.cursor = "text";
    codeBlock.style.overflowX = "auto";
    if (type === "input") {
      codeBlock.style.borderLeft = "3px solid var(--text-muted)";
      codeBlock.style.backgroundColor = "var(--code-background)";
    } else if (type === "success") {
      codeBlock.style.borderLeft = "3px solid var(--text-accent)";
      codeBlock.style.backgroundColor = "var(--code-background)";
    } else if (type === "error") {
      codeBlock.style.borderLeft = "3px solid var(--text-error)";
      codeBlock.style.backgroundColor = "transparent";
      codeBlock.style.color = "var(--text-error)";
      code.style.color = "var(--text-error)";
    } else if (type === "info") {
      codeBlock.style.borderLeft = "3px solid var(--text-muted)";
      codeBlock.style.backgroundColor = "var(--background-secondary)";
      codeBlock.style.fontStyle = "italic";
      codeBlock.style.color = "var(--text-muted)";
    }
    if (type === "success" || type === "error") {
      line.style.marginTop = "4px";
      line.style.marginBottom = "12px";
    } else {
      line.style.marginBottom = "4px";
    }
    requestAnimationFrame(() => {
      this.outputEl.scrollTop = this.outputEl.scrollHeight;
    });
  }
  clearOutput() {
    this.outputEl.empty();
    this.addOutput("Output cleared.", "info");
  }
  async resetSession() {
    await this.luaEngine.cleanup();
    await this.luaEngine.initialize();
    this.outputEl.empty();
    this.addOutput("Lua session reset. New VM initialized.", "info");
  }
};

// main.ts
var LuaConsolePlugin = class extends import_obsidian2.Plugin {
  async onload() {
    this.registerView(
      LUA_CONSOLE_VIEW_TYPE,
      (leaf) => new LuaConsoleView(leaf, this.app)
    );
    this.addRibbonIcon("terminal", "Open Lua Console", () => {
      this.activateView();
    });
    this.addCommand({
      id: "open-lua-console",
      name: "Open Lua Console",
      callback: () => {
        this.activateView();
      }
    });
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(LUA_CONSOLE_VIEW_TYPE);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType(LUA_CONSOLE_VIEW_TYPE)[0];
    if (!leaf) {
      leaf = workspace.getRightLeaf(false);
      await leaf.setViewState({
        type: LUA_CONSOLE_VIEW_TYPE,
        active: true
      });
    }
    workspace.revealLeaf(leaf);
  }
};
/*! https://mths.be/punycode v1.4.1 by @mathias */
/*! Bundled license information:

@esbuild-plugins/node-globals-polyfill/Buffer.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL0Blc2J1aWxkLXBsdWdpbnMvbm9kZS1nbG9iYWxzLXBvbHlmaWxsL3Byb2Nlc3MuanMiLCAibm9kZV9tb2R1bGVzL0Blc2J1aWxkLXBsdWdpbnMvbm9kZS1nbG9iYWxzLXBvbHlmaWxsL0J1ZmZlci5qcyIsICJub2RlX21vZHVsZXMvQGVzYnVpbGQtcGx1Z2lucy9ub2RlLWdsb2JhbHMtcG9seWZpbGwvX2J1ZmZlci5qcyIsICJub2RlLW1vZHVsZXMtcG9seWZpbGxzOnB1bnljb2RlIiwgIm5vZGUtbW9kdWxlcy1wb2x5ZmlsbHM6cHJvY2VzcyIsICJub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLXBvbHlmaWxscy9wb2x5ZmlsbHMvaW5oZXJpdHMuanMiLCAibm9kZS1tb2R1bGVzLXBvbHlmaWxsczp1dGlsIiwgIm5vZGUtbW9kdWxlcy1wb2x5ZmlsbHM6cXVlcnlzdHJpbmciLCAibm9kZS1tb2R1bGVzLXBvbHlmaWxsczp1cmwiLCAibm9kZS1tb2R1bGVzLXBvbHlmaWxscy1jb21tb25qczp1cmwiLCAibm9kZS1tb2R1bGVzLXBvbHlmaWxsczptb2R1bGUiLCAibm9kZV9tb2R1bGVzL3dhc21vb24vZGlzdC9pbmRleC5qcyIsICJtYWluLnRzIiwgIkx1YUNvbnNvbGVWaWV3LnRzIiwgIkx1YUVuZ2luZS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG4vLyBiYXNlZCBvZmYgaHR0cHM6Ly9naXRodWIuY29tL2RlZnVuY3R6b21iaWUvbm9kZS1wcm9jZXNzL2Jsb2IvbWFzdGVyL2Jyb3dzZXIuanNcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKVxufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpXG59XG52YXIgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXRcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0XG5pZiAodHlwZW9mIGdsb2JhbC5zZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXRcbn1cbmlmICh0eXBlb2YgZ2xvYmFsLmNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dFxufVxuXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApXG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKFxuICAgICAgICAoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiZcbiAgICAgICAgc2V0VGltZW91dFxuICAgICkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dFxuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMClcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKVxuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKFxuICAgICAgICAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmXG4gICAgICAgIGNsZWFyVGltZW91dFxuICAgICkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXRcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcilcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKVxuICAgICAgICB9XG4gICAgfVxufVxudmFyIHF1ZXVlID0gW11cbnZhciBkcmFpbmluZyA9IGZhbHNlXG52YXIgY3VycmVudFF1ZXVlXG52YXIgcXVldWVJbmRleCA9IC0xXG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2VcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xXG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljaylcbiAgICBkcmFpbmluZyA9IHRydWVcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGhcbiAgICB3aGlsZSAobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlXG4gICAgICAgIHF1ZXVlID0gW11cbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMVxuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGhcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbFxuICAgIGRyYWluaW5nID0gZmFsc2VcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dClcbn1cbmZ1bmN0aW9uIG5leHRUaWNrKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKVxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV1cbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpXG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKVxuICAgIH1cbn1cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuXG4gICAgdGhpcy5hcnJheSA9IGFycmF5XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KVxufVxudmFyIHRpdGxlID0gJ2Jyb3dzZXInXG52YXIgcGxhdGZvcm0gPSAnYnJvd3NlcidcbnZhciBicm93c2VyID0gdHJ1ZVxudmFyIGVudiA9IHt9XG52YXIgYXJndiA9IFtdXG52YXIgdmVyc2lvbiA9ICcnIC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG52YXIgdmVyc2lvbnMgPSB7fVxudmFyIHJlbGVhc2UgPSB7fVxudmFyIGNvbmZpZyA9IHt9XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG52YXIgb24gPSBub29wXG52YXIgYWRkTGlzdGVuZXIgPSBub29wXG52YXIgb25jZSA9IG5vb3BcbnZhciBvZmYgPSBub29wXG52YXIgcmVtb3ZlTGlzdGVuZXIgPSBub29wXG52YXIgcmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcFxudmFyIGVtaXQgPSBub29wXG5cbmZ1bmN0aW9uIGJpbmRpbmcobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKVxufVxuXG5mdW5jdGlvbiBjd2QoKSB7XG4gICAgcmV0dXJuICcvJ1xufVxuZnVuY3Rpb24gY2hkaXIoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKVxufVxuZnVuY3Rpb24gdW1hc2soKSB7XG4gICAgcmV0dXJuIDBcbn1cblxuLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20va3VtYXZpcy9icm93c2VyLXByb2Nlc3MtaHJ0aW1lL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG52YXIgcGVyZm9ybWFuY2UgPSBnbG9iYWwucGVyZm9ybWFuY2UgfHwge31cbnZhciBwZXJmb3JtYW5jZU5vdyA9XG4gICAgcGVyZm9ybWFuY2Uubm93IHx8XG4gICAgcGVyZm9ybWFuY2UubW96Tm93IHx8XG4gICAgcGVyZm9ybWFuY2UubXNOb3cgfHxcbiAgICBwZXJmb3JtYW5jZS5vTm93IHx8XG4gICAgcGVyZm9ybWFuY2Uud2Via2l0Tm93IHx8XG4gICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgIH1cblxuLy8gZ2VuZXJhdGUgdGltZXN0YW1wIG9yIGRlbHRhXG4vLyBzZWUgaHR0cDovL25vZGVqcy5vcmcvYXBpL3Byb2Nlc3MuaHRtbCNwcm9jZXNzX3Byb2Nlc3NfaHJ0aW1lXG5mdW5jdGlvbiBocnRpbWUocHJldmlvdXNUaW1lc3RhbXApIHtcbiAgICB2YXIgY2xvY2t0aW1lID0gcGVyZm9ybWFuY2VOb3cuY2FsbChwZXJmb3JtYW5jZSkgKiAxZS0zXG4gICAgdmFyIHNlY29uZHMgPSBNYXRoLmZsb29yKGNsb2NrdGltZSlcbiAgICB2YXIgbmFub3NlY29uZHMgPSBNYXRoLmZsb29yKChjbG9ja3RpbWUgJSAxKSAqIDFlOSlcbiAgICBpZiAocHJldmlvdXNUaW1lc3RhbXApIHtcbiAgICAgICAgc2Vjb25kcyA9IHNlY29uZHMgLSBwcmV2aW91c1RpbWVzdGFtcFswXVxuICAgICAgICBuYW5vc2Vjb25kcyA9IG5hbm9zZWNvbmRzIC0gcHJldmlvdXNUaW1lc3RhbXBbMV1cbiAgICAgICAgaWYgKG5hbm9zZWNvbmRzIDwgMCkge1xuICAgICAgICAgICAgc2Vjb25kcy0tXG4gICAgICAgICAgICBuYW5vc2Vjb25kcyArPSAxZTlcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gW3NlY29uZHMsIG5hbm9zZWNvbmRzXVxufVxuXG52YXIgc3RhcnRUaW1lID0gbmV3IERhdGUoKVxuZnVuY3Rpb24gdXB0aW1lKCkge1xuICAgIHZhciBjdXJyZW50VGltZSA9IG5ldyBEYXRlKClcbiAgICB2YXIgZGlmID0gY3VycmVudFRpbWUgLSBzdGFydFRpbWVcbiAgICByZXR1cm4gZGlmIC8gMTAwMFxufVxuXG5leHBvcnQgdmFyIHByb2Nlc3MgPSB7XG4gICAgbmV4dFRpY2s6IG5leHRUaWNrLFxuICAgIHRpdGxlOiB0aXRsZSxcbiAgICBicm93c2VyOiBicm93c2VyLFxuICAgIGVudjogZW52LFxuICAgIGFyZ3Y6IGFyZ3YsXG4gICAgdmVyc2lvbjogdmVyc2lvbixcbiAgICB2ZXJzaW9uczogdmVyc2lvbnMsXG4gICAgb246IG9uLFxuICAgIGFkZExpc3RlbmVyOiBhZGRMaXN0ZW5lcixcbiAgICBvbmNlOiBvbmNlLFxuICAgIG9mZjogb2ZmLFxuICAgIHJlbW92ZUxpc3RlbmVyOiByZW1vdmVMaXN0ZW5lcixcbiAgICByZW1vdmVBbGxMaXN0ZW5lcnM6IHJlbW92ZUFsbExpc3RlbmVycyxcbiAgICBlbWl0OiBlbWl0LFxuICAgIGJpbmRpbmc6IGJpbmRpbmcsXG4gICAgY3dkOiBjd2QsXG4gICAgY2hkaXI6IGNoZGlyLFxuICAgIHVtYXNrOiB1bWFzayxcbiAgICBocnRpbWU6IGhydGltZSxcbiAgICBwbGF0Zm9ybTogcGxhdGZvcm0sXG4gICAgcmVsZWFzZTogcmVsZWFzZSxcbiAgICBjb25maWc6IGNvbmZpZyxcbiAgICB1cHRpbWU6IHVwdGltZSxcbn1cblxuLy8gcmVwbGFjZSBwcm9jZXNzLmVudi5WQVIgd2l0aCBkZWZpbmVcblxuY29uc3QgZGVmaW5lcyA9IHt9XG5PYmplY3Qua2V5cyhkZWZpbmVzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBjb25zdCBzZWdzID0ga2V5LnNwbGl0KCcuJylcbiAgICBsZXQgdGFyZ2V0ID0gcHJvY2Vzc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2Vncy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzZWcgPSBzZWdzW2ldXG4gICAgICAgIGlmIChpID09PSBzZWdzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHRhcmdldFtzZWddID0gZGVmaW5lc1trZXldXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXRbc2VnXSB8fCAodGFyZ2V0W3NlZ10gPSB7fSlcbiAgICAgICAgfVxuICAgIH1cbn0pXG4iLCAiLy8gdGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vY2FsdmlubWV0Y2FsZi9idWZmZXItZXM2XG5cbi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG52YXIgaW5pdGVkID0gZmFsc2VcbmZ1bmN0aW9uIGluaXQoKSB7XG4gICAgaW5pdGVkID0gdHJ1ZVxuICAgIHZhciBjb2RlID1cbiAgICAgICAgJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgbG9va3VwW2ldID0gY29kZVtpXVxuICAgICAgICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbiAgICB9XG5cbiAgICByZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbiAgICByZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcbn1cblxuZnVuY3Rpb24gYmFzZTY0dG9CeXRlQXJyYXkoYjY0KSB7XG4gICAgaWYgKCFpbml0ZWQpIHtcbiAgICAgICAgaW5pdCgpXG4gICAgfVxuICAgIHZhciBpLCBqLCBsLCB0bXAsIHBsYWNlSG9sZGVycywgYXJyXG4gICAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICAgIGlmIChsZW4gJSA0ID4gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICAgIH1cblxuICAgIC8vIHRoZSBudW1iZXIgb2YgZXF1YWwgc2lnbnMgKHBsYWNlIGhvbGRlcnMpXG4gICAgLy8gaWYgdGhlcmUgYXJlIHR3byBwbGFjZWhvbGRlcnMsIHRoYW4gdGhlIHR3byBjaGFyYWN0ZXJzIGJlZm9yZSBpdFxuICAgIC8vIHJlcHJlc2VudCBvbmUgYnl0ZVxuICAgIC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lLCB0aGVuIHRoZSB0aHJlZSBjaGFyYWN0ZXJzIGJlZm9yZSBpdCByZXByZXNlbnQgMiBieXRlc1xuICAgIC8vIHRoaXMgaXMganVzdCBhIGNoZWFwIGhhY2sgdG8gbm90IGRvIGluZGV4T2YgdHdpY2VcbiAgICBwbGFjZUhvbGRlcnMgPSBiNjRbbGVuIC0gMl0gPT09ICc9JyA/IDIgOiBiNjRbbGVuIC0gMV0gPT09ICc9JyA/IDEgOiAwXG5cbiAgICAvLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbiAgICBhcnIgPSBuZXcgQXJyKChsZW4gKiAzKSAvIDQgLSBwbGFjZUhvbGRlcnMpXG5cbiAgICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gICAgbCA9IHBsYWNlSG9sZGVycyA+IDAgPyBsZW4gLSA0IDogbGVuXG5cbiAgICB2YXIgTCA9IDBcblxuICAgIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbDsgaSArPSA0LCBqICs9IDMpIHtcbiAgICAgICAgdG1wID1cbiAgICAgICAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAgICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgICAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICAgICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgICAgICBhcnJbTCsrXSA9ICh0bXAgPj4gMTYpICYgMHhmZlxuICAgICAgICBhcnJbTCsrXSA9ICh0bXAgPj4gOCkgJiAweGZmXG4gICAgICAgIGFycltMKytdID0gdG1wICYgMHhmZlxuICAgIH1cblxuICAgIGlmIChwbGFjZUhvbGRlcnMgPT09IDIpIHtcbiAgICAgICAgdG1wID1cbiAgICAgICAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgICAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgICAgICBhcnJbTCsrXSA9IHRtcCAmIDB4ZmZcbiAgICB9IGVsc2UgaWYgKHBsYWNlSG9sZGVycyA9PT0gMSkge1xuICAgICAgICB0bXAgPVxuICAgICAgICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgICAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAgICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICAgICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhmZlxuICAgICAgICBhcnJbTCsrXSA9IHRtcCAmIDB4ZmZcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NChudW0pIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBsb29rdXBbKG51bSA+PiAxOCkgJiAweDNmXSArXG4gICAgICAgIGxvb2t1cFsobnVtID4+IDEyKSAmIDB4M2ZdICtcbiAgICAgICAgbG9va3VwWyhudW0gPj4gNikgJiAweDNmXSArXG4gICAgICAgIGxvb2t1cFtudW0gJiAweDNmXVxuICAgIClcbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgdG1wXG4gICAgdmFyIG91dHB1dCA9IFtdXG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICAgICAgdG1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyB1aW50OFtpICsgMl1cbiAgICAgICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gYmFzZTY0ZnJvbUJ5dGVBcnJheSh1aW50OCkge1xuICAgIGlmICghaW5pdGVkKSB7XG4gICAgICAgIGluaXQoKVxuICAgIH1cbiAgICB2YXIgdG1wXG4gICAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICAgIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICAgIHZhciBvdXRwdXQgPSAnJ1xuICAgIHZhciBwYXJ0cyA9IFtdXG4gICAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgICAgICBwYXJ0cy5wdXNoKFxuICAgICAgICAgICAgZW5jb2RlQ2h1bmsoXG4gICAgICAgICAgICAgICAgdWludDgsXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBpICsgbWF4Q2h1bmtMZW5ndGggPiBsZW4yID8gbGVuMiA6IGkgKyBtYXhDaHVua0xlbmd0aCxcbiAgICAgICAgICAgICksXG4gICAgICAgIClcbiAgICB9XG5cbiAgICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gICAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICAgICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICAgICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMl1cbiAgICAgICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDQpICYgMHgzZl1cbiAgICAgICAgb3V0cHV0ICs9ICc9PSdcbiAgICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICAgICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICAgICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMTBdXG4gICAgICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M2ZdXG4gICAgICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M2ZdXG4gICAgICAgIG91dHB1dCArPSAnPSdcbiAgICB9XG5cbiAgICBwYXJ0cy5wdXNoKG91dHB1dClcblxuICAgIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuXG52YXIgSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9XG4gICAgZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZCA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUIDogdHJ1ZVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoKCkge1xuICAgIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA/IDB4N2ZmZmZmZmYgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpIHtcbiAgICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gICAgfVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgICAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICAgICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICAgICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgICAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgICAgICB9XG4gICAgICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gICAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICAgIH1cblxuICAgIC8vIENvbW1vbiBjYXNlLlxuICAgIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJyxcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICAgIH1cbiAgICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24oYXJyKSB7XG4gICAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20odGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gICAgfVxuXG4gICAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICAgIGlmIChcbiAgICAgICAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyXG4gICAgKSB7XG4gICAgICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgICAgIC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICAgIC8vICAgdmFsdWU6IG51bGwsXG4gICAgICAgIC8vICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIC8vIH0pXG4gICAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplKHNpemUpIHtcbiAgICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICAgIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gICAgYXNzZXJ0U2l6ZShzaXplKVxuICAgIGlmIChzaXplIDw9IDApIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICAgIH1cbiAgICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAgICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgICAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgICAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gICAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSh0aGF0LCBzaXplKSB7XG4gICAgYXNzZXJ0U2l6ZShzaXplKVxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gICAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgICAgICAgdGhhdFtpXSA9IDBcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24oc2l6ZSkge1xuICAgIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfVxuXG4gICAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICAgIH1cblxuICAgIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gICAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICAgIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgICAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAgICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAgICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgICB9XG5cbiAgICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gICAgfVxuICAgIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlcih0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCInb2Zmc2V0JyBpcyBvdXQgb2YgYm91bmRzXCIpXG4gICAgfVxuXG4gICAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIidsZW5ndGgnIGlzIG91dCBvZiBib3VuZHNcIilcbiAgICB9XG5cbiAgICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gICAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgICB9XG5cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAgICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgICAgIHRoYXQgPSBhcnJheVxuICAgICAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICAgIH1cbiAgICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0KHRoYXQsIG9iaikge1xuICAgIGlmIChpbnRlcm5hbElzQnVmZmVyKG9iaikpIHtcbiAgICAgICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoYXRcbiAgICAgICAgfVxuXG4gICAgICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBpZiAob2JqKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fFxuICAgICAgICAgICAgJ2xlbmd0aCcgaW4gb2JqXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nLFxuICAgIClcbn1cblxuZnVuY3Rpb24gY2hlY2tlZChsZW5ndGgpIHtcbiAgICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICAgICAgICdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICdzaXplOiAweCcgK1xuICAgICAgICAgICAgICAgIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgK1xuICAgICAgICAgICAgICAgICcgYnl0ZXMnLFxuICAgICAgICApXG4gICAgfVxuICAgIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTbG93QnVmZmVyKGxlbmd0aCkge1xuICAgIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICBsZW5ndGggPSAwXG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cbkJ1ZmZlci5pc0J1ZmZlciA9IGlzQnVmZmVyXG5mdW5jdGlvbiBpbnRlcm5hbElzQnVmZmVyKGIpIHtcbiAgICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICAgIGlmICghaW50ZXJuYWxJc0J1ZmZlcihhKSB8fCAhaW50ZXJuYWxJc0J1ZmZlcihiKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgICB9XG5cbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICAgIHZhciB4ID0gYS5sZW5ndGhcbiAgICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgICAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgICAgICAgeCA9IGFbaV1cbiAgICAgICAgICAgIHkgPSBiW2ldXG4gICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgICBpZiAoeSA8IHgpIHJldHVybiAxXG4gICAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nKGVuY29kaW5nKSB7XG4gICAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgY2FzZSAndXRmOCc6XG4gICAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICBjYXNlICd1Y3MyJzpcbiAgICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChsaXN0LCBsZW5ndGgpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG5cbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICAgIH1cblxuICAgIHZhciBpXG4gICAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxlbmd0aCA9IDBcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gICAgdmFyIHBvcyA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgICAgICBpZiAoIWludGVybmFsSXNCdWZmZXIoYnVmKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICAgICAgfVxuICAgICAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICAgICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgICBpZiAoaW50ZXJuYWxJc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gICAgfVxuICAgIGlmIChcbiAgICAgICAgdHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcilcbiAgICApIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICAgIH1cblxuICAgIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gICAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAgIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICAgIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gICAgZm9yICg7Oykge1xuICAgICAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICAgICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVuXG4gICAgICAgICAgICBjYXNlICd1dGY4JzpcbiAgICAgICAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgICAgICAgY2FzZSAndWNzMic6XG4gICAgICAgICAgICBjYXNlICd1Y3MtMic6XG4gICAgICAgICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgICAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICAgICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgICAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgICAgICB9XG4gICAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyhlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICAgIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gICAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gICAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAgIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gICAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gICAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gMFxuICAgIH1cbiAgICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAgIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gICAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuICcnXG4gICAgfVxuXG4gICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuXG4gICAgaWYgKGVuZCA8PSAwKSB7XG4gICAgICAgIHJldHVybiAnJ1xuICAgIH1cblxuICAgIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gICAgZW5kID4+Pj0gMFxuICAgIHN0YXJ0ID4+Pj0gMFxuXG4gICAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgICAgICByZXR1cm4gJydcbiAgICB9XG5cbiAgICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgICAgICAgY2FzZSAndXRmOCc6XG4gICAgICAgICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICAgICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgICAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgICAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgICAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICAgICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmIChsb3dlcmVkQ2FzZSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICAgICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcChiLCBuLCBtKSB7XG4gICAgdmFyIGkgPSBiW25dXG4gICAgYltuXSA9IGJbbV1cbiAgICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNigpIHtcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyKCkge1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICAgIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICAgICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICAgICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0KCkge1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICAgIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICAgICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICAgICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgICAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gICAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzKGIpIHtcbiAgICBpZiAoIWludGVybmFsSXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICAgIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUoXG4gICAgdGFyZ2V0LFxuICAgIHN0YXJ0LFxuICAgIGVuZCxcbiAgICB0aGlzU3RhcnQsXG4gICAgdGhpc0VuZCxcbikge1xuICAgIGlmICghaW50ZXJuYWxJc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICAgIH1cblxuICAgIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN0YXJ0ID0gMFxuICAgIH1cbiAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgICB9XG4gICAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXNTdGFydCA9IDBcbiAgICB9XG4gICAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAgIHN0YXJ0IDwgMCB8fFxuICAgICAgICBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8XG4gICAgICAgIHRoaXNTdGFydCA8IDAgfHxcbiAgICAgICAgdGhpc0VuZCA+IHRoaXMubGVuZ3RoXG4gICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICAgIH1cblxuICAgIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICAgICAgcmV0dXJuIDBcbiAgICB9XG4gICAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgICAgIHJldHVybiAxXG4gICAgfVxuXG4gICAgc3RhcnQgPj4+PSAwXG4gICAgZW5kID4+Pj0gMFxuICAgIHRoaXNTdGFydCA+Pj49IDBcbiAgICB0aGlzRW5kID4+Pj0gMFxuXG4gICAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICAgIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICAgIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICAgIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICAgIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICAgICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gICAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICAgIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICAgIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgICAgIGJ5dGVPZmZzZXQgPSAwXG4gICAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgICAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICAgIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICAgIH1cbiAgICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogYnVmZmVyLmxlbmd0aCAtIDFcbiAgICB9XG5cbiAgICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICAgIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gICAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICAgICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgICAgIGVsc2UgcmV0dXJuIC0xXG4gICAgfVxuXG4gICAgLy8gTm9ybWFsaXplIHZhbFxuICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICAgIH1cblxuICAgIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gICAgaWYgKGludGVybmFsSXNCdWZmZXIodmFsKSkge1xuICAgICAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gLTFcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFsID0gdmFsICYgMHhmZiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKFxuICAgICAgICAgICAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgICAgICAgICAgYnl0ZU9mZnNldCxcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKFxuICAgICAgICAgICAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgICAgICAgICAgYnl0ZU9mZnNldCxcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFt2YWxdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICAgIH1cblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZihhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAgIHZhciBpbmRleFNpemUgPSAxXG4gICAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgZW5jb2RpbmcgPT09ICd1Y3MyJyB8fFxuICAgICAgICAgICAgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHxcbiAgICAgICAgICAgIGVuY29kaW5nID09PSAndXRmLTE2bGUnXG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbmRleFNpemUgPSAyXG4gICAgICAgICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgICAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVhZChidWYsIGkpIHtcbiAgICAgICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpXG4gICAgaWYgKGRpcikge1xuICAgICAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHJlYWQoYXJyLCBpKSA9PT1cbiAgICAgICAgICAgICAgICByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgICAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKVxuICAgICAgICAgICAgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgICAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXModmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICAgIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICAgIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICAgIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICAgIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICAgICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICAgIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gICAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgICAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICAgICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICAgIH1cbiAgICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJsaXRCdWZmZXIoXG4gICAgICAgIHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksXG4gICAgICAgIGJ1ZixcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBsZW5ndGgsXG4gICAgKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBibGl0QnVmZmVyKFxuICAgICAgICB1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLFxuICAgICAgICBidWYsXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgbGVuZ3RoLFxuICAgIClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gICAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICAgICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICAgICAgb2Zmc2V0ID0gMFxuICAgICAgICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgICAgIG9mZnNldCA9IDBcbiAgICAgICAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgICAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICAgICAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCcsXG4gICAgICAgIClcbiAgICB9XG5cbiAgICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICAgIGlmIChcbiAgICAgICAgKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fFxuICAgICAgICBvZmZzZXQgPiB0aGlzLmxlbmd0aFxuICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICAgIH1cblxuICAgIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICAgIGZvciAoOzspIHtcbiAgICAgICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgICAgICAgY2FzZSAndXRmOCc6XG4gICAgICAgICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICAgICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgICAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgICAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgICAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgICAgICAgY2FzZSAndWNzMic6XG4gICAgICAgICAgICBjYXNlICd1Y3MtMic6XG4gICAgICAgICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgICAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaWYgKGxvd2VyZWRDYXNlKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgICAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgICAgICB9XG4gICAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICAgICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApLFxuICAgIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UoYnVmLCBzdGFydCwgZW5kKSB7XG4gICAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gYmFzZTY0ZnJvbUJ5dGVBcnJheShidWYpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGJhc2U2NGZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICAgIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICAgIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgICB2YXIgcmVzID0gW11cblxuICAgIHZhciBpID0gc3RhcnRcbiAgICB3aGlsZSAoaSA8IGVuZCkge1xuICAgICAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgICAgIHZhciBieXRlc1BlclNlcXVlbmNlID1cbiAgICAgICAgICAgIGZpcnN0Qnl0ZSA+IDB4ZWZcbiAgICAgICAgICAgICAgICA/IDRcbiAgICAgICAgICAgICAgICA6IGZpcnN0Qnl0ZSA+IDB4ZGZcbiAgICAgICAgICAgICAgICA/IDNcbiAgICAgICAgICAgICAgICA6IGZpcnN0Qnl0ZSA+IDB4YmZcbiAgICAgICAgICAgICAgICA/IDJcbiAgICAgICAgICAgICAgICA6IDFcblxuICAgICAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICAgICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgICAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgICAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweGMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChmaXJzdEJ5dGUgJiAweDFmKSA8PCAweDYpIHwgKHNlY29uZEJ5dGUgJiAweDNmKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgICAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIChzZWNvbmRCeXRlICYgMHhjMCkgPT09IDB4ODAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlyZEJ5dGUgJiAweGMwKSA9PT0gMHg4MFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZmlyc3RCeXRlICYgMHhmKSA8PCAweGMpIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKHNlY29uZEJ5dGUgJiAweDNmKSA8PCAweDYpIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcmRCeXRlICYgMHgzZilcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID4gMHg3ZmYgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGVtcENvZGVQb2ludCA8IDB4ZDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhkZmZmKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgICAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIChzZWNvbmRCeXRlICYgMHhjMCkgPT09IDB4ODAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlyZEJ5dGUgJiAweGMwKSA9PT0gMHg4MCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKGZvdXJ0aEJ5dGUgJiAweGMwKSA9PT0gMHg4MFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZmlyc3RCeXRlICYgMHhmKSA8PCAweDEyKSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChzZWNvbmRCeXRlICYgMHgzZikgPDwgMHhjKSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCh0aGlyZEJ5dGUgJiAweDNmKSA8PCAweDYpIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZm91cnRoQnl0ZSAmIDB4M2YpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcENvZGVQb2ludCA+IDB4ZmZmZiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMFxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAgICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICAgICAgICBjb2RlUG9pbnQgPSAweGZmZmRcbiAgICAgICAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhmZmZmKSB7XG4gICAgICAgICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgICAgICAgIHJlcy5wdXNoKCgoY29kZVBvaW50ID4+PiAxMCkgJiAweDNmZikgfCAweGQ4MDApXG4gICAgICAgICAgICBjb2RlUG9pbnQgPSAweGRjMDAgfCAoY29kZVBvaW50ICYgMHgzZmYpXG4gICAgICAgIH1cblxuICAgICAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICAgIH1cblxuICAgIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkoY29kZVBvaW50cykge1xuICAgIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICAgIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gICAgfVxuXG4gICAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICAgIHZhciByZXMgPSAnJ1xuICAgIHZhciBpID0gMFxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgICAgICAgU3RyaW5nLFxuICAgICAgICAgICAgY29kZVBvaW50cy5zbGljZShpLCAoaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkpLFxuICAgICAgICApXG4gICAgfVxuICAgIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZShidWYsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgcmV0ID0gJydcbiAgICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdmKVxuICAgIH1cbiAgICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICAgIHZhciByZXQgPSAnJ1xuICAgIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgICB9XG4gICAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZShidWYsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gICAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICAgIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICAgIHZhciBvdXQgPSAnJ1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gICAgfVxuICAgIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICAgIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICAgIHZhciByZXMgPSAnJ1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gICAgfVxuICAgIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgICBzdGFydCA9IH5+c3RhcnRcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ICs9IGxlblxuICAgICAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgICAgIHN0YXJ0ID0gbGVuXG4gICAgfVxuXG4gICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlblxuICAgICAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICAgIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgICAgIGVuZCA9IGxlblxuICAgIH1cblxuICAgIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAgIHZhciBuZXdCdWZcbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAgICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgICAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICAgICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gICAgaWYgKG9mZnNldCAlIDEgIT09IDAgfHwgb2Zmc2V0IDwgMClcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gICAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aClcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFKFxuICAgIG9mZnNldCxcbiAgICBieXRlTGVuZ3RoLFxuICAgIG5vQXNzZXJ0LFxuKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gICAgdmFyIG11bCA9IDFcbiAgICB2YXIgaSA9IDBcbiAgICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgICAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICAgIH1cblxuICAgIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRShcbiAgICBvZmZzZXQsXG4gICAgYnl0ZUxlbmd0aCxcbiAgICBub0Fzc2VydCxcbikge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gICAgfVxuXG4gICAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICAgIHZhciBtdWwgPSAxXG4gICAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4KG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICAgIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUob2Zmc2V0LCBub0Fzc2VydCkge1xuICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gICAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICAgIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRShvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICAgIHJldHVybiAoXG4gICAgICAgICh0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8ICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgICB0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwXG4gICAgKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRShvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICAgIHJldHVybiAoXG4gICAgICAgIHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCArXG4gICAgICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfCAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgM10pXG4gICAgKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRShvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gICAgdmFyIG11bCA9IDFcbiAgICB2YXIgaSA9IDBcbiAgICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgICAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICAgIH1cbiAgICBtdWwgKj0gMHg4MFxuXG4gICAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICAgIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gICAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gICAgdmFyIG11bCA9IDFcbiAgICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gICAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgICB9XG4gICAgbXVsICo9IDB4ODBcblxuICAgIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuIHRoaXNbb2Zmc2V0XVxuICAgIHJldHVybiAoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICAgIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICAgIHJldHVybiB2YWwgJiAweDgwMDAgPyB2YWwgfCAweGZmZmYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRShvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgICByZXR1cm4gdmFsICYgMHg4MDAwID8gdmFsIHwgMHhmZmZmMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUob2Zmc2V0LCBub0Fzc2VydCkge1xuICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgICByZXR1cm4gKFxuICAgICAgICB0aGlzW29mZnNldF0gfFxuICAgICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxuICAgIClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgICAgIHRoaXNbb2Zmc2V0ICsgM11cbiAgICApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRShvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgICByZXR1cm4gaWVlZTc1NHJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICAgIHJldHVybiBpZWVlNzU0cmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUob2Zmc2V0LCBub0Fzc2VydCkge1xuICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gICAgcmV0dXJuIGllZWU3NTRyZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICAgIHJldHVybiBpZWVlNzU0cmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gICAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKGJ1ZikpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gICAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKVxuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICAgIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFKFxuICAgIHZhbHVlLFxuICAgIG9mZnNldCxcbiAgICBieXRlTGVuZ3RoLFxuICAgIG5vQXNzZXJ0LFxuKSB7XG4gICAgdmFsdWUgPSArdmFsdWVcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gICAgaWYgKCFub0Fzc2VydCkge1xuICAgICAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICAgIH1cblxuICAgIHZhciBtdWwgPSAxXG4gICAgdmFyIGkgPSAwXG4gICAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweGZmXG4gICAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICAgICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweGZmXG4gICAgfVxuXG4gICAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFKFxuICAgIHZhbHVlLFxuICAgIG9mZnNldCxcbiAgICBieXRlTGVuZ3RoLFxuICAgIG5vQXNzZXJ0LFxuKSB7XG4gICAgdmFsdWUgPSArdmFsdWVcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gICAgaWYgKCFub0Fzc2VydCkge1xuICAgICAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICAgIH1cblxuICAgIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgICB2YXIgbXVsID0gMVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4ZmZcbiAgICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICAgICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweGZmXG4gICAgfVxuXG4gICAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICAgIHZhbHVlID0gK3ZhbHVlXG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gICAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhmZlxuICAgIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2KGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9XG4gICAgICAgICAgICAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgICAgICAgKChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOClcbiAgICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUoXG4gICAgdmFsdWUsXG4gICAgb2Zmc2V0LFxuICAgIG5vQXNzZXJ0LFxuKSB7XG4gICAgdmFsdWUgPSArdmFsdWVcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgICAgICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4ZmZcbiAgICAgICAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlID4+PiA4XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRShcbiAgICB2YWx1ZSxcbiAgICBvZmZzZXQsXG4gICAgbm9Bc3NlcnQsXG4pIHtcbiAgICB2YWx1ZSA9ICt2YWx1ZVxuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlID4+PiA4XG4gICAgICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSB2YWx1ZSAmIDB4ZmZcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkpICYgMHhmZlxuICAgIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRShcbiAgICB2YWx1ZSxcbiAgICBvZmZzZXQsXG4gICAgbm9Bc3NlcnQsXG4pIHtcbiAgICB2YWx1ZSA9ICt2YWx1ZVxuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgICAgICB0aGlzW29mZnNldCArIDNdID0gdmFsdWUgPj4+IDI0XG4gICAgICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSB2YWx1ZSA+Pj4gMTZcbiAgICAgICAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlID4+PiA4XG4gICAgICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhmZlxuICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUoXG4gICAgdmFsdWUsXG4gICAgb2Zmc2V0LFxuICAgIG5vQXNzZXJ0LFxuKSB7XG4gICAgdmFsdWUgPSArdmFsdWVcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAgICAgdGhpc1tvZmZzZXRdID0gdmFsdWUgPj4+IDI0XG4gICAgICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSB2YWx1ZSA+Pj4gMTZcbiAgICAgICAgdGhpc1tvZmZzZXQgKyAyXSA9IHZhbHVlID4+PiA4XG4gICAgICAgIHRoaXNbb2Zmc2V0ICsgM10gPSB2YWx1ZSAmIDB4ZmZcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRShcbiAgICB2YWx1ZSxcbiAgICBvZmZzZXQsXG4gICAgYnl0ZUxlbmd0aCxcbiAgICBub0Fzc2VydCxcbikge1xuICAgIHZhbHVlID0gK3ZhbHVlXG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmICghbm9Bc3NlcnQpIHtcbiAgICAgICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICAgIH1cblxuICAgIHZhciBpID0gMFxuICAgIHZhciBtdWwgPSAxXG4gICAgdmFyIHN1YiA9IDBcbiAgICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4ZmZcbiAgICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgICAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgICAgICAgc3ViID0gMVxuICAgICAgICB9XG4gICAgICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIpICYgMHhmZlxuICAgIH1cblxuICAgIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUoXG4gICAgdmFsdWUsXG4gICAgb2Zmc2V0LFxuICAgIGJ5dGVMZW5ndGgsXG4gICAgbm9Bc3NlcnQsXG4pIHtcbiAgICB2YWx1ZSA9ICt2YWx1ZVxuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgICAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgICB9XG5cbiAgICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gICAgdmFyIG11bCA9IDFcbiAgICB2YXIgc3ViID0gMFxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4ZmZcbiAgICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICAgICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgICAgICAgIHN1YiA9IDFcbiAgICAgICAgfVxuICAgICAgICB0aGlzW29mZnNldCArIGldID0gKCgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViKSAmIDB4ZmZcbiAgICB9XG5cbiAgICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICAgIHZhbHVlID0gK3ZhbHVlXG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICAgIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4ZmZcbiAgICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICAgIHZhbHVlID0gK3ZhbHVlXG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAgICAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweGZmXG4gICAgICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSB2YWx1ZSA+Pj4gOFxuICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgdmFsdWUgPSArdmFsdWVcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgICAgICB0aGlzW29mZnNldF0gPSB2YWx1ZSA+Pj4gOFxuICAgICAgICB0aGlzW29mZnNldCArIDFdID0gdmFsdWUgJiAweGZmXG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gICAgdmFsdWUgPSArdmFsdWVcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhmZlxuICAgICAgICB0aGlzW29mZnNldCArIDFdID0gdmFsdWUgPj4+IDhcbiAgICAgICAgdGhpc1tvZmZzZXQgKyAyXSA9IHZhbHVlID4+PiAxNlxuICAgICAgICB0aGlzW29mZnNldCArIDNdID0gdmFsdWUgPj4+IDI0XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICB2YWx1ZSA9ICt2YWx1ZVxuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAgICAgdGhpc1tvZmZzZXRdID0gdmFsdWUgPj4+IDI0XG4gICAgICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSB2YWx1ZSA+Pj4gMTZcbiAgICAgICAgdGhpc1tvZmZzZXQgKyAyXSA9IHZhbHVlID4+PiA4XG4gICAgICAgIHRoaXNbb2Zmc2V0ICsgM10gPSB2YWx1ZSAmIDB4ZmZcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICAgIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gICAgaWYgKCFub0Fzc2VydCkge1xuICAgICAgICBjaGVja0lFRUU3NTQoXG4gICAgICAgICAgICBidWYsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAzLjQwMjgyMzQ2NjM4NTI4ODZlMzgsXG4gICAgICAgICAgICAtMy40MDI4MjM0NjYzODUyODg2ZTM4LFxuICAgICAgICApXG4gICAgfVxuICAgIGllZWU3NTR3cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gICAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICAgIGlmICghbm9Bc3NlcnQpIHtcbiAgICAgICAgY2hlY2tJRUVFNzU0KFxuICAgICAgICAgICAgYnVmLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBvZmZzZXQsXG4gICAgICAgICAgICA4LFxuICAgICAgICAgICAgMS43OTc2OTMxMzQ4NjIzMTU3ZTMwOCxcbiAgICAgICAgICAgIC0xLjc5NzY5MzEzNDg2MjMxNTdlMzA4LFxuICAgICAgICApXG4gICAgfVxuICAgIGllZWU3NTR3cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gICAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRShcbiAgICB2YWx1ZSxcbiAgICBvZmZzZXQsXG4gICAgbm9Bc3NlcnQsXG4pIHtcbiAgICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUoXG4gICAgdmFsdWUsXG4gICAgb2Zmc2V0LFxuICAgIG5vQXNzZXJ0LFxuKSB7XG4gICAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gICAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gICAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAgIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICAgIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICAgIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gICAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICAgIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICAgIH1cbiAgICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKVxuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gICAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgICAvLyBBcmUgd2Ugb29iP1xuICAgIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICAgICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgICB9XG5cbiAgICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgICB2YXIgaVxuXG4gICAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgICAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAgICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgICAgICAgIHRhcmdldFN0YXJ0LFxuICAgICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAgIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICAgICAgICBzdGFydCA9IDBcbiAgICAgICAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICAgICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICAgICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICAgICAgICAgIHZhbCA9IGNvZGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHZhbCA9IHZhbCAmIDI1NVxuICAgIH1cblxuICAgIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICAgIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgICB9XG5cbiAgICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICAgIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgICB2YXIgaVxuICAgIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgICAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzW2ldID0gdmFsXG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYnl0ZXMgPSBpbnRlcm5hbElzQnVmZmVyKHZhbClcbiAgICAgICAgICAgID8gdmFsXG4gICAgICAgICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICAgICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuKHN0cikge1xuICAgIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICAgIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gICAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICAgICAgc3RyID0gc3RyICsgJz0nXG4gICAgfVxuICAgIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbShzdHIpIHtcbiAgICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXgobikge1xuICAgIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICAgIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyhzdHJpbmcsIHVuaXRzKSB7XG4gICAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICAgIHZhciBjb2RlUG9pbnRcbiAgICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICAgIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICAgIHZhciBieXRlcyA9IFtdXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAgICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhkN2ZmICYmIGNvZGVQb2ludCA8IDB4ZTAwMCkge1xuICAgICAgICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgICAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAgICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4ZGJmZikge1xuICAgICAgICAgICAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweGVmLCAweGJmLCAweGJkKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweGVmLCAweGJmLCAweGJkKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICAgICAgICBpZiAoY29kZVBvaW50IDwgMHhkYzAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4ZWYsIDB4YmYsIDB4YmQpXG4gICAgICAgICAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICAgICAgICBjb2RlUG9pbnQgPVxuICAgICAgICAgICAgICAgICgoKGxlYWRTdXJyb2dhdGUgLSAweGQ4MDApIDw8IDEwKSB8IChjb2RlUG9pbnQgLSAweGRjMDApKSArXG4gICAgICAgICAgICAgICAgMHgxMDAwMFxuICAgICAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweGVmLCAweGJmLCAweGJkKVxuICAgICAgICB9XG5cbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgICAgICAvLyBlbmNvZGUgdXRmOFxuICAgICAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICAgICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICAgICAgICBieXRlcy5wdXNoKChjb2RlUG9pbnQgPj4gMHg2KSB8IDB4YzAsIChjb2RlUG9pbnQgJiAweDNmKSB8IDB4ODApXG4gICAgICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICAgICAgICBieXRlcy5wdXNoKFxuICAgICAgICAgICAgICAgIChjb2RlUG9pbnQgPj4gMHhjKSB8IDB4ZTAsXG4gICAgICAgICAgICAgICAgKChjb2RlUG9pbnQgPj4gMHg2KSAmIDB4M2YpIHwgMHg4MCxcbiAgICAgICAgICAgICAgICAoY29kZVBvaW50ICYgMHgzZikgfCAweDgwLFxuICAgICAgICAgICAgKVxuICAgICAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgICAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgICAgICAgICAgKGNvZGVQb2ludCA+PiAweDEyKSB8IDB4ZjAsXG4gICAgICAgICAgICAgICAgKChjb2RlUG9pbnQgPj4gMHhjKSAmIDB4M2YpIHwgMHg4MCxcbiAgICAgICAgICAgICAgICAoKGNvZGVQb2ludCA+PiAweDYpICYgMHgzZikgfCAweDgwLFxuICAgICAgICAgICAgICAgIChjb2RlUG9pbnQgJiAweDNmKSB8IDB4ODAsXG4gICAgICAgICAgICApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzKHN0cikge1xuICAgIHZhciBieXRlQXJyYXkgPSBbXVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgICAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmYpXG4gICAgfVxuICAgIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMoc3RyLCB1bml0cykge1xuICAgIHZhciBjLCBoaSwgbG9cbiAgICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgICAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICAgICAgaGkgPSBjID4+IDhcbiAgICAgICAgbG8gPSBjICUgMjU2XG4gICAgICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgICAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgICB9XG5cbiAgICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMoc3RyKSB7XG4gICAgcmV0dXJuIGJhc2U2NHRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoIHx8IGkgPj0gc3JjLmxlbmd0aCkgYnJlYWtcbiAgICAgICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gICAgfVxuICAgIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuKHZhbCkge1xuICAgIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vLyB0aGUgZm9sbG93aW5nIGlzIGZyb20gaXMtYnVmZmVyLCBhbHNvIGJ5IEZlcm9zcyBBYm91a2hhZGlqZWggYW5kIHdpdGggc2FtZSBsaXNlbmNlXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5mdW5jdGlvbiBpc0J1ZmZlcihvYmopIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBvYmogIT0gbnVsbCAmJlxuICAgICAgICAoISFvYmouX2lzQnVmZmVyIHx8IGlzRmFzdEJ1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopKVxuICAgIClcbn1cblxuZnVuY3Rpb24gaXNGYXN0QnVmZmVyKG9iaikge1xuICAgIHJldHVybiAoXG4gICAgICAgICEhb2JqLmNvbnN0cnVjdG9yICYmXG4gICAgICAgIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbiAgICApXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIob2JqKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgIGlzRmFzdEJ1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG4gICAgKVxufVxuXG5mdW5jdGlvbiBpZWVlNzU0cmVhZChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gICAgdmFyIGUsIG1cbiAgICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICAgIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gICAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gICAgdmFyIG5CaXRzID0gLTdcbiAgICB2YXIgaSA9IGlzTEUgPyBuQnl0ZXMgLSAxIDogMFxuICAgIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICAgIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgICBpICs9IGRcblxuICAgIGUgPSBzICYgKCgxIDw8IC1uQml0cykgLSAxKVxuICAgIHMgPj49IC1uQml0c1xuICAgIG5CaXRzICs9IGVMZW5cbiAgICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gICAgbSA9IGUgJiAoKDEgPDwgLW5CaXRzKSAtIDEpXG4gICAgZSA+Pj0gLW5CaXRzXG4gICAgbkJpdHMgKz0gbUxlblxuICAgIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgICBpZiAoZSA9PT0gMCkge1xuICAgICAgICBlID0gMSAtIGVCaWFzXG4gICAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgICAgIHJldHVybiBtID8gTmFOIDogKHMgPyAtMSA6IDEpICogSW5maW5pdHlcbiAgICB9IGVsc2Uge1xuICAgICAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICAgIGUgPSBlIC0gZUJpYXNcbiAgICB9XG4gICAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZnVuY3Rpb24gaWVlZTc1NHdyaXRlKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gICAgdmFyIGUsIG0sIGNcbiAgICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICAgIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gICAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gICAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDBcbiAgICB2YXIgaSA9IGlzTEUgPyAwIDogbkJ5dGVzIC0gMVxuICAgIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICAgIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gICAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgICAgICAgIGUtLVxuICAgICAgICAgICAgYyAqPSAyXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICAgICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgICAgICAgZSsrXG4gICAgICAgICAgICBjIC89IDJcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgICAgICAgbSA9IDBcbiAgICAgICAgICAgIGUgPSBlTWF4XG4gICAgICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgICAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgICAgICAgZSA9IGUgKyBlQmlhc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICAgICAgICBlID0gMFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChcbiAgICAgICAgO1xuICAgICAgICBtTGVuID49IDg7XG4gICAgICAgIGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDhcbiAgICApIHt9XG5cbiAgICBlID0gKGUgPDwgbUxlbikgfCBtXG4gICAgZUxlbiArPSBtTGVuXG4gICAgZm9yIChcbiAgICAgICAgO1xuICAgICAgICBlTGVuID4gMDtcbiAgICAgICAgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOFxuICAgICkge31cblxuICAgIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwgImV4cG9ydCB7IEJ1ZmZlciB9IGZyb20gJ19ub2RlLWJ1ZmZlci1wb2x5ZmlsbF8uanMnXG4iLCAiLyohIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZSB2MS40LjEgYnkgQG1hdGhpYXMgKi9cblxuXG4vKiogSGlnaGVzdCBwb3NpdGl2ZSBzaWduZWQgMzItYml0IGZsb2F0IHZhbHVlICovXG52YXIgbWF4SW50ID0gMjE0NzQ4MzY0NzsgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxuXG4vKiogQm9vdHN0cmluZyBwYXJhbWV0ZXJzICovXG52YXIgYmFzZSA9IDM2O1xudmFyIHRNaW4gPSAxO1xudmFyIHRNYXggPSAyNjtcbnZhciBza2V3ID0gMzg7XG52YXIgZGFtcCA9IDcwMDtcbnZhciBpbml0aWFsQmlhcyA9IDcyO1xudmFyIGluaXRpYWxOID0gMTI4OyAvLyAweDgwXG52YXIgZGVsaW1pdGVyID0gJy0nOyAvLyAnXFx4MkQnXG5cbi8qKiBSZWd1bGFyIGV4cHJlc3Npb25zICovXG52YXIgcmVnZXhQdW55Y29kZSA9IC9eeG4tLS87XG52YXIgcmVnZXhOb25BU0NJSSA9IC9bXlxceDIwLVxceDdFXS87IC8vIHVucHJpbnRhYmxlIEFTQ0lJIGNoYXJzICsgbm9uLUFTQ0lJIGNoYXJzXG52YXIgcmVnZXhTZXBhcmF0b3JzID0gL1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZzsgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG4vKiogRXJyb3IgbWVzc2FnZXMgKi9cbnZhciBlcnJvcnMgPSB7XG4gICdvdmVyZmxvdyc6ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2VzcycsXG4gICdub3QtYmFzaWMnOiAnSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KScsXG4gICdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG59O1xuXG4vKiogQ29udmVuaWVuY2Ugc2hvcnRjdXRzICovXG52YXIgYmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuLyoqXG4gKiBBIGdlbmVyaWMgZXJyb3IgdXRpbGl0eSBmdW5jdGlvbi5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgZXJyb3IgdHlwZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhyb3dzIGEgYFJhbmdlRXJyb3JgIHdpdGggdGhlIGFwcGxpY2FibGUgZXJyb3IgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gZXJyb3IodHlwZSkge1xuICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xufVxuXG4vKipcbiAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcbiAqIGl0ZW0uXG4gKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IGFycmF5IG9mIHZhbHVlcyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICByZXN1bHRbbGVuZ3RoXSA9IGZuKGFycmF5W2xlbmd0aF0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzIG9yIGVtYWlsXG4gKiBhZGRyZXNzZXMuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeVxuICogY2hhcmFjdGVyLlxuICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcbiAqIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikge1xuICB2YXIgcGFydHMgPSBzdHJpbmcuc3BsaXQoJ0AnKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xuICAgIC8vIEluIGVtYWlsIGFkZHJlc3Nlcywgb25seSB0aGUgZG9tYWluIG5hbWUgc2hvdWxkIGJlIHB1bnljb2RlZC4gTGVhdmVcbiAgICAvLyB0aGUgbG9jYWwgcGFydCAoaS5lLiBldmVyeXRoaW5nIHVwIHRvIGBAYCkgaW50YWN0LlxuICAgIHJlc3VsdCA9IHBhcnRzWzBdICsgJ0AnO1xuICAgIHN0cmluZyA9IHBhcnRzWzFdO1xuICB9XG4gIC8vIEF2b2lkIGBzcGxpdChyZWdleClgIGZvciBJRTggY29tcGF0aWJpbGl0eS4gU2VlICMxNy5cbiAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXFx4MkUnKTtcbiAgdmFyIGxhYmVscyA9IHN0cmluZy5zcGxpdCgnLicpO1xuICB2YXIgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGZuKS5qb2luKCcuJyk7XG4gIHJldHVybiByZXN1bHQgKyBlbmNvZGVkO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcbiAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG4gKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcbiAqIG1hdGNoaW5nIFVURi0xNi5cbiAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG4gKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuICogQG5hbWUgZGVjb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFRoZSBVbmljb2RlIGlucHV0IHN0cmluZyAoVUNTLTIpLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuICovXG5mdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuICB2YXIgb3V0cHV0ID0gW10sXG4gICAgY291bnRlciA9IDAsXG4gICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICB2YWx1ZSxcbiAgICBleHRyYTtcbiAgd2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICB2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG4gICAgaWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuICAgICAgLy8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG4gICAgICBleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG4gICAgICBpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuICAgICAgICBvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcbiAgICAgICAgLy8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICAgICAgY291bnRlci0tO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0cmluZyBiYXNlZCBvbiBhbiBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuICogQHNlZSBgcHVueWNvZGUudWNzMi5kZWNvZGVgXG4gKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuICogQG5hbWUgZW5jb2RlXG4gKiBAcGFyYW0ge0FycmF5fSBjb2RlUG9pbnRzIFRoZSBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIG5ldyBVbmljb2RlIHN0cmluZyAoVUNTLTIpLlxuICovXG5mdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG4gIHJldHVybiBtYXAoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIG91dHB1dCA9ICcnO1xuICAgIGlmICh2YWx1ZSA+IDB4RkZGRikge1xuICAgICAgdmFsdWUgLT0gMHgxMDAwMDtcbiAgICAgIG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuICAgICAgdmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuICAgIH1cbiAgICBvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9KS5qb2luKCcnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGJhc2ljIGNvZGUgcG9pbnQgaW50byBhIGRpZ2l0L2ludGVnZXIuXG4gKiBAc2VlIGBkaWdpdFRvQmFzaWMoKWBcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gY29kZVBvaW50IFRoZSBiYXNpYyBudW1lcmljIGNvZGUgcG9pbnQgdmFsdWUuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQgKGZvciB1c2UgaW5cbiAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaW4gdGhlIHJhbmdlIGAwYCB0byBgYmFzZSAtIDFgLCBvciBgYmFzZWAgaWZcbiAqIHRoZSBjb2RlIHBvaW50IGRvZXMgbm90IHJlcHJlc2VudCBhIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNpY1RvRGlnaXQoY29kZVBvaW50KSB7XG4gIGlmIChjb2RlUG9pbnQgLSA0OCA8IDEwKSB7XG4gICAgcmV0dXJuIGNvZGVQb2ludCAtIDIyO1xuICB9XG4gIGlmIChjb2RlUG9pbnQgLSA2NSA8IDI2KSB7XG4gICAgcmV0dXJuIGNvZGVQb2ludCAtIDY1O1xuICB9XG4gIGlmIChjb2RlUG9pbnQgLSA5NyA8IDI2KSB7XG4gICAgcmV0dXJuIGNvZGVQb2ludCAtIDk3O1xuICB9XG4gIHJldHVybiBiYXNlO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cbiAqIEBzZWUgYGJhc2ljVG9EaWdpdCgpYFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYmFzaWMgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSAod2hlbiB1c2VkIGZvclxuICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2VcbiAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpc1xuICogdXNlZDsgZWxzZSwgdGhlIGxvd2VyY2FzZSBmb3JtIGlzIHVzZWQuIFRoZSBiZWhhdmlvciBpcyB1bmRlZmluZWRcbiAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uXG4gKi9cbmZ1bmN0aW9uIGRpZ2l0VG9CYXNpYyhkaWdpdCwgZmxhZykge1xuICAvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuICAvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcbiAgcmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KSAtICgoZmxhZyAhPSAwKSA8PCA1KTtcbn1cblxuLyoqXG4gKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFkYXB0KGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuICB2YXIgayA9IDA7XG4gIGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG4gIGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcbiAgZm9yICggLyogbm8gaW5pdGlhbGl6YXRpb24gKi8gOyBkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkge1xuICAgIGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcbiAgfVxuICByZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMgdG8gYSBzdHJpbmcgb2YgVW5pY29kZVxuICogc3ltYm9scy5cbiAqIEBtZW1iZXJPZiBwdW55Y29kZVxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG4gIC8vIERvbid0IHVzZSBVQ1MtMlxuICB2YXIgb3V0cHV0ID0gW10sXG4gICAgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsXG4gICAgb3V0LFxuICAgIGkgPSAwLFxuICAgIG4gPSBpbml0aWFsTixcbiAgICBiaWFzID0gaW5pdGlhbEJpYXMsXG4gICAgYmFzaWMsXG4gICAgaixcbiAgICBpbmRleCxcbiAgICBvbGRpLFxuICAgIHcsXG4gICAgayxcbiAgICBkaWdpdCxcbiAgICB0LFxuICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuICAgIGJhc2VNaW51c1Q7XG5cbiAgLy8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlXG4gIC8vIHBvaW50cyBiZWZvcmUgdGhlIGxhc3QgZGVsaW1pdGVyLCBvciBgMGAgaWYgdGhlcmUgaXMgbm9uZSwgdGhlbiBjb3B5XG4gIC8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LlxuXG4gIGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcbiAgaWYgKGJhc2ljIDwgMCkge1xuICAgIGJhc2ljID0gMDtcbiAgfVxuXG4gIGZvciAoaiA9IDA7IGogPCBiYXNpYzsgKytqKSB7XG4gICAgLy8gaWYgaXQncyBub3QgYSBiYXNpYyBjb2RlIHBvaW50XG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQoaikgPj0gMHg4MCkge1xuICAgICAgZXJyb3IoJ25vdC1iYXNpYycpO1xuICAgIH1cbiAgICBvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTtcbiAgfVxuXG4gIC8vIE1haW4gZGVjb2RpbmcgbG9vcDogc3RhcnQganVzdCBhZnRlciB0aGUgbGFzdCBkZWxpbWl0ZXIgaWYgYW55IGJhc2ljIGNvZGVcbiAgLy8gcG9pbnRzIHdlcmUgY29waWVkOyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG90aGVyd2lzZS5cblxuICBmb3IgKGluZGV4ID0gYmFzaWMgPiAwID8gYmFzaWMgKyAxIDogMDsgaW5kZXggPCBpbnB1dExlbmd0aDsgLyogbm8gZmluYWwgZXhwcmVzc2lvbiAqLyApIHtcblxuICAgIC8vIGBpbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBuZXh0IGNoYXJhY3RlciB0byBiZSBjb25zdW1lZC5cbiAgICAvLyBEZWNvZGUgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlciBpbnRvIGBkZWx0YWAsXG4gICAgLy8gd2hpY2ggZ2V0cyBhZGRlZCB0byBgaWAuIFRoZSBvdmVyZmxvdyBjaGVja2luZyBpcyBlYXNpZXJcbiAgICAvLyBpZiB3ZSBpbmNyZWFzZSBgaWAgYXMgd2UgZ28sIHRoZW4gc3VidHJhY3Qgb2ZmIGl0cyBzdGFydGluZ1xuICAgIC8vIHZhbHVlIGF0IHRoZSBlbmQgdG8gb2J0YWluIGBkZWx0YWAuXG4gICAgZm9yIChvbGRpID0gaSwgdyA9IDEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi8gOyBrICs9IGJhc2UpIHtcblxuICAgICAgaWYgKGluZGV4ID49IGlucHV0TGVuZ3RoKSB7XG4gICAgICAgIGVycm9yKCdpbnZhbGlkLWlucHV0Jyk7XG4gICAgICB9XG5cbiAgICAgIGRpZ2l0ID0gYmFzaWNUb0RpZ2l0KGlucHV0LmNoYXJDb2RlQXQoaW5kZXgrKykpO1xuXG4gICAgICBpZiAoZGlnaXQgPj0gYmFzZSB8fCBkaWdpdCA+IGZsb29yKChtYXhJbnQgLSBpKSAvIHcpKSB7XG4gICAgICAgIGVycm9yKCdvdmVyZmxvdycpO1xuICAgICAgfVxuXG4gICAgICBpICs9IGRpZ2l0ICogdztcbiAgICAgIHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXG4gICAgICBpZiAoZGlnaXQgPCB0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBiYXNlTWludXNUID0gYmFzZSAtIHQ7XG4gICAgICBpZiAodyA+IGZsb29yKG1heEludCAvIGJhc2VNaW51c1QpKSB7XG4gICAgICAgIGVycm9yKCdvdmVyZmxvdycpO1xuICAgICAgfVxuXG4gICAgICB3ICo9IGJhc2VNaW51c1Q7XG5cbiAgICB9XG5cbiAgICBvdXQgPSBvdXRwdXQubGVuZ3RoICsgMTtcbiAgICBiaWFzID0gYWRhcHQoaSAtIG9sZGksIG91dCwgb2xkaSA9PSAwKTtcblxuICAgIC8vIGBpYCB3YXMgc3VwcG9zZWQgdG8gd3JhcCBhcm91bmQgZnJvbSBgb3V0YCB0byBgMGAsXG4gICAgLy8gaW5jcmVtZW50aW5nIGBuYCBlYWNoIHRpbWUsIHNvIHdlJ2xsIGZpeCB0aGF0IG5vdzpcbiAgICBpZiAoZmxvb3IoaSAvIG91dCkgPiBtYXhJbnQgLSBuKSB7XG4gICAgICBlcnJvcignb3ZlcmZsb3cnKTtcbiAgICB9XG5cbiAgICBuICs9IGZsb29yKGkgLyBvdXQpO1xuICAgIGkgJT0gb3V0O1xuXG4gICAgLy8gSW5zZXJ0IGBuYCBhdCBwb3NpdGlvbiBgaWAgb2YgdGhlIG91dHB1dFxuICAgIG91dHB1dC5zcGxpY2UoaSsrLCAwLCBuKTtcblxuICB9XG5cbiAgcmV0dXJuIHVjczJlbmNvZGUob3V0cHV0KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cbiAqIEBtZW1iZXJPZiBwdW55Y29kZVxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG4gIHZhciBuLFxuICAgIGRlbHRhLFxuICAgIGhhbmRsZWRDUENvdW50LFxuICAgIGJhc2ljTGVuZ3RoLFxuICAgIGJpYXMsXG4gICAgaixcbiAgICBtLFxuICAgIHEsXG4gICAgayxcbiAgICB0LFxuICAgIGN1cnJlbnRWYWx1ZSxcbiAgICBvdXRwdXQgPSBbXSxcbiAgICAvKiogYGlucHV0TGVuZ3RoYCB3aWxsIGhvbGQgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyBpbiBgaW5wdXRgLiAqL1xuICAgIGlucHV0TGVuZ3RoLFxuICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuICAgIGhhbmRsZWRDUENvdW50UGx1c09uZSxcbiAgICBiYXNlTWludXNULFxuICAgIHFNaW51c1Q7XG5cbiAgLy8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gVW5pY29kZVxuICBpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG4gIC8vIENhY2hlIHRoZSBsZW5ndGhcbiAgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc3RhdGVcbiAgbiA9IGluaXRpYWxOO1xuICBkZWx0YSA9IDA7XG4gIGJpYXMgPSBpbml0aWFsQmlhcztcblxuICAvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzXG4gIGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG4gICAgY3VycmVudFZhbHVlID0gaW5wdXRbal07XG4gICAgaWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcbiAgICAgIG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcblxuICAvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcbiAgLy8gYGJhc2ljTGVuZ3RoYCBpcyB0aGUgbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuXG4gIC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIC0gaWYgaXQgaXMgbm90IGVtcHR5IC0gd2l0aCBhIGRlbGltaXRlclxuICBpZiAoYmFzaWNMZW5ndGgpIHtcbiAgICBvdXRwdXQucHVzaChkZWxpbWl0ZXIpO1xuICB9XG5cbiAgLy8gTWFpbiBlbmNvZGluZyBsb29wOlxuICB3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuXG4gICAgLy8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dFxuICAgIC8vIGxhcmdlciBvbmU6XG4gICAgZm9yIChtID0gbWF4SW50LCBqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcbiAgICAgICAgbSA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sXG4gICAgLy8gYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3dcbiAgICBoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG4gICAgaWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcbiAgICAgIGVycm9yKCdvdmVyZmxvdycpO1xuICAgIH1cblxuICAgIGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7XG4gICAgbiA9IG07XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcbiAgICAgICAgZXJyb3IoJ292ZXJmbG93Jyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuICAgICAgICAvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlclxuICAgICAgICBmb3IgKHEgPSBkZWx0YSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLyA7IGsgKz0gYmFzZSkge1xuICAgICAgICAgIHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuICAgICAgICAgIGlmIChxIDwgdCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHFNaW51c1QgPSBxIC0gdDtcbiAgICAgICAgICBiYXNlTWludXNUID0gYmFzZSAtIHQ7XG4gICAgICAgICAgb3V0cHV0LnB1c2goXG4gICAgICAgICAgICBzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCwgMCkpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxLCAwKSkpO1xuICAgICAgICBiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuICAgICAgICBkZWx0YSA9IDA7XG4gICAgICAgICsraGFuZGxlZENQQ291bnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgKytkZWx0YTtcbiAgICArK247XG5cbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3NcbiAqIHRvIFVuaWNvZGUuIE9ubHkgdGhlIFB1bnljb2RlZCBwYXJ0cyBvZiB0aGUgaW5wdXQgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS5cbiAqIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IG9uIGEgc3RyaW5nIHRoYXQgaGFzIGFscmVhZHkgYmVlblxuICogY29udmVydGVkIHRvIFVuaWNvZGUuXG4gKiBAbWVtYmVyT2YgcHVueWNvZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGVkIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG9cbiAqIGNvbnZlcnQgdG8gVW5pY29kZS5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBVbmljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBQdW55Y29kZVxuICogc3RyaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9Vbmljb2RlKGlucHV0KSB7XG4gIHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHJldHVybiByZWdleFB1bnljb2RlLnRlc3Qoc3RyaW5nKSA/XG4gICAgICBkZWNvZGUoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpIDpcbiAgICAgIHN0cmluZztcbiAgfSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvXG4gKiBQdW55Y29kZS4gT25seSB0aGUgbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCxcbiAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpblxuICogQVNDSUkuXG4gKiBAbWVtYmVyT2YgcHVueWNvZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhXG4gKiBVbmljb2RlIHN0cmluZy5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUgb3JcbiAqIGVtYWlsIGFkZHJlc3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0FTQ0lJKGlucHV0KSB7XG4gIHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHJldHVybiByZWdleE5vbkFTQ0lJLnRlc3Qoc3RyaW5nKSA/XG4gICAgICAneG4tLScgKyBlbmNvZGUoc3RyaW5nKSA6XG4gICAgICBzdHJpbmc7XG4gIH0pO1xufVxuZXhwb3J0IHZhciB2ZXJzaW9uID0gJzEuNC4xJztcbi8qKlxuICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXJcbiAqIHJlcHJlc2VudGF0aW9uIChVQ1MtMikgdG8gVW5pY29kZSBjb2RlIHBvaW50cywgYW5kIGJhY2suXG4gKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cbiAqIEBtZW1iZXJPZiBwdW55Y29kZVxuICogQHR5cGUgT2JqZWN0XG4gKi9cblxuZXhwb3J0IHZhciB1Y3MyID0ge1xuICBkZWNvZGU6IHVjczJkZWNvZGUsXG4gIGVuY29kZTogdWNzMmVuY29kZVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgdmVyc2lvbjogdmVyc2lvbixcbiAgdWNzMjogdWNzMixcbiAgdG9BU0NJSTogdG9BU0NJSSxcbiAgdG9Vbmljb2RlOiB0b1VuaWNvZGUsXG4gIGVuY29kZTogZW5jb2RlLFxuICBkZWNvZGU6IGRlY29kZVxufVxuIiwgIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuLy8gYmFzZWQgb2ZmIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWZ1bmN0em9tYmllL25vZGUtcHJvY2Vzcy9ibG9iL21hc3Rlci9icm93c2VyLmpzXG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxudmFyIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG5pZiAodHlwZW9mIGdsb2JhbC5zZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG59XG5pZiAodHlwZW9mIGdsb2JhbC5jbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG59XG5cbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cbmZ1bmN0aW9uIG5leHRUaWNrKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59XG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xudmFyIHRpdGxlID0gJ2Jyb3dzZXInO1xudmFyIHBsYXRmb3JtID0gJ2Jyb3dzZXInO1xudmFyIGJyb3dzZXIgPSB0cnVlO1xudmFyIGVudiA9IHt9O1xudmFyIGFyZ3YgPSBbXTtcbnZhciB2ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG52YXIgdmVyc2lvbnMgPSB7fTtcbnZhciByZWxlYXNlID0ge307XG52YXIgY29uZmlnID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG52YXIgb24gPSBub29wO1xudmFyIGFkZExpc3RlbmVyID0gbm9vcDtcbnZhciBvbmNlID0gbm9vcDtcbnZhciBvZmYgPSBub29wO1xudmFyIHJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnZhciByZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xudmFyIGVtaXQgPSBub29wO1xuXG5mdW5jdGlvbiBiaW5kaW5nKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59XG5cbmZ1bmN0aW9uIGN3ZCAoKSB7IHJldHVybiAnLycgfVxuZnVuY3Rpb24gY2hkaXIgKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59ZnVuY3Rpb24gdW1hc2soKSB7IHJldHVybiAwOyB9XG5cbi8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2t1bWF2aXMvYnJvd3Nlci1wcm9jZXNzLWhydGltZS9ibG9iL21hc3Rlci9pbmRleC5qc1xudmFyIHBlcmZvcm1hbmNlID0gZ2xvYmFsLnBlcmZvcm1hbmNlIHx8IHt9O1xudmFyIHBlcmZvcm1hbmNlTm93ID1cbiAgcGVyZm9ybWFuY2Uubm93ICAgICAgICB8fFxuICBwZXJmb3JtYW5jZS5tb3pOb3cgICAgIHx8XG4gIHBlcmZvcm1hbmNlLm1zTm93ICAgICAgfHxcbiAgcGVyZm9ybWFuY2Uub05vdyAgICAgICB8fFxuICBwZXJmb3JtYW5jZS53ZWJraXROb3cgIHx8XG4gIGZ1bmN0aW9uKCl7IHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpIH07XG5cbi8vIGdlbmVyYXRlIHRpbWVzdGFtcCBvciBkZWx0YVxuLy8gc2VlIGh0dHA6Ly9ub2RlanMub3JnL2FwaS9wcm9jZXNzLmh0bWwjcHJvY2Vzc19wcm9jZXNzX2hydGltZVxuZnVuY3Rpb24gaHJ0aW1lKHByZXZpb3VzVGltZXN0YW1wKXtcbiAgdmFyIGNsb2NrdGltZSA9IHBlcmZvcm1hbmNlTm93LmNhbGwocGVyZm9ybWFuY2UpKjFlLTM7XG4gIHZhciBzZWNvbmRzID0gTWF0aC5mbG9vcihjbG9ja3RpbWUpO1xuICB2YXIgbmFub3NlY29uZHMgPSBNYXRoLmZsb29yKChjbG9ja3RpbWUlMSkqMWU5KTtcbiAgaWYgKHByZXZpb3VzVGltZXN0YW1wKSB7XG4gICAgc2Vjb25kcyA9IHNlY29uZHMgLSBwcmV2aW91c1RpbWVzdGFtcFswXTtcbiAgICBuYW5vc2Vjb25kcyA9IG5hbm9zZWNvbmRzIC0gcHJldmlvdXNUaW1lc3RhbXBbMV07XG4gICAgaWYgKG5hbm9zZWNvbmRzPDApIHtcbiAgICAgIHNlY29uZHMtLTtcbiAgICAgIG5hbm9zZWNvbmRzICs9IDFlOTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtzZWNvbmRzLG5hbm9zZWNvbmRzXVxufVxuXG52YXIgc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcbmZ1bmN0aW9uIHVwdGltZSgpIHtcbiAgdmFyIGN1cnJlbnRUaW1lID0gbmV3IERhdGUoKTtcbiAgdmFyIGRpZiA9IGN1cnJlbnRUaW1lIC0gc3RhcnRUaW1lO1xuICByZXR1cm4gZGlmIC8gMTAwMDtcbn1cblxudmFyIGJyb3dzZXIkMSA9IHtcbiAgbmV4dFRpY2s6IG5leHRUaWNrLFxuICB0aXRsZTogdGl0bGUsXG4gIGJyb3dzZXI6IGJyb3dzZXIsXG4gIGVudjogZW52LFxuICBhcmd2OiBhcmd2LFxuICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICB2ZXJzaW9uczogdmVyc2lvbnMsXG4gIG9uOiBvbixcbiAgYWRkTGlzdGVuZXI6IGFkZExpc3RlbmVyLFxuICBvbmNlOiBvbmNlLFxuICBvZmY6IG9mZixcbiAgcmVtb3ZlTGlzdGVuZXI6IHJlbW92ZUxpc3RlbmVyLFxuICByZW1vdmVBbGxMaXN0ZW5lcnM6IHJlbW92ZUFsbExpc3RlbmVycyxcbiAgZW1pdDogZW1pdCxcbiAgYmluZGluZzogYmluZGluZyxcbiAgY3dkOiBjd2QsXG4gIGNoZGlyOiBjaGRpcixcbiAgdW1hc2s6IHVtYXNrLFxuICBocnRpbWU6IGhydGltZSxcbiAgcGxhdGZvcm06IHBsYXRmb3JtLFxuICByZWxlYXNlOiByZWxlYXNlLFxuICBjb25maWc6IGNvbmZpZyxcbiAgdXB0aW1lOiB1cHRpbWVcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGJyb3dzZXIkMTtcbmV4cG9ydCB7IGFkZExpc3RlbmVyLCBhcmd2LCBiaW5kaW5nLCBicm93c2VyLCBjaGRpciwgY29uZmlnLCBjd2QsIGVtaXQsIGVudiwgaHJ0aW1lLCBuZXh0VGljaywgb2ZmLCBvbiwgb25jZSwgcGxhdGZvcm0sIHJlbGVhc2UsIHJlbW92ZUFsbExpc3RlbmVycywgcmVtb3ZlTGlzdGVuZXIsIHRpdGxlLCB1bWFzaywgdXB0aW1lLCB2ZXJzaW9uLCB2ZXJzaW9ucyB9O1xuIiwgIlxudmFyIGluaGVyaXRzO1xuaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKXtcbiAgaW5oZXJpdHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgaW5oZXJpdHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgaW5oZXJpdHM7XG4iLCAiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5pbXBvcnQgcHJvY2VzcyBmcm9tICdwcm9jZXNzJztcbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdChmKSB7XG4gIGlmICghaXNTdHJpbmcoZikpIHtcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdHMuam9pbignICcpO1xuICB9XG5cbiAgdmFyIGkgPSAxO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcbiAgICBzd2l0Y2ggKHgpIHtcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclaic6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG4gIH0pO1xuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG4gICAgICBzdHIgKz0gJyAnICsgeDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbmV4cG9ydCBmdW5jdGlvbiBkZXByZWNhdGUoZm4sIG1zZykge1xuICAvLyBBbGxvdyBmb3IgZGVwcmVjYXRpbmcgdGhpbmdzIGluIHRoZSBwcm9jZXNzIG9mIHN0YXJ0aW5nIHVwLlxuICBpZiAoaXNVbmRlZmluZWQoZ2xvYmFsLnByb2Nlc3MpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmV4cG9ydCBmdW5jdGlvbiBkZWJ1Z2xvZyhzZXQpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXGInICsgc2V0ICsgJ1xcXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHtcbiAgICAgIHZhciBwaWQgPSAwO1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1zZyA9IGZvcm1hdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5leHBvcnQgZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIF9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCdWZmZXIobWF5YmVCdWYpIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihtYXliZUJ1Zik7XG59XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydCBmdW5jdGlvbiBsb2coKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGZvcm1hdC5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbn1cblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuaW1wb3J0IGluaGVyaXRzIGZyb20gJy4vaW5oZXJpdHMnO1xuZXhwb3J0IHtpbmhlcml0c31cblxuZXhwb3J0IGZ1bmN0aW9uIF9leHRlbmQob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn07XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5oZXJpdHM6IGluaGVyaXRzLFxuICBfZXh0ZW5kOiBfZXh0ZW5kLFxuICBsb2c6IGxvZyxcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc1ByaW1pdGl2ZTogaXNQcmltaXRpdmUsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzRXJyb3I6IGlzRXJyb3IsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUmVnRXhwOiBpc1JlZ0V4cCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc1N5bWJvbDogaXNTeW1ib2wsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc051bGxPclVuZGVmaW5lZDogaXNOdWxsT3JVbmRlZmluZWQsXG4gIGlzTnVsbDogaXNOdWxsLFxuICBpc0Jvb2xlYW46IGlzQm9vbGVhbixcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaW5zcGVjdDogaW5zcGVjdCxcbiAgZGVwcmVjYXRlOiBkZXByZWNhdGUsXG4gIGZvcm1hdDogZm9ybWF0LFxuICBkZWJ1Z2xvZzogZGVidWdsb2dcbn1cbiIsICIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuXG4vLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nXG4vLyBvYmouaGFzT3duUHJvcGVydHkocHJvcCkgd2lsbCBicmVhay5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzA3XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh4cykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5mdW5jdGlvbiBzdHJpbmdpZnlQcmltaXRpdmUodikge1xuICBzd2l0Y2ggKHR5cGVvZiB2KSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiB2O1xuXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gdiA/ICd0cnVlJyA6ICdmYWxzZSc7XG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIGlzRmluaXRlKHYpID8gdiA6ICcnO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAnJztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5IChvYmosIHNlcCwgZXEsIG5hbWUpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIGlmIChvYmogPT09IG51bGwpIHtcbiAgICBvYmogPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbWFwKG9iamVjdEtleXMob2JqKSwgZnVuY3Rpb24oaykge1xuICAgICAgdmFyIGtzID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShrKSkgKyBlcTtcbiAgICAgIGlmIChpc0FycmF5KG9ialtrXSkpIHtcbiAgICAgICAgcmV0dXJuIG1hcChvYmpba10sIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKHYpKTtcbiAgICAgICAgfSkuam9pbihzZXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmpba10pKTtcbiAgICAgIH1cbiAgICB9KS5qb2luKHNlcCk7XG5cbiAgfVxuXG4gIGlmICghbmFtZSkgcmV0dXJuICcnO1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShuYW1lKSkgKyBlcSArXG4gICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9iaikpO1xufTtcblxuZnVuY3Rpb24gbWFwICh4cywgZikge1xuICBpZiAoeHMubWFwKSByZXR1cm4geHMubWFwKGYpO1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICByZXMucHVzaChmKHhzW2ldLCBpKSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSByZXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UocXMsIHNlcCwgZXEsIG9wdGlvbnMpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIHZhciBvYmogPSB7fTtcblxuICBpZiAodHlwZW9mIHFzICE9PSAnc3RyaW5nJyB8fCBxcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IC9cXCsvZztcbiAgcXMgPSBxcy5zcGxpdChzZXApO1xuXG4gIHZhciBtYXhLZXlzID0gMTAwMDtcbiAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMubWF4S2V5cyA9PT0gJ251bWJlcicpIHtcbiAgICBtYXhLZXlzID0gb3B0aW9ucy5tYXhLZXlzO1xuICB9XG5cbiAgdmFyIGxlbiA9IHFzLmxlbmd0aDtcbiAgLy8gbWF4S2V5cyA8PSAwIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIG5vdCBsaW1pdCBrZXlzIGNvdW50XG4gIGlmIChtYXhLZXlzID4gMCAmJiBsZW4gPiBtYXhLZXlzKSB7XG4gICAgbGVuID0gbWF4S2V5cztcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgeCA9IHFzW2ldLnJlcGxhY2UocmVnZXhwLCAnJTIwJyksXG4gICAgICAgIGlkeCA9IHguaW5kZXhPZihlcSksXG4gICAgICAgIGtzdHIsIHZzdHIsIGssIHY7XG5cbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIGtzdHIgPSB4LnN1YnN0cigwLCBpZHgpO1xuICAgICAgdnN0ciA9IHguc3Vic3RyKGlkeCArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrc3RyID0geDtcbiAgICAgIHZzdHIgPSAnJztcbiAgICB9XG5cbiAgICBrID0gZGVjb2RlVVJJQ29tcG9uZW50KGtzdHIpO1xuICAgIHYgPSBkZWNvZGVVUklDb21wb25lbnQodnN0cik7XG5cbiAgICBpZiAoIWhhc093blByb3BlcnR5KG9iaiwgaykpIHtcbiAgICAgIG9ialtrXSA9IHY7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9ialtrXSkpIHtcbiAgICAgIG9ialtrXS5wdXNoKHYpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmpba10gPSBbb2JqW2tdLCB2XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgZW5jb2RlOiBzdHJpbmdpZnksXG4gIHN0cmluZ2lmeTogc3RyaW5naWZ5LFxuICBkZWNvZGU6IHBhcnNlLFxuICBwYXJzZTogcGFyc2Vcbn1cbmV4cG9ydCB7c3RyaW5naWZ5IGFzIGVuY29kZSwgcGFyc2UgYXMgZGVjb2RlfTtcbiIsICIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuXG5pbXBvcnQge3RvQVNDSUl9IGZyb20gJ3B1bnljb2RlJztcbmltcG9ydCB7aXNPYmplY3QsaXNTdHJpbmcsaXNOdWxsT3JVbmRlZmluZWQsaXNOdWxsfSBmcm9tICd1dGlsJztcbmltcG9ydCB7cGFyc2UgYXMgcXNQYXJzZSxzdHJpbmdpZnkgYXMgcXNTdHJpbmdpZnl9IGZyb20gJ3F1ZXJ5c3RyaW5nJztcbmV4cG9ydCB7XG4gIHVybFBhcnNlIGFzIHBhcnNlLFxuICB1cmxSZXNvbHZlIGFzIHJlc29sdmUsXG4gIHVybFJlc29sdmVPYmplY3QgYXMgcmVzb2x2ZU9iamVjdCxcbiAgdXJsRm9ybWF0IGFzIGZvcm1hdFxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcGFyc2U6IHVybFBhcnNlLFxuICByZXNvbHZlOiB1cmxSZXNvbHZlLFxuICByZXNvbHZlT2JqZWN0OiB1cmxSZXNvbHZlT2JqZWN0LFxuICBmb3JtYXQ6IHVybEZvcm1hdCxcbiAgVXJsOiBVcmxcbn1cbmV4cG9ydCBmdW5jdGlvbiBVcmwoKSB7XG4gIHRoaXMucHJvdG9jb2wgPSBudWxsO1xuICB0aGlzLnNsYXNoZXMgPSBudWxsO1xuICB0aGlzLmF1dGggPSBudWxsO1xuICB0aGlzLmhvc3QgPSBudWxsO1xuICB0aGlzLnBvcnQgPSBudWxsO1xuICB0aGlzLmhvc3RuYW1lID0gbnVsbDtcbiAgdGhpcy5oYXNoID0gbnVsbDtcbiAgdGhpcy5zZWFyY2ggPSBudWxsO1xuICB0aGlzLnF1ZXJ5ID0gbnVsbDtcbiAgdGhpcy5wYXRobmFtZSA9IG51bGw7XG4gIHRoaXMucGF0aCA9IG51bGw7XG4gIHRoaXMuaHJlZiA9IG51bGw7XG59XG5cbi8vIFJlZmVyZW5jZTogUkZDIDM5ODYsIFJGQyAxODA4LCBSRkMgMjM5NlxuXG4vLyBkZWZpbmUgdGhlc2UgaGVyZSBzbyBhdCBsZWFzdCB0aGV5IG9ubHkgaGF2ZSB0byBiZVxuLy8gY29tcGlsZWQgb25jZSBvbiB0aGUgZmlyc3QgbW9kdWxlIGxvYWQuXG52YXIgcHJvdG9jb2xQYXR0ZXJuID0gL14oW2EtejAtOS4rLV0rOikvaSxcbiAgcG9ydFBhdHRlcm4gPSAvOlswLTldKiQvLFxuXG4gIC8vIFNwZWNpYWwgY2FzZSBmb3IgYSBzaW1wbGUgcGF0aCBVUkxcbiAgc2ltcGxlUGF0aFBhdHRlcm4gPSAvXihcXC9cXC8/KD8hXFwvKVteXFw/XFxzXSopKFxcP1teXFxzXSopPyQvLFxuXG4gIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIHJlc2VydmVkIGZvciBkZWxpbWl0aW5nIFVSTHMuXG4gIC8vIFdlIGFjdHVhbGx5IGp1c3QgYXV0by1lc2NhcGUgdGhlc2UuXG4gIGRlbGltcyA9IFsnPCcsICc+JywgJ1wiJywgJ2AnLCAnICcsICdcXHInLCAnXFxuJywgJ1xcdCddLFxuXG4gIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIG5vdCBhbGxvd2VkIGZvciB2YXJpb3VzIHJlYXNvbnMuXG4gIHVud2lzZSA9IFsneycsICd9JywgJ3wnLCAnXFxcXCcsICdeJywgJ2AnXS5jb25jYXQoZGVsaW1zKSxcblxuICAvLyBBbGxvd2VkIGJ5IFJGQ3MsIGJ1dCBjYXVzZSBvZiBYU1MgYXR0YWNrcy4gIEFsd2F5cyBlc2NhcGUgdGhlc2UuXG4gIGF1dG9Fc2NhcGUgPSBbJ1xcJyddLmNvbmNhdCh1bndpc2UpLFxuICAvLyBDaGFyYWN0ZXJzIHRoYXQgYXJlIG5ldmVyIGV2ZXIgYWxsb3dlZCBpbiBhIGhvc3RuYW1lLlxuICAvLyBOb3RlIHRoYXQgYW55IGludmFsaWQgY2hhcnMgYXJlIGFsc28gaGFuZGxlZCwgYnV0IHRoZXNlXG4gIC8vIGFyZSB0aGUgb25lcyB0aGF0IGFyZSAqZXhwZWN0ZWQqIHRvIGJlIHNlZW4sIHNvIHdlIGZhc3QtcGF0aFxuICAvLyB0aGVtLlxuICBub25Ib3N0Q2hhcnMgPSBbJyUnLCAnLycsICc/JywgJzsnLCAnIyddLmNvbmNhdChhdXRvRXNjYXBlKSxcbiAgaG9zdEVuZGluZ0NoYXJzID0gWycvJywgJz8nLCAnIyddLFxuICBob3N0bmFtZU1heExlbiA9IDI1NSxcbiAgaG9zdG5hbWVQYXJ0UGF0dGVybiA9IC9eWythLXowLTlBLVpfLV17MCw2M30kLyxcbiAgaG9zdG5hbWVQYXJ0U3RhcnQgPSAvXihbK2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8sXG4gIC8vIHByb3RvY29scyB0aGF0IGNhbiBhbGxvdyBcInVuc2FmZVwiIGFuZCBcInVud2lzZVwiIGNoYXJzLlxuICB1bnNhZmVQcm90b2NvbCA9IHtcbiAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICB9LFxuICAvLyBwcm90b2NvbHMgdGhhdCBuZXZlciBoYXZlIGEgaG9zdG5hbWUuXG4gIGhvc3RsZXNzUHJvdG9jb2wgPSB7XG4gICAgJ2phdmFzY3JpcHQnOiB0cnVlLFxuICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgfSxcbiAgLy8gcHJvdG9jb2xzIHRoYXQgYWx3YXlzIGNvbnRhaW4gYSAvLyBiaXQuXG4gIHNsYXNoZWRQcm90b2NvbCA9IHtcbiAgICAnaHR0cCc6IHRydWUsXG4gICAgJ2h0dHBzJzogdHJ1ZSxcbiAgICAnZnRwJzogdHJ1ZSxcbiAgICAnZ29waGVyJzogdHJ1ZSxcbiAgICAnZmlsZSc6IHRydWUsXG4gICAgJ2h0dHA6JzogdHJ1ZSxcbiAgICAnaHR0cHM6JzogdHJ1ZSxcbiAgICAnZnRwOic6IHRydWUsXG4gICAgJ2dvcGhlcjonOiB0cnVlLFxuICAgICdmaWxlOic6IHRydWVcbiAgfTtcblxuZnVuY3Rpb24gdXJsUGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAodXJsICYmIGlzT2JqZWN0KHVybCkgJiYgdXJsIGluc3RhbmNlb2YgVXJsKSByZXR1cm4gdXJsO1xuXG4gIHZhciB1ID0gbmV3IFVybDtcbiAgdS5wYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KTtcbiAgcmV0dXJuIHU7XG59XG5VcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICByZXR1cm4gcGFyc2UodGhpcywgdXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlKHNlbGYsIHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKCFpc1N0cmluZyh1cmwpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGFyYW1ldGVyIFxcJ3VybFxcJyBtdXN0IGJlIGEgc3RyaW5nLCBub3QgJyArIHR5cGVvZiB1cmwpO1xuICB9XG5cbiAgLy8gQ29weSBjaHJvbWUsIElFLCBvcGVyYSBiYWNrc2xhc2gtaGFuZGxpbmcgYmVoYXZpb3IuXG4gIC8vIEJhY2sgc2xhc2hlcyBiZWZvcmUgdGhlIHF1ZXJ5IHN0cmluZyBnZXQgY29udmVydGVkIHRvIGZvcndhcmQgc2xhc2hlc1xuICAvLyBTZWU6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yNTkxNlxuICB2YXIgcXVlcnlJbmRleCA9IHVybC5pbmRleE9mKCc/JyksXG4gICAgc3BsaXR0ZXIgPVxuICAgIChxdWVyeUluZGV4ICE9PSAtMSAmJiBxdWVyeUluZGV4IDwgdXJsLmluZGV4T2YoJyMnKSkgPyAnPycgOiAnIycsXG4gICAgdVNwbGl0ID0gdXJsLnNwbGl0KHNwbGl0dGVyKSxcbiAgICBzbGFzaFJlZ2V4ID0gL1xcXFwvZztcbiAgdVNwbGl0WzBdID0gdVNwbGl0WzBdLnJlcGxhY2Uoc2xhc2hSZWdleCwgJy8nKTtcbiAgdXJsID0gdVNwbGl0LmpvaW4oc3BsaXR0ZXIpO1xuXG4gIHZhciByZXN0ID0gdXJsO1xuXG4gIC8vIHRyaW0gYmVmb3JlIHByb2NlZWRpbmcuXG4gIC8vIFRoaXMgaXMgdG8gc3VwcG9ydCBwYXJzZSBzdHVmZiBsaWtlIFwiICBodHRwOi8vZm9vLmNvbSAgXFxuXCJcbiAgcmVzdCA9IHJlc3QudHJpbSgpO1xuXG4gIGlmICghc2xhc2hlc0Rlbm90ZUhvc3QgJiYgdXJsLnNwbGl0KCcjJykubGVuZ3RoID09PSAxKSB7XG4gICAgLy8gVHJ5IGZhc3QgcGF0aCByZWdleHBcbiAgICB2YXIgc2ltcGxlUGF0aCA9IHNpbXBsZVBhdGhQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gICAgaWYgKHNpbXBsZVBhdGgpIHtcbiAgICAgIHNlbGYucGF0aCA9IHJlc3Q7XG4gICAgICBzZWxmLmhyZWYgPSByZXN0O1xuICAgICAgc2VsZi5wYXRobmFtZSA9IHNpbXBsZVBhdGhbMV07XG4gICAgICBpZiAoc2ltcGxlUGF0aFsyXSkge1xuICAgICAgICBzZWxmLnNlYXJjaCA9IHNpbXBsZVBhdGhbMl07XG4gICAgICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgICAgc2VsZi5xdWVyeSA9IHFzUGFyc2Uoc2VsZi5zZWFyY2guc3Vic3RyKDEpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLnF1ZXJ5ID0gc2VsZi5zZWFyY2guc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgc2VsZi5zZWFyY2ggPSAnJztcbiAgICAgICAgc2VsZi5xdWVyeSA9IHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICB9XG5cbiAgdmFyIHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gIGlmIChwcm90bykge1xuICAgIHByb3RvID0gcHJvdG9bMF07XG4gICAgdmFyIGxvd2VyUHJvdG8gPSBwcm90by50b0xvd2VyQ2FzZSgpO1xuICAgIHNlbGYucHJvdG9jb2wgPSBsb3dlclByb3RvO1xuICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpO1xuICB9XG5cbiAgLy8gZmlndXJlIG91dCBpZiBpdCdzIGdvdCBhIGhvc3RcbiAgLy8gdXNlckBzZXJ2ZXIgaXMgKmFsd2F5cyogaW50ZXJwcmV0ZWQgYXMgYSBob3N0bmFtZSwgYW5kIHVybFxuICAvLyByZXNvbHV0aW9uIHdpbGwgdHJlYXQgLy9mb28vYmFyIGFzIGhvc3Q9Zm9vLHBhdGg9YmFyIGJlY2F1c2UgdGhhdCdzXG4gIC8vIGhvdyB0aGUgYnJvd3NlciByZXNvbHZlcyByZWxhdGl2ZSBVUkxzLlxuICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpIHtcbiAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nO1xuICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7XG4gICAgICBzZWxmLnNsYXNoZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuICB2YXIgaSwgaGVjLCBsLCBwO1xuICBpZiAoIWhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dICYmXG4gICAgKHNsYXNoZXMgfHwgKHByb3RvICYmICFzbGFzaGVkUHJvdG9jb2xbcHJvdG9dKSkpIHtcblxuICAgIC8vIHRoZXJlJ3MgYSBob3N0bmFtZS5cbiAgICAvLyB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgLywgPywgOywgb3IgIyBlbmRzIHRoZSBob3N0LlxuICAgIC8vXG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gQCBpbiB0aGUgaG9zdG5hbWUsIHRoZW4gbm9uLWhvc3QgY2hhcnMgKmFyZSogYWxsb3dlZFxuICAgIC8vIHRvIHRoZSBsZWZ0IG9mIHRoZSBsYXN0IEAgc2lnbiwgdW5sZXNzIHNvbWUgaG9zdC1lbmRpbmcgY2hhcmFjdGVyXG4gICAgLy8gY29tZXMgKmJlZm9yZSogdGhlIEAtc2lnbi5cbiAgICAvLyBVUkxzIGFyZSBvYm5veGlvdXMuXG4gICAgLy9cbiAgICAvLyBleDpcbiAgICAvLyBodHRwOi8vYUBiQGMvID0+IHVzZXI6YUBiIGhvc3Q6Y1xuICAgIC8vIGh0dHA6Ly9hQGI/QGMgPT4gdXNlcjphIGhvc3Q6YyBwYXRoOi8/QGNcblxuICAgIC8vIHYwLjEyIFRPRE8oaXNhYWNzKTogVGhpcyBpcyBub3QgcXVpdGUgaG93IENocm9tZSBkb2VzIHRoaW5ncy5cbiAgICAvLyBSZXZpZXcgb3VyIHRlc3QgY2FzZSBhZ2FpbnN0IGJyb3dzZXJzIG1vcmUgY29tcHJlaGVuc2l2ZWx5LlxuXG4gICAgLy8gZmluZCB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgYW55IGhvc3RFbmRpbmdDaGFyc1xuICAgIHZhciBob3N0RW5kID0gLTE7XG4gICAgZm9yIChpID0gMDsgaSA8IGhvc3RFbmRpbmdDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlXG4gICAgLy8gYXV0aCBwb3J0aW9uIGNhbm5vdCBnbyBwYXN0LCBvciB0aGUgbGFzdCBAIGNoYXIgaXMgdGhlIGRlY2lkZXIuXG4gICAgdmFyIGF1dGgsIGF0U2lnbjtcbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIGF0U2lnbiBjYW4gYmUgYW55d2hlcmUuXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGF0U2lnbiBtdXN0IGJlIGluIGF1dGggcG9ydGlvbi5cbiAgICAgIC8vIGh0dHA6Ly9hQGIvY0BkID0+IGhvc3Q6YiBhdXRoOmEgcGF0aDovY0BkXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7XG4gICAgfVxuXG4gICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguXG4gICAgLy8gUHVsbCB0aGF0IG9mZi5cbiAgICBpZiAoYXRTaWduICE9PSAtMSkge1xuICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKGF0U2lnbiArIDEpO1xuICAgICAgc2VsZi5hdXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIH1cblxuICAgIC8vIHRoZSBob3N0IGlzIHRoZSByZW1haW5pbmcgdG8gdGhlIGxlZnQgb2YgdGhlIGZpcnN0IG5vbi1ob3N0IGNoYXJcbiAgICBob3N0RW5kID0gLTE7XG4gICAgZm9yIChpID0gMDsgaSA8IG5vbkhvc3RDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgaGVjID0gcmVzdC5pbmRleE9mKG5vbkhvc3RDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuICAgIC8vIGlmIHdlIHN0aWxsIGhhdmUgbm90IGhpdCBpdCwgdGhlbiB0aGUgZW50aXJlIHRoaW5nIGlzIGEgaG9zdC5cbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpXG4gICAgICBob3N0RW5kID0gcmVzdC5sZW5ndGg7XG5cbiAgICBzZWxmLmhvc3QgPSByZXN0LnNsaWNlKDAsIGhvc3RFbmQpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKGhvc3RFbmQpO1xuXG4gICAgLy8gcHVsbCBvdXQgcG9ydC5cbiAgICBwYXJzZUhvc3Qoc2VsZik7XG5cbiAgICAvLyB3ZSd2ZSBpbmRpY2F0ZWQgdGhhdCB0aGVyZSBpcyBhIGhvc3RuYW1lLFxuICAgIC8vIHNvIGV2ZW4gaWYgaXQncyBlbXB0eSwgaXQgaGFzIHRvIGJlIHByZXNlbnQuXG4gICAgc2VsZi5ob3N0bmFtZSA9IHNlbGYuaG9zdG5hbWUgfHwgJyc7XG5cbiAgICAvLyBpZiBob3N0bmFtZSBiZWdpbnMgd2l0aCBbIGFuZCBlbmRzIHdpdGggXVxuICAgIC8vIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLlxuICAgIHZhciBpcHY2SG9zdG5hbWUgPSBzZWxmLmhvc3RuYW1lWzBdID09PSAnWycgJiZcbiAgICAgIHNlbGYuaG9zdG5hbWVbc2VsZi5ob3N0bmFtZS5sZW5ndGggLSAxXSA9PT0gJ10nO1xuXG4gICAgLy8gdmFsaWRhdGUgYSBsaXR0bGUuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHZhciBob3N0cGFydHMgPSBzZWxmLmhvc3RuYW1lLnNwbGl0KC9cXC4vKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBob3N0cGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldO1xuICAgICAgICBpZiAoIXBhcnQpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIXBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICB2YXIgbmV3cGFydCA9ICcnO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmNoYXJDb2RlQXQoaikgPiAxMjcpIHtcbiAgICAgICAgICAgICAgLy8gd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhpcyB0byBtYWtlIHN1cmUgc2l6ZSBvZiBob3N0bmFtZSBpcyBub3RcbiAgICAgICAgICAgICAgLy8gYnJva2VuIGJ5IHJlcGxhY2luZyBub24tQVNDSUkgYnkgbm90aGluZ1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gcGFydFtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgdGVzdCBhZ2FpbiB3aXRoIEFTQ0lJIGNoYXIgb25seVxuICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgICAgdmFyIHZhbGlkUGFydHMgPSBob3N0cGFydHMuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB2YXIgbm90SG9zdCA9IGhvc3RwYXJ0cy5zbGljZShpICsgMSk7XG4gICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7XG4gICAgICAgICAgICBpZiAoYml0KSB7XG4gICAgICAgICAgICAgIHZhbGlkUGFydHMucHVzaChiaXRbMV0pO1xuICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RIb3N0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5ob3N0bmFtZSA9IHZhbGlkUGFydHMuam9pbignLicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlbGYuaG9zdG5hbWUubGVuZ3RoID4gaG9zdG5hbWVNYXhMZW4pIHtcbiAgICAgIHNlbGYuaG9zdG5hbWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaG9zdG5hbWVzIGFyZSBhbHdheXMgbG93ZXIgY2FzZS5cbiAgICAgIHNlbGYuaG9zdG5hbWUgPSBzZWxmLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIC8vIElETkEgU3VwcG9ydDogUmV0dXJucyBhIHB1bnljb2RlZCByZXByZXNlbnRhdGlvbiBvZiBcImRvbWFpblwiLlxuICAgICAgLy8gSXQgb25seSBjb252ZXJ0cyBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgdGhhdFxuICAgICAgLy8gaGF2ZSBub24tQVNDSUkgY2hhcmFjdGVycywgaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZlxuICAgICAgLy8geW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0IGFscmVhZHkgaXMgQVNDSUktb25seS5cbiAgICAgIHNlbGYuaG9zdG5hbWUgPSB0b0FTQ0lJKHNlbGYuaG9zdG5hbWUpO1xuICAgIH1cblxuICAgIHAgPSBzZWxmLnBvcnQgPyAnOicgKyBzZWxmLnBvcnQgOiAnJztcbiAgICB2YXIgaCA9IHNlbGYuaG9zdG5hbWUgfHwgJyc7XG4gICAgc2VsZi5ob3N0ID0gaCArIHA7XG4gICAgc2VsZi5ocmVmICs9IHNlbGYuaG9zdDtcblxuICAgIC8vIHN0cmlwIFsgYW5kIF0gZnJvbSB0aGUgaG9zdG5hbWVcbiAgICAvLyB0aGUgaG9zdCBmaWVsZCBzdGlsbCByZXRhaW5zIHRoZW0sIHRob3VnaFxuICAgIGlmIChpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHNlbGYuaG9zdG5hbWUgPSBzZWxmLmhvc3RuYW1lLnN1YnN0cigxLCBzZWxmLmhvc3RuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgaWYgKHJlc3RbMF0gIT09ICcvJykge1xuICAgICAgICByZXN0ID0gJy8nICsgcmVzdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBub3cgcmVzdCBpcyBzZXQgdG8gdGhlIHBvc3QtaG9zdCBzdHVmZi5cbiAgLy8gY2hvcCBvZmYgYW55IGRlbGltIGNoYXJzLlxuICBpZiAoIXVuc2FmZVByb3RvY29sW2xvd2VyUHJvdG9dKSB7XG5cbiAgICAvLyBGaXJzdCwgbWFrZSAxMDAlIHN1cmUgdGhhdCBhbnkgXCJhdXRvRXNjYXBlXCIgY2hhcnMgZ2V0XG4gICAgLy8gZXNjYXBlZCwgZXZlbiBpZiBlbmNvZGVVUklDb21wb25lbnQgZG9lc24ndCB0aGluayB0aGV5XG4gICAgLy8gbmVlZCB0byBiZS5cbiAgICBmb3IgKGkgPSAwLCBsID0gYXV0b0VzY2FwZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhZSA9IGF1dG9Fc2NhcGVbaV07XG4gICAgICBpZiAocmVzdC5pbmRleE9mKGFlKSA9PT0gLTEpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgdmFyIGVzYyA9IGVuY29kZVVSSUNvbXBvbmVudChhZSk7XG4gICAgICBpZiAoZXNjID09PSBhZSkge1xuICAgICAgICBlc2MgPSBlc2NhcGUoYWUpO1xuICAgICAgfVxuICAgICAgcmVzdCA9IHJlc3Quc3BsaXQoYWUpLmpvaW4oZXNjKTtcbiAgICB9XG4gIH1cblxuXG4gIC8vIGNob3Agb2ZmIGZyb20gdGhlIHRhaWwgZmlyc3QuXG4gIHZhciBoYXNoID0gcmVzdC5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoICE9PSAtMSkge1xuICAgIC8vIGdvdCBhIGZyYWdtZW50IHN0cmluZy5cbiAgICBzZWxmLmhhc2ggPSByZXN0LnN1YnN0cihoYXNoKTtcbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBoYXNoKTtcbiAgfVxuICB2YXIgcW0gPSByZXN0LmluZGV4T2YoJz8nKTtcbiAgaWYgKHFtICE9PSAtMSkge1xuICAgIHNlbGYuc2VhcmNoID0gcmVzdC5zdWJzdHIocW0pO1xuICAgIHNlbGYucXVlcnkgPSByZXN0LnN1YnN0cihxbSArIDEpO1xuICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7XG4gICAgICBzZWxmLnF1ZXJ5ID0gcXNQYXJzZShzZWxmLnF1ZXJ5KTtcbiAgICB9XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgcW0pO1xuICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAvLyBubyBxdWVyeSBzdHJpbmcsIGJ1dCBwYXJzZVF1ZXJ5U3RyaW5nIHN0aWxsIHJlcXVlc3RlZFxuICAgIHNlbGYuc2VhcmNoID0gJyc7XG4gICAgc2VsZi5xdWVyeSA9IHt9O1xuICB9XG4gIGlmIChyZXN0KSBzZWxmLnBhdGhuYW1lID0gcmVzdDtcbiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJlxuICAgIHNlbGYuaG9zdG5hbWUgJiYgIXNlbGYucGF0aG5hbWUpIHtcbiAgICBzZWxmLnBhdGhuYW1lID0gJy8nO1xuICB9XG5cbiAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICBpZiAoc2VsZi5wYXRobmFtZSB8fCBzZWxmLnNlYXJjaCkge1xuICAgIHAgPSBzZWxmLnBhdGhuYW1lIHx8ICcnO1xuICAgIHZhciBzID0gc2VsZi5zZWFyY2ggfHwgJyc7XG4gICAgc2VsZi5wYXRoID0gcCArIHM7XG4gIH1cblxuICAvLyBmaW5hbGx5LCByZWNvbnN0cnVjdCB0aGUgaHJlZiBiYXNlZCBvbiB3aGF0IGhhcyBiZWVuIHZhbGlkYXRlZC5cbiAgc2VsZi5ocmVmID0gZm9ybWF0KHNlbGYpO1xuICByZXR1cm4gc2VsZjtcbn1cblxuLy8gZm9ybWF0IGEgcGFyc2VkIG9iamVjdCBpbnRvIGEgdXJsIHN0cmluZ1xuZnVuY3Rpb24gdXJsRm9ybWF0KG9iaikge1xuICAvLyBlbnN1cmUgaXQncyBhbiBvYmplY3QsIGFuZCBub3QgYSBzdHJpbmcgdXJsLlxuICAvLyBJZiBpdCdzIGFuIG9iaiwgdGhpcyBpcyBhIG5vLW9wLlxuICAvLyB0aGlzIHdheSwgeW91IGNhbiBjYWxsIHVybF9mb3JtYXQoKSBvbiBzdHJpbmdzXG4gIC8vIHRvIGNsZWFuIHVwIHBvdGVudGlhbGx5IHdvbmt5IHVybHMuXG4gIGlmIChpc1N0cmluZyhvYmopKSBvYmogPSBwYXJzZSh7fSwgb2JqKTtcbiAgcmV0dXJuIGZvcm1hdChvYmopO1xufVxuXG5mdW5jdGlvbiBmb3JtYXQoc2VsZikge1xuICB2YXIgYXV0aCA9IHNlbGYuYXV0aCB8fCAnJztcbiAgaWYgKGF1dGgpIHtcbiAgICBhdXRoID0gZW5jb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIGF1dGggPSBhdXRoLnJlcGxhY2UoLyUzQS9pLCAnOicpO1xuICAgIGF1dGggKz0gJ0AnO1xuICB9XG5cbiAgdmFyIHByb3RvY29sID0gc2VsZi5wcm90b2NvbCB8fCAnJyxcbiAgICBwYXRobmFtZSA9IHNlbGYucGF0aG5hbWUgfHwgJycsXG4gICAgaGFzaCA9IHNlbGYuaGFzaCB8fCAnJyxcbiAgICBob3N0ID0gZmFsc2UsXG4gICAgcXVlcnkgPSAnJztcblxuICBpZiAoc2VsZi5ob3N0KSB7XG4gICAgaG9zdCA9IGF1dGggKyBzZWxmLmhvc3Q7XG4gIH0gZWxzZSBpZiAoc2VsZi5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKHNlbGYuaG9zdG5hbWUuaW5kZXhPZignOicpID09PSAtMSA/XG4gICAgICBzZWxmLmhvc3RuYW1lIDpcbiAgICAgICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScpO1xuICAgIGlmIChzZWxmLnBvcnQpIHtcbiAgICAgIGhvc3QgKz0gJzonICsgc2VsZi5wb3J0O1xuICAgIH1cbiAgfVxuXG4gIGlmIChzZWxmLnF1ZXJ5ICYmXG4gICAgaXNPYmplY3Qoc2VsZi5xdWVyeSkgJiZcbiAgICBPYmplY3Qua2V5cyhzZWxmLnF1ZXJ5KS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9IHFzU3RyaW5naWZ5KHNlbGYucXVlcnkpO1xuICB9XG5cbiAgdmFyIHNlYXJjaCA9IHNlbGYuc2VhcmNoIHx8IChxdWVyeSAmJiAoJz8nICsgcXVlcnkpKSB8fCAnJztcblxuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gJzonKSBwcm90b2NvbCArPSAnOic7XG5cbiAgLy8gb25seSB0aGUgc2xhc2hlZFByb3RvY29scyBnZXQgdGhlIC8vLiAgTm90IG1haWx0bzosIHhtcHA6LCBldGMuXG4gIC8vIHVubGVzcyB0aGV5IGhhZCB0aGVtIHRvIGJlZ2luIHdpdGguXG4gIGlmIChzZWxmLnNsYXNoZXMgfHxcbiAgICAoIXByb3RvY29sIHx8IHNsYXNoZWRQcm90b2NvbFtwcm90b2NvbF0pICYmIGhvc3QgIT09IGZhbHNlKSB7XG4gICAgaG9zdCA9ICcvLycgKyAoaG9zdCB8fCAnJyk7XG4gICAgaWYgKHBhdGhuYW1lICYmIHBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSBwYXRobmFtZSA9ICcvJyArIHBhdGhuYW1lO1xuICB9IGVsc2UgaWYgKCFob3N0KSB7XG4gICAgaG9zdCA9ICcnO1xuICB9XG5cbiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgaGFzaCA9ICcjJyArIGhhc2g7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBzZWFyY2ggPSAnPycgKyBzZWFyY2g7XG5cbiAgcGF0aG5hbWUgPSBwYXRobmFtZS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChtYXRjaCk7XG4gIH0pO1xuICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZSgnIycsICclMjMnKTtcblxuICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xufVxuXG5VcmwucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZm9ybWF0KHRoaXMpO1xufVxuXG5mdW5jdGlvbiB1cmxSZXNvbHZlKHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmUocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICByZXR1cm4gdGhpcy5yZXNvbHZlT2JqZWN0KHVybFBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSkpLmZvcm1hdCgpO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZU9iamVjdChzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIGlmICghc291cmNlKSByZXR1cm4gcmVsYXRpdmU7XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlT2JqZWN0KHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlT2JqZWN0ID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcbiAgaWYgKGlzU3RyaW5nKHJlbGF0aXZlKSkge1xuICAgIHZhciByZWwgPSBuZXcgVXJsKCk7XG4gICAgcmVsLnBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgcmVsYXRpdmUgPSByZWw7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gbmV3IFVybCgpO1xuICB2YXIgdGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgZm9yICh2YXIgdGsgPSAwOyB0ayA8IHRrZXlzLmxlbmd0aDsgdGsrKykge1xuICAgIHZhciB0a2V5ID0gdGtleXNbdGtdO1xuICAgIHJlc3VsdFt0a2V5XSA9IHRoaXNbdGtleV07XG4gIH1cblxuICAvLyBoYXNoIGlzIGFsd2F5cyBvdmVycmlkZGVuLCBubyBtYXR0ZXIgd2hhdC5cbiAgLy8gZXZlbiBocmVmPVwiXCIgd2lsbCByZW1vdmUgaXQuXG4gIHJlc3VsdC5oYXNoID0gcmVsYXRpdmUuaGFzaDtcblxuICAvLyBpZiB0aGUgcmVsYXRpdmUgdXJsIGlzIGVtcHR5LCB0aGVuIHRoZXJlJ3Mgbm90aGluZyBsZWZ0IHRvIGRvIGhlcmUuXG4gIGlmIChyZWxhdGl2ZS5ocmVmID09PSAnJykge1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBocmVmcyBsaWtlIC8vZm9vL2JhciBhbHdheXMgY3V0IHRvIHRoZSBwcm90b2NvbC5cbiAgaWYgKHJlbGF0aXZlLnNsYXNoZXMgJiYgIXJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgLy8gdGFrZSBldmVyeXRoaW5nIGV4Y2VwdCB0aGUgcHJvdG9jb2wgZnJvbSByZWxhdGl2ZVxuICAgIHZhciBya2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aXZlKTtcbiAgICBmb3IgKHZhciByayA9IDA7IHJrIDwgcmtleXMubGVuZ3RoOyByaysrKSB7XG4gICAgICB2YXIgcmtleSA9IHJrZXlzW3JrXTtcbiAgICAgIGlmIChya2V5ICE9PSAncHJvdG9jb2wnKVxuICAgICAgICByZXN1bHRbcmtleV0gPSByZWxhdGl2ZVtya2V5XTtcbiAgICB9XG5cbiAgICAvL3VybFBhcnNlIGFwcGVuZHMgdHJhaWxpbmcgLyB0byB1cmxzIGxpa2UgaHR0cDovL3d3dy5leGFtcGxlLmNvbVxuICAgIGlmIChzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXSAmJlxuICAgICAgcmVzdWx0Lmhvc3RuYW1lICYmICFyZXN1bHQucGF0aG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gcmVzdWx0LnBhdGhuYW1lID0gJy8nO1xuICAgIH1cblxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgdmFyIHJlbFBhdGg7XG4gIGlmIChyZWxhdGl2ZS5wcm90b2NvbCAmJiByZWxhdGl2ZS5wcm90b2NvbCAhPT0gcmVzdWx0LnByb3RvY29sKSB7XG4gICAgLy8gaWYgaXQncyBhIGtub3duIHVybCBwcm90b2NvbCwgdGhlbiBjaGFuZ2luZ1xuICAgIC8vIHRoZSBwcm90b2NvbCBkb2VzIHdlaXJkIHRoaW5nc1xuICAgIC8vIGZpcnN0LCBpZiBpdCdzIG5vdCBmaWxlOiwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBob3N0LFxuICAgIC8vIGFuZCBpZiB0aGVyZSB3YXMgYSBwYXRoXG4gICAgLy8gdG8gYmVnaW4gd2l0aCwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBwYXRoLlxuICAgIC8vIGlmIGl0IGlzIGZpbGU6LCB0aGVuIHRoZSBob3N0IGlzIGRyb3BwZWQsXG4gICAgLy8gYmVjYXVzZSB0aGF0J3Mga25vd24gdG8gYmUgaG9zdGxlc3MuXG4gICAgLy8gYW55dGhpbmcgZWxzZSBpcyBhc3N1bWVkIHRvIGJlIGFic29sdXRlLlxuICAgIGlmICghc2xhc2hlZFByb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICAgICAgdmFyIGsgPSBrZXlzW3ZdO1xuICAgICAgICByZXN1bHRba10gPSByZWxhdGl2ZVtrXTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXN1bHQucHJvdG9jb2wgPSByZWxhdGl2ZS5wcm90b2NvbDtcbiAgICBpZiAoIXJlbGF0aXZlLmhvc3QgJiYgIWhvc3RsZXNzUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICByZWxQYXRoID0gKHJlbGF0aXZlLnBhdGhuYW1lIHx8ICcnKS5zcGxpdCgnLycpO1xuICAgICAgd2hpbGUgKHJlbFBhdGgubGVuZ3RoICYmICEocmVsYXRpdmUuaG9zdCA9IHJlbFBhdGguc2hpZnQoKSkpO1xuICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0KSByZWxhdGl2ZS5ob3N0ID0gJyc7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3RuYW1lKSByZWxhdGl2ZS5ob3N0bmFtZSA9ICcnO1xuICAgICAgaWYgKHJlbFBhdGhbMF0gIT09ICcnKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgaWYgKHJlbFBhdGgubGVuZ3RoIDwgMikgcmVsUGF0aC51bnNoaWZ0KCcnKTtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbFBhdGguam9pbignLycpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxhdGl2ZS5wYXRobmFtZTtcbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICByZXN1bHQuaG9zdCA9IHJlbGF0aXZlLmhvc3QgfHwgJyc7XG4gICAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoO1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3Q7XG4gICAgcmVzdWx0LnBvcnQgPSByZWxhdGl2ZS5wb3J0O1xuICAgIC8vIHRvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5wYXRobmFtZSB8fCByZXN1bHQuc2VhcmNoKSB7XG4gICAgICB2YXIgcCA9IHJlc3VsdC5wYXRobmFtZSB8fCAnJztcbiAgICAgIHZhciBzID0gcmVzdWx0LnNlYXJjaCB8fCAnJztcbiAgICAgIHJlc3VsdC5wYXRoID0gcCArIHM7XG4gICAgfVxuICAgIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdmFyIGlzU291cmNlQWJzID0gKHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpLFxuICAgIGlzUmVsQWJzID0gKFxuICAgICAgcmVsYXRpdmUuaG9zdCB8fFxuICAgICAgcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLydcbiAgICApLFxuICAgIG11c3RFbmRBYnMgPSAoaXNSZWxBYnMgfHwgaXNTb3VyY2VBYnMgfHxcbiAgICAgIChyZXN1bHQuaG9zdCAmJiByZWxhdGl2ZS5wYXRobmFtZSkpLFxuICAgIHJlbW92ZUFsbERvdHMgPSBtdXN0RW5kQWJzLFxuICAgIHNyY1BhdGggPSByZXN1bHQucGF0aG5hbWUgJiYgcmVzdWx0LnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgcHN5Y2hvdGljID0gcmVzdWx0LnByb3RvY29sICYmICFzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXTtcbiAgcmVsUGF0aCA9IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW107XG4gIC8vIGlmIHRoZSB1cmwgaXMgYSBub24tc2xhc2hlZCB1cmwsIHRoZW4gcmVsYXRpdmVcbiAgLy8gbGlua3MgbGlrZSAuLi8uLiBzaG91bGQgYmUgYWJsZVxuICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuXG4gIC8vIHJlc3VsdC5wcm90b2NvbCBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSBub3cuXG4gIC8vIExhdGVyIG9uLCBwdXQgdGhlIGZpcnN0IHBhdGggcGFydCBpbnRvIHRoZSBob3N0IGZpZWxkLlxuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gJyc7XG4gICAgcmVzdWx0LnBvcnQgPSBudWxsO1xuICAgIGlmIChyZXN1bHQuaG9zdCkge1xuICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICcnKSBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7XG4gICAgICBlbHNlIHNyY1BhdGgudW5zaGlmdChyZXN1bHQuaG9zdCk7XG4gICAgfVxuICAgIHJlc3VsdC5ob3N0ID0gJyc7XG4gICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7XG4gICAgICByZWxhdGl2ZS5wb3J0ID0gbnVsbDtcbiAgICAgIGlmIChyZWxhdGl2ZS5ob3N0KSB7XG4gICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7XG4gICAgICAgIGVsc2UgcmVsUGF0aC51bnNoaWZ0KHJlbGF0aXZlLmhvc3QpO1xuICAgICAgfVxuICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7XG4gICAgfVxuICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdID09PSAnJyk7XG4gIH1cbiAgdmFyIGF1dGhJbkhvc3Q7XG4gIGlmIChpc1JlbEFicykge1xuICAgIC8vIGl0J3MgYWJzb2x1dGUuXG4gICAgcmVzdWx0Lmhvc3QgPSAocmVsYXRpdmUuaG9zdCB8fCByZWxhdGl2ZS5ob3N0ID09PSAnJykgP1xuICAgICAgcmVsYXRpdmUuaG9zdCA6IHJlc3VsdC5ob3N0O1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IChyZWxhdGl2ZS5ob3N0bmFtZSB8fCByZWxhdGl2ZS5ob3N0bmFtZSA9PT0gJycpID9cbiAgICAgIHJlbGF0aXZlLmhvc3RuYW1lIDogcmVzdWx0Lmhvc3RuYW1lO1xuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgc3JjUGF0aCA9IHJlbFBhdGg7XG4gICAgLy8gZmFsbCB0aHJvdWdoIHRvIHRoZSBkb3QtaGFuZGxpbmcgYmVsb3cuXG4gIH0gZWxzZSBpZiAocmVsUGF0aC5sZW5ndGgpIHtcbiAgICAvLyBpdCdzIHJlbGF0aXZlXG4gICAgLy8gdGhyb3cgYXdheSB0aGUgZXhpc3RpbmcgZmlsZSwgYW5kIHRha2UgdGhlIG5ldyBwYXRoIGluc3RlYWQuXG4gICAgaWYgKCFzcmNQYXRoKSBzcmNQYXRoID0gW107XG4gICAgc3JjUGF0aC5wb3AoKTtcbiAgICBzcmNQYXRoID0gc3JjUGF0aC5jb25jYXQocmVsUGF0aCk7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgfSBlbHNlIGlmICghaXNOdWxsT3JVbmRlZmluZWQocmVsYXRpdmUuc2VhcmNoKSkge1xuICAgIC8vIGp1c3QgcHVsbCBvdXQgdGhlIHNlYXJjaC5cbiAgICAvLyBsaWtlIGhyZWY9Jz9mb28nLlxuICAgIC8vIFB1dCB0aGlzIGFmdGVyIHRoZSBvdGhlciB0d28gY2FzZXMgYmVjYXVzZSBpdCBzaW1wbGlmaWVzIHRoZSBib29sZWFuc1xuICAgIGlmIChwc3ljaG90aWMpIHtcbiAgICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlc3VsdC5ob3N0ID0gc3JjUGF0aC5zaGlmdCgpO1xuICAgICAgLy9vY2NhdGlvbmFseSB0aGUgYXV0aCBjYW4gZ2V0IHN0dWNrIG9ubHkgaW4gaG9zdFxuICAgICAgLy90aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlXG4gICAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgICAgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgP1xuICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmICghaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIWlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIC8vIG5vIHBhdGggYXQgYWxsLiAgZWFzeS5cbiAgICAvLyB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIG90aGVyIHN0dWZmIGFib3ZlLlxuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQuc2VhcmNoKSB7XG4gICAgICByZXN1bHQucGF0aCA9ICcvJyArIHJlc3VsdC5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGlmIGEgdXJsIEVORHMgaW4gLiBvciAuLiwgdGhlbiBpdCBtdXN0IGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICAvLyBob3dldmVyLCBpZiBpdCBlbmRzIGluIGFueXRoaW5nIGVsc2Ugbm9uLXNsYXNoeSxcbiAgLy8gdGhlbiBpdCBtdXN0IE5PVCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTtcbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSAoXG4gICAgKHJlc3VsdC5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgfHwgc3JjUGF0aC5sZW5ndGggPiAxKSAmJlxuICAgIChsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJykgfHwgbGFzdCA9PT0gJycpO1xuXG4gIC8vIHN0cmlwIHNpbmdsZSBkb3RzLCByZXNvbHZlIGRvdWJsZSBkb3RzIHRvIHBhcmVudCBkaXJcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHNyY1BhdGgubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIGxhc3QgPSBzcmNQYXRoW2ldO1xuICAgIGlmIChsYXN0ID09PSAnLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zXG4gIGlmICghbXVzdEVuZEFicyAmJiAhcmVtb3ZlQWxsRG90cykge1xuICAgIGZvciAoOyB1cC0tOyB1cCkge1xuICAgICAgc3JjUGF0aC51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtdXN0RW5kQWJzICYmIHNyY1BhdGhbMF0gIT09ICcnICYmXG4gICAgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIChzcmNQYXRoLmpvaW4oJy8nKS5zdWJzdHIoLTEpICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC5wdXNoKCcnKTtcbiAgfVxuXG4gIHZhciBpc0Fic29sdXRlID0gc3JjUGF0aFswXSA9PT0gJycgfHxcbiAgICAoc3JjUGF0aFswXSAmJiBzcmNQYXRoWzBdLmNoYXJBdCgwKSA9PT0gJy8nKTtcblxuICAvLyBwdXQgdGhlIGhvc3QgYmFja1xuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBpc0Fic29sdXRlID8gJycgOlxuICAgICAgc3JjUGF0aC5sZW5ndGggPyBzcmNQYXRoLnNoaWZ0KCkgOiAnJztcbiAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgLy90aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlXG4gICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgfHwgKHJlc3VsdC5ob3N0ICYmIHNyY1BhdGgubGVuZ3RoKTtcblxuICBpZiAobXVzdEVuZEFicyAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gc3JjUGF0aC5qb2luKCcvJyk7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgcmVxdWVzdC5odHRwXG4gIGlmICghaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIWlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArXG4gICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gIH1cbiAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoIHx8IHJlc3VsdC5hdXRoO1xuICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7XG4gIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuVXJsLnByb3RvdHlwZS5wYXJzZUhvc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHBhcnNlSG9zdCh0aGlzKTtcbn07XG5cbmZ1bmN0aW9uIHBhcnNlSG9zdChzZWxmKSB7XG4gIHZhciBob3N0ID0gc2VsZi5ob3N0O1xuICB2YXIgcG9ydCA9IHBvcnRQYXR0ZXJuLmV4ZWMoaG9zdCk7XG4gIGlmIChwb3J0KSB7XG4gICAgcG9ydCA9IHBvcnRbMF07XG4gICAgaWYgKHBvcnQgIT09ICc6Jykge1xuICAgICAgc2VsZi5wb3J0ID0gcG9ydC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIGhvc3QgPSBob3N0LnN1YnN0cigwLCBob3N0Lmxlbmd0aCAtIHBvcnQubGVuZ3RoKTtcbiAgfVxuICBpZiAoaG9zdCkgc2VsZi5ob3N0bmFtZSA9IGhvc3Q7XG59XG4iLCAiXG5jb25zdCBwb2x5ZmlsbCA9IHJlcXVpcmUoJ3VybCcpXG5cbmlmIChwb2x5ZmlsbCAmJiBwb2x5ZmlsbC5kZWZhdWx0KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBwb2x5ZmlsbC5kZWZhdWx0XG4gICAgZm9yIChsZXQgayBpbiBwb2x5ZmlsbCkge1xuICAgICAgICBtb2R1bGUuZXhwb3J0c1trXSA9IHBvbHlmaWxsW2tdXG4gICAgfVxufSBlbHNlIGlmIChwb2x5ZmlsbCkgIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsXG59XG5cblxuIiwgImV4cG9ydCBkZWZhdWx0IHt9O1xuIiwgIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gICAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWwud2FzbW9vbiA9IHt9KSk7XG59KSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIF9kb2N1bWVudEN1cnJlbnRTY3JpcHQgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQuY3VycmVudFNjcmlwdCA6IG51bGw7XG4gICAgZXhwb3J0cy5MdWFSZXR1cm4gPSB2b2lkIDA7XG4gICAgKGZ1bmN0aW9uIChMdWFSZXR1cm4pIHtcbiAgICAgICAgTHVhUmV0dXJuW0x1YVJldHVybltcIk9rXCJdID0gMF0gPSBcIk9rXCI7XG4gICAgICAgIEx1YVJldHVybltMdWFSZXR1cm5bXCJZaWVsZFwiXSA9IDFdID0gXCJZaWVsZFwiO1xuICAgICAgICBMdWFSZXR1cm5bTHVhUmV0dXJuW1wiRXJyb3JSdW5cIl0gPSAyXSA9IFwiRXJyb3JSdW5cIjtcbiAgICAgICAgTHVhUmV0dXJuW0x1YVJldHVybltcIkVycm9yU3ludGF4XCJdID0gM10gPSBcIkVycm9yU3ludGF4XCI7XG4gICAgICAgIEx1YVJldHVybltMdWFSZXR1cm5bXCJFcnJvck1lbVwiXSA9IDRdID0gXCJFcnJvck1lbVwiO1xuICAgICAgICBMdWFSZXR1cm5bTHVhUmV0dXJuW1wiRXJyb3JFcnJcIl0gPSA1XSA9IFwiRXJyb3JFcnJcIjtcbiAgICAgICAgTHVhUmV0dXJuW0x1YVJldHVybltcIkVycm9yRmlsZVwiXSA9IDZdID0gXCJFcnJvckZpbGVcIjtcbiAgICB9KShleHBvcnRzLkx1YVJldHVybiB8fCAoZXhwb3J0cy5MdWFSZXR1cm4gPSB7fSkpO1xuICAgIGNvbnN0IFBvaW50ZXJTaXplID0gNDtcbiAgICBjb25zdCBMVUFfTVVMVFJFVCA9IC0xO1xuICAgIGNvbnN0IExVQUlfTUFYU1RBQ0sgPSAxMDAwMDAwO1xuICAgIGNvbnN0IExVQV9SRUdJU1RSWUlOREVYID0gLUxVQUlfTUFYU1RBQ0sgLSAxMDAwO1xuICAgIGV4cG9ydHMuTHVhVHlwZSA9IHZvaWQgMDtcbiAgICAoZnVuY3Rpb24gKEx1YVR5cGUpIHtcbiAgICAgICAgTHVhVHlwZVtMdWFUeXBlW1wiTm9uZVwiXSA9IC0xXSA9IFwiTm9uZVwiO1xuICAgICAgICBMdWFUeXBlW0x1YVR5cGVbXCJOaWxcIl0gPSAwXSA9IFwiTmlsXCI7XG4gICAgICAgIEx1YVR5cGVbTHVhVHlwZVtcIkJvb2xlYW5cIl0gPSAxXSA9IFwiQm9vbGVhblwiO1xuICAgICAgICBMdWFUeXBlW0x1YVR5cGVbXCJMaWdodFVzZXJkYXRhXCJdID0gMl0gPSBcIkxpZ2h0VXNlcmRhdGFcIjtcbiAgICAgICAgTHVhVHlwZVtMdWFUeXBlW1wiTnVtYmVyXCJdID0gM10gPSBcIk51bWJlclwiO1xuICAgICAgICBMdWFUeXBlW0x1YVR5cGVbXCJTdHJpbmdcIl0gPSA0XSA9IFwiU3RyaW5nXCI7XG4gICAgICAgIEx1YVR5cGVbTHVhVHlwZVtcIlRhYmxlXCJdID0gNV0gPSBcIlRhYmxlXCI7XG4gICAgICAgIEx1YVR5cGVbTHVhVHlwZVtcIkZ1bmN0aW9uXCJdID0gNl0gPSBcIkZ1bmN0aW9uXCI7XG4gICAgICAgIEx1YVR5cGVbTHVhVHlwZVtcIlVzZXJkYXRhXCJdID0gN10gPSBcIlVzZXJkYXRhXCI7XG4gICAgICAgIEx1YVR5cGVbTHVhVHlwZVtcIlRocmVhZFwiXSA9IDhdID0gXCJUaHJlYWRcIjtcbiAgICB9KShleHBvcnRzLkx1YVR5cGUgfHwgKGV4cG9ydHMuTHVhVHlwZSA9IHt9KSk7XG4gICAgZXhwb3J0cy5MdWFFdmVudENvZGVzID0gdm9pZCAwO1xuICAgIChmdW5jdGlvbiAoTHVhRXZlbnRDb2Rlcykge1xuICAgICAgICBMdWFFdmVudENvZGVzW0x1YUV2ZW50Q29kZXNbXCJDYWxsXCJdID0gMF0gPSBcIkNhbGxcIjtcbiAgICAgICAgTHVhRXZlbnRDb2Rlc1tMdWFFdmVudENvZGVzW1wiUmV0XCJdID0gMV0gPSBcIlJldFwiO1xuICAgICAgICBMdWFFdmVudENvZGVzW0x1YUV2ZW50Q29kZXNbXCJMaW5lXCJdID0gMl0gPSBcIkxpbmVcIjtcbiAgICAgICAgTHVhRXZlbnRDb2Rlc1tMdWFFdmVudENvZGVzW1wiQ291bnRcIl0gPSAzXSA9IFwiQ291bnRcIjtcbiAgICAgICAgTHVhRXZlbnRDb2Rlc1tMdWFFdmVudENvZGVzW1wiVGFpbENhbGxcIl0gPSA0XSA9IFwiVGFpbENhbGxcIjtcbiAgICB9KShleHBvcnRzLkx1YUV2ZW50Q29kZXMgfHwgKGV4cG9ydHMuTHVhRXZlbnRDb2RlcyA9IHt9KSk7XG4gICAgZXhwb3J0cy5MdWFFdmVudE1hc2tzID0gdm9pZCAwO1xuICAgIChmdW5jdGlvbiAoTHVhRXZlbnRNYXNrcykge1xuICAgICAgICBMdWFFdmVudE1hc2tzW0x1YUV2ZW50TWFza3NbXCJDYWxsXCJdID0gMV0gPSBcIkNhbGxcIjtcbiAgICAgICAgTHVhRXZlbnRNYXNrc1tMdWFFdmVudE1hc2tzW1wiUmV0XCJdID0gMl0gPSBcIlJldFwiO1xuICAgICAgICBMdWFFdmVudE1hc2tzW0x1YUV2ZW50TWFza3NbXCJMaW5lXCJdID0gNF0gPSBcIkxpbmVcIjtcbiAgICAgICAgTHVhRXZlbnRNYXNrc1tMdWFFdmVudE1hc2tzW1wiQ291bnRcIl0gPSA4XSA9IFwiQ291bnRcIjtcbiAgICB9KShleHBvcnRzLkx1YUV2ZW50TWFza3MgfHwgKGV4cG9ydHMuTHVhRXZlbnRNYXNrcyA9IHt9KSk7XG4gICAgZXhwb3J0cy5MdWFMaWJyYXJpZXMgPSB2b2lkIDA7XG4gICAgKGZ1bmN0aW9uIChMdWFMaWJyYXJpZXMpIHtcbiAgICAgICAgTHVhTGlicmFyaWVzW1wiQmFzZVwiXSA9IFwiX0dcIjtcbiAgICAgICAgTHVhTGlicmFyaWVzW1wiQ29yb3V0aW5lXCJdID0gXCJjb3JvdXRpbmVcIjtcbiAgICAgICAgTHVhTGlicmFyaWVzW1wiVGFibGVcIl0gPSBcInRhYmxlXCI7XG4gICAgICAgIEx1YUxpYnJhcmllc1tcIklPXCJdID0gXCJpb1wiO1xuICAgICAgICBMdWFMaWJyYXJpZXNbXCJPU1wiXSA9IFwib3NcIjtcbiAgICAgICAgTHVhTGlicmFyaWVzW1wiU3RyaW5nXCJdID0gXCJzdHJpbmdcIjtcbiAgICAgICAgTHVhTGlicmFyaWVzW1wiVVRGOFwiXSA9IFwidXRmOFwiO1xuICAgICAgICBMdWFMaWJyYXJpZXNbXCJNYXRoXCJdID0gXCJtYXRoXCI7XG4gICAgICAgIEx1YUxpYnJhcmllc1tcIkRlYnVnXCJdID0gXCJkZWJ1Z1wiO1xuICAgICAgICBMdWFMaWJyYXJpZXNbXCJQYWNrYWdlXCJdID0gXCJwYWNrYWdlXCI7XG4gICAgfSkoZXhwb3J0cy5MdWFMaWJyYXJpZXMgfHwgKGV4cG9ydHMuTHVhTGlicmFyaWVzID0ge30pKTtcbiAgICBjbGFzcyBMdWFUaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgfVxuXG4gICAgY2xhc3MgRGVjb3JhdGlvbiB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlY29yYXRlKHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IERlY29yYXRpb24odGFyZ2V0LCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBjbGFzcyBQb2ludGVyIGV4dGVuZHMgTnVtYmVyIHtcbiAgICB9XG5cbiAgICBjbGFzcyBNdWx0aVJldHVybiBleHRlbmRzIEFycmF5IHtcbiAgICB9XG5cbiAgICBjb25zdCBJTlNUUlVDVElPTl9IT09LX0NPVU5UID0gMTAwMDtcbiAgICBjbGFzcyBUaHJlYWQge1xuICAgICAgICBjb25zdHJ1Y3RvcihsdWEsIHR5cGVFeHRlbnNpb25zLCBhZGRyZXNzLCBwYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmx1YSA9IGx1YTtcbiAgICAgICAgICAgIHRoaXMudHlwZUV4dGVuc2lvbnMgPSB0eXBlRXh0ZW5zaW9ucztcbiAgICAgICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICBuZXdUaHJlYWQoKSB7XG4gICAgICAgICAgICBjb25zdCBhZGRyZXNzID0gdGhpcy5sdWEubHVhX25ld3RocmVhZCh0aGlzLmFkZHJlc3MpO1xuICAgICAgICAgICAgaWYgKCFhZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdsdWFfbmV3dGhyZWFkIHJldHVybmVkIGEgbnVsbCBwb2ludGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRocmVhZCh0aGlzLmx1YSwgdGhpcy50eXBlRXh0ZW5zaW9ucywgYWRkcmVzcywgdGhpcy5wYXJlbnQgfHwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzZXRUaHJlYWQoKSB7XG4gICAgICAgICAgICB0aGlzLmFzc2VydE9rKHRoaXMubHVhLmx1YV9yZXNldHRocmVhZCh0aGlzLmFkZHJlc3MpKTtcbiAgICAgICAgfVxuICAgICAgICBsb2FkU3RyaW5nKGx1YUNvZGUsIG5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLmx1YS5tb2R1bGUubGVuZ3RoQnl0ZXNVVEY4KGx1YUNvZGUpO1xuICAgICAgICAgICAgY29uc3QgcG9pbnRlclNpemUgPSBzaXplICsgMTtcbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlclBvaW50ZXIgPSB0aGlzLmx1YS5tb2R1bGUuX21hbGxvYyhwb2ludGVyU2l6ZSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMubHVhLm1vZHVsZS5zdHJpbmdUb1VURjgobHVhQ29kZSwgYnVmZmVyUG9pbnRlciwgcG9pbnRlclNpemUpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXJ0T2sodGhpcy5sdWEubHVhTF9sb2FkYnVmZmVyeCh0aGlzLmFkZHJlc3MsIGJ1ZmZlclBvaW50ZXIsIHNpemUsIG5hbWUgIT09IG51bGwgJiYgbmFtZSAhPT0gdm9pZCAwID8gbmFtZSA6IGJ1ZmZlclBvaW50ZXIsIG51bGwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRoaXMubHVhLm1vZHVsZS5fZnJlZShidWZmZXJQb2ludGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsb2FkRmlsZShmaWxlbmFtZSkge1xuICAgICAgICAgICAgdGhpcy5hc3NlcnRPayh0aGlzLmx1YS5sdWFMX2xvYWRmaWxleCh0aGlzLmFkZHJlc3MsIGZpbGVuYW1lLCBudWxsKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdW1lKGFyZ0NvdW50ID0gMCkge1xuICAgICAgICAgICAgY29uc3QgZGF0YVBvaW50ZXIgPSB0aGlzLmx1YS5tb2R1bGUuX21hbGxvYyhQb2ludGVyU2l6ZSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMubHVhLm1vZHVsZS5zZXRWYWx1ZShkYXRhUG9pbnRlciwgMCwgJ2kzMicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGx1YVJlc3VsdCA9IHRoaXMubHVhLmx1YV9yZXN1bWUodGhpcy5hZGRyZXNzLCBudWxsLCBhcmdDb3VudCwgZGF0YVBvaW50ZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogbHVhUmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICByZXN1bHRDb3VudDogdGhpcy5sdWEubW9kdWxlLmdldFZhbHVlKGRhdGFQb2ludGVyLCAnaTMyJyksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRoaXMubHVhLm1vZHVsZS5fZnJlZShkYXRhUG9pbnRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2V0VG9wKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubHVhLmx1YV9nZXR0b3AodGhpcy5hZGRyZXNzKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRUb3AoaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMubHVhLmx1YV9zZXR0b3AodGhpcy5hZGRyZXNzLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVtb3ZlKGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sdWEubHVhX3JlbW92ZSh0aGlzLmFkZHJlc3MsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBzZXRGaWVsZChpbmRleCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5sdWEubHVhX2Fic2luZGV4KHRoaXMuYWRkcmVzcywgaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5wdXNoVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5sdWEubHVhX3NldGZpZWxkKHRoaXMuYWRkcmVzcywgaW5kZXgsIG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGFzeW5jIHJ1bihhcmdDb3VudCA9IDAsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsVGltZW91dCA9IHRoaXMudGltZW91dDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudGltZW91dCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRpbWVvdXQoRGF0ZS5ub3coKSArIG9wdGlvbnMudGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCByZXN1bWVSZXN1bHQgPSB0aGlzLnJlc3VtZShhcmdDb3VudCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHJlc3VtZVJlc3VsdC5yZXN1bHQgPT09IGV4cG9ydHMuTHVhUmV0dXJuLllpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRpbWVvdXQgJiYgRGF0ZS5ub3coKSA+IHRoaXMudGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VtZVJlc3VsdC5yZXN1bHRDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcChyZXN1bWVSZXN1bHQucmVzdWx0Q291bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEx1YVRpbWVvdXRFcnJvcihgdGhyZWFkIHRpbWVvdXQgZXhjZWVkZWRgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdW1lUmVzdWx0LnJlc3VsdENvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdFZhbHVlID0gdGhpcy5nZXRWYWx1ZSgtMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcChyZXN1bWVSZXN1bHQucmVzdWx0Q291bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RWYWx1ZSA9PT0gUHJvbWlzZS5yZXNvbHZlKGxhc3RWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBsYXN0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0SW1tZWRpYXRlKHJlc29sdmUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRJbW1lZGlhdGUocmVzb2x2ZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VtZVJlc3VsdCA9IHRoaXMucmVzdW1lKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmFzc2VydE9rKHJlc3VtZVJlc3VsdC5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN0YWNrVmFsdWVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBpZiAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy50aW1lb3V0KSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VGltZW91dChvcmlnaW5hbFRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBydW5TeW5jKGFyZ0NvdW50ID0gMCkge1xuICAgICAgICAgICAgY29uc3QgYmFzZSA9IHRoaXMuZ2V0VG9wKCkgLSBhcmdDb3VudCAtIDE7XG4gICAgICAgICAgICB0aGlzLmFzc2VydE9rKHRoaXMubHVhLmx1YV9wY2FsbGsodGhpcy5hZGRyZXNzLCBhcmdDb3VudCwgTFVBX01VTFRSRVQsIDAsIDAsIG51bGwpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN0YWNrVmFsdWVzKGJhc2UpO1xuICAgICAgICB9XG4gICAgICAgIHBvcChjb3VudCA9IDEpIHtcbiAgICAgICAgICAgIHRoaXMubHVhLmx1YV9wb3AodGhpcy5hZGRyZXNzLCBjb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbChuYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5sdWEubHVhX2dldGdsb2JhbCh0aGlzLmFkZHJlc3MsIG5hbWUpO1xuICAgICAgICAgICAgaWYgKHR5cGUgIT09IGV4cG9ydHMuTHVhVHlwZS5GdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBmdW5jdGlvbiBvZiB0eXBlICcke3R5cGV9JyB3YXMgcHVzaGVkLCBleHBlY3RlZCBpcyAke2V4cG9ydHMuTHVhVHlwZS5GdW5jdGlvbn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgYXJnIG9mIGFyZ3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2hWYWx1ZShhcmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYmFzZSA9IHRoaXMuZ2V0VG9wKCkgLSBhcmdzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB0aGlzLmx1YS5sdWFfY2FsbGsodGhpcy5hZGRyZXNzLCBhcmdzLmxlbmd0aCwgTFVBX01VTFRSRVQsIDAsIG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RhY2tWYWx1ZXMoYmFzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0U3RhY2tWYWx1ZXMoc3RhcnQgPSAwKSB7XG4gICAgICAgICAgICBjb25zdCByZXR1cm5zID0gdGhpcy5nZXRUb3AoKSAtIHN0YXJ0O1xuICAgICAgICAgICAgY29uc3QgcmV0dXJuVmFsdWVzID0gbmV3IE11bHRpUmV0dXJuKHJldHVybnMpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXR1cm5zOyBpKyspIHtcbiAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZXNbaV0gPSB0aGlzLmdldFZhbHVlKHN0YXJ0ICsgaSArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlcztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZVRvVGhyZWFkKEwpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiBMID09PSAoKF9hID0gdGhpcy5wYXJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hZGRyZXNzKSA/IHRoaXMucGFyZW50IDogbmV3IFRocmVhZCh0aGlzLmx1YSwgdGhpcy50eXBlRXh0ZW5zaW9ucywgTCwgdGhpcy5wYXJlbnQgfHwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcHVzaFZhbHVlKHJhd1ZhbHVlLCB1c2VyZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgZGVjb3JhdGVkVmFsdWUgPSB0aGlzLmdldFZhbHVlRGVjb3JhdGlvbnMocmF3VmFsdWUpO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZGVjb3JhdGVkVmFsdWUudGFyZ2V0O1xuICAgICAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIFRocmVhZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzTWFpbiA9IHRoaXMubHVhLmx1YV9wdXNodGhyZWFkKHRhcmdldC5hZGRyZXNzKSA9PT0gMTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTWFpbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmx1YS5sdWFfeG1vdmUodGFyZ2V0LmFkZHJlc3MsIHRoaXMuYWRkcmVzcywgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0VG9wID0gdGhpcy5nZXRUb3AoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIHRhcmdldCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubHVhLmx1YV9wdXNobmlsKHRoaXMuYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubHVhLmx1YV9wdXNoaW50ZWdlcih0aGlzLmFkZHJlc3MsIEJpZ0ludCh0YXJnZXQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubHVhLmx1YV9wdXNobnVtYmVyKHRoaXMuYWRkcmVzcywgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmx1YS5sdWFfcHVzaHN0cmluZyh0aGlzLmFkZHJlc3MsIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmx1YS5sdWFfcHVzaGJvb2xlYW4odGhpcy5hZGRyZXNzLCB0YXJnZXQgPyAxIDogMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy50eXBlRXh0ZW5zaW9ucy5maW5kKCh3cmFwcGVyKSA9PiB3cmFwcGVyLmV4dGVuc2lvbi5wdXNoVmFsdWUodGhpcywgZGVjb3JhdGVkVmFsdWUsIHVzZXJkYXRhKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHR5cGUgJyR7dHlwZW9mIHRhcmdldH0nIGlzIG5vdCBzdXBwb3J0ZWQgYnkgTHVhYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZWNvcmF0ZWRWYWx1ZS5vcHRpb25zLm1ldGF0YWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0TWV0YXRhYmxlKC0xLCBkZWNvcmF0ZWRWYWx1ZS5vcHRpb25zLm1ldGF0YWJsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRUb3AoKSAhPT0gc3RhcnRUb3AgKyAxKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBwdXNoVmFsdWUgZXhwZWN0ZWQgc3RhY2sgc2l6ZSAke3N0YXJ0VG9wICsgMX0sIGdvdCAke3RoaXMuZ2V0VG9wKCl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2V0TWV0YXRhYmxlKGluZGV4LCBtZXRhdGFibGUpIHtcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5sdWEubHVhX2Fic2luZGV4KHRoaXMuYWRkcmVzcywgaW5kZXgpO1xuICAgICAgICAgICAgaWYgKHRoaXMubHVhLmx1YV9nZXRtZXRhdGFibGUodGhpcy5hZGRyZXNzLCBpbmRleCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcCgxKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5nZXRNZXRhdGFibGVOYW1lKGluZGV4KTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRhdGEgYWxyZWFkeSBoYXMgYXNzb2NpYXRlZCBtZXRhdGFibGU6ICR7bmFtZSB8fCAndW5rbm93biBuYW1lJ31gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHVzaFZhbHVlKG1ldGF0YWJsZSk7XG4gICAgICAgICAgICB0aGlzLmx1YS5sdWFfc2V0bWV0YXRhYmxlKHRoaXMuYWRkcmVzcywgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGdldE1ldGF0YWJsZU5hbWUoaW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGF0YWJsZU5hbWVUeXBlID0gdGhpcy5sdWEubHVhTF9nZXRtZXRhZmllbGQodGhpcy5hZGRyZXNzLCBpbmRleCwgJ19fbmFtZScpO1xuICAgICAgICAgICAgaWYgKG1ldGF0YWJsZU5hbWVUeXBlID09PSBleHBvcnRzLkx1YVR5cGUuTmlsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXRhdGFibGVOYW1lVHlwZSAhPT0gZXhwb3J0cy5MdWFUeXBlLlN0cmluZykge1xuICAgICAgICAgICAgICAgIHRoaXMucG9wKDEpO1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5sdWEubHVhX3RvbHN0cmluZyh0aGlzLmFkZHJlc3MsIC0xLCBudWxsKTtcbiAgICAgICAgICAgIHRoaXMucG9wKDEpO1xuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0VmFsdWUoaW5kZXgsIGlucHV0VHlwZSwgdXNlcmRhdGEpIHtcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5sdWEubHVhX2Fic2luZGV4KHRoaXMuYWRkcmVzcywgaW5kZXgpO1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGlucHV0VHlwZSAhPT0gbnVsbCAmJiBpbnB1dFR5cGUgIT09IHZvaWQgMCA/IGlucHV0VHlwZSA6IHRoaXMubHVhLmx1YV90eXBlKHRoaXMuYWRkcmVzcywgaW5kZXgpO1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBleHBvcnRzLkx1YVR5cGUuTm9uZTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBjYXNlIGV4cG9ydHMuTHVhVHlwZS5OaWw6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5MdWFUeXBlLk51bWJlcjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubHVhLmx1YV90b251bWJlcngodGhpcy5hZGRyZXNzLCBpbmRleCwgbnVsbCk7XG4gICAgICAgICAgICAgICAgY2FzZSBleHBvcnRzLkx1YVR5cGUuU3RyaW5nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sdWEubHVhX3RvbHN0cmluZyh0aGlzLmFkZHJlc3MsIGluZGV4LCBudWxsKTtcbiAgICAgICAgICAgICAgICBjYXNlIGV4cG9ydHMuTHVhVHlwZS5Cb29sZWFuOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLmx1YS5sdWFfdG9ib29sZWFuKHRoaXMuYWRkcmVzcywgaW5kZXgpKTtcbiAgICAgICAgICAgICAgICBjYXNlIGV4cG9ydHMuTHVhVHlwZS5UaHJlYWQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlVG9UaHJlYWQodGhpcy5sdWEubHVhX3RvdGhyZWFkKHRoaXMuYWRkcmVzcywgaW5kZXgpKTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtZXRhdGFibGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gZXhwb3J0cy5MdWFUeXBlLlRhYmxlIHx8IHR5cGUgPT09IGV4cG9ydHMuTHVhVHlwZS5Vc2VyZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YXRhYmxlTmFtZSA9IHRoaXMuZ2V0TWV0YXRhYmxlTmFtZShpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZUV4dGVuc2lvbldyYXBwZXIgPSB0aGlzLnR5cGVFeHRlbnNpb25zLmZpbmQoKHdyYXBwZXIpID0+IHdyYXBwZXIuZXh0ZW5zaW9uLmlzVHlwZSh0aGlzLCBpbmRleCwgdHlwZSwgbWV0YXRhYmxlTmFtZSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZUV4dGVuc2lvbldyYXBwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlRXh0ZW5zaW9uV3JhcHBlci5leHRlbnNpb24uZ2V0VmFsdWUodGhpcywgaW5kZXgsIHVzZXJkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFRoZSB0eXBlICcke3RoaXMubHVhLmx1YV90eXBlbmFtZSh0aGlzLmFkZHJlc3MsIHR5cGUpfScgcmV0dXJuZWQgaXMgbm90IHN1cHBvcnRlZCBvbiBKU2ApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50ZXIodGhpcy5sdWEubHVhX3RvcG9pbnRlcih0aGlzLmFkZHJlc3MsIGluZGV4KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNsb3NlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNDbG9zZWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmhvb2tGdW5jdGlvblBvaW50ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmx1YS5tb2R1bGUucmVtb3ZlRnVuY3Rpb24odGhpcy5ob29rRnVuY3Rpb25Qb2ludGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KHRpbWVvdXQpIHtcbiAgICAgICAgICAgIGlmICh0aW1lb3V0ICYmIHRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmhvb2tGdW5jdGlvblBvaW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ob29rRnVuY3Rpb25Qb2ludGVyID0gdGhpcy5sdWEubW9kdWxlLmFkZEZ1bmN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChEYXRlLm5vdygpID4gdGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaFZhbHVlKG5ldyBMdWFUaW1lb3V0RXJyb3IoYHRocmVhZCB0aW1lb3V0IGV4Y2VlZGVkYCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubHVhLmx1YV9lcnJvcih0aGlzLmFkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCAndmlpJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubHVhLmx1YV9zZXRob29rKHRoaXMuYWRkcmVzcywgdGhpcy5ob29rRnVuY3Rpb25Qb2ludGVyLCBleHBvcnRzLkx1YUV2ZW50TWFza3MuQ291bnQsIElOU1RSVUNUSU9OX0hPT0tfQ09VTlQpO1xuICAgICAgICAgICAgICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmhvb2tGdW5jdGlvblBvaW50ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhvb2tGdW5jdGlvblBvaW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy50aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRoaXMubHVhLmx1YV9zZXRob29rKHRoaXMuYWRkcmVzcywgbnVsbCwgMCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2V0VGltZW91dCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0UG9pbnRlcihpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludGVyKHRoaXMubHVhLmx1YV90b3BvaW50ZXIodGhpcy5hZGRyZXNzLCBpbmRleCkpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ2xvc2VkKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLmFkZHJlc3MgfHwgdGhpcy5jbG9zZWQgfHwgQm9vbGVhbigoX2EgPSB0aGlzLnBhcmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlzQ2xvc2VkKCkpO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4VG9TdHJpbmcoaW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0ciA9IHRoaXMubHVhLmx1YUxfdG9sc3RyaW5nKHRoaXMuYWRkcmVzcywgaW5kZXgsIG51bGwpO1xuICAgICAgICAgICAgdGhpcy5wb3AoKTtcbiAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIH1cbiAgICAgICAgZHVtcFN0YWNrKGxvZyA9IGNvbnNvbGUubG9nKSB7XG4gICAgICAgICAgICBjb25zdCB0b3AgPSB0aGlzLmdldFRvcCgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gdG9wOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5sdWEubHVhX3R5cGUodGhpcy5hZGRyZXNzLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlbmFtZSA9IHRoaXMubHVhLmx1YV90eXBlbmFtZSh0aGlzLmFkZHJlc3MsIHR5cGUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvaW50ZXIgPSB0aGlzLmdldFBvaW50ZXIoaSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuaW5kZXhUb1N0cmluZyhpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoaSwgdHlwZSk7XG4gICAgICAgICAgICAgICAgbG9nKGksIHR5cGVuYW1lLCBwb2ludGVyLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0T2socmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9PSBleHBvcnRzLkx1YVJldHVybi5PayAmJiByZXN1bHQgIT09IGV4cG9ydHMuTHVhUmV0dXJuLllpZWxkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0U3RyaW5nID0gZXhwb3J0cy5MdWFSZXR1cm5bcmVzdWx0XTtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgTHVhIEVycm9yKCR7cmVzdWx0U3RyaW5nfS8ke3Jlc3VsdH0pYCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0VG9wKCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IGV4cG9ydHMuTHVhUmV0dXJuLkVycm9yTWVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5tZXNzYWdlID0gdGhpcy5sdWEubHVhX3RvbHN0cmluZyh0aGlzLmFkZHJlc3MsIC0xLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGx1YUVycm9yID0gdGhpcy5nZXRWYWx1ZSgtMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobHVhRXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLnN0YWNrID0gbHVhRXJyb3Iuc3RhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5tZXNzYWdlID0gdGhpcy5pbmRleFRvU3RyaW5nKC0xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9PSBleHBvcnRzLkx1YVJldHVybi5FcnJvck1lbSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sdWEubHVhTF90cmFjZWJhY2sodGhpcy5hZGRyZXNzLCB0aGlzLmFkZHJlc3MsIG51bGwsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhY2ViYWNrID0gdGhpcy5sdWEubHVhX3RvbHN0cmluZyh0aGlzLmFkZHJlc3MsIC0xLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFjZWJhY2sudHJpbSgpICE9PSAnc3RhY2sgdHJhY2ViYWNrOicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5tZXNzYWdlID0gYCR7ZXJyb3IubWVzc2FnZX1cXG4ke3RyYWNlYmFja31gO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3AoMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gZ2VuZXJhdGUgc3RhY2sgdHJhY2UnLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdldFZhbHVlRGVjb3JhdGlvbnModmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERlY29yYXRpb24gPyB2YWx1ZSA6IG5ldyBEZWNvcmF0aW9uKHZhbHVlLCB7fSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGFzcyBHbG9iYWwgZXh0ZW5kcyBUaHJlYWQge1xuICAgICAgICBjb25zdHJ1Y3RvcihjbW9kdWxlLCBzaG91bGRUcmFjZUFsbG9jYXRpb25zKSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkVHJhY2VBbGxvY2F0aW9ucykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lbW9yeVN0YXRzID0geyBtZW1vcnlVc2VkOiAwIH07XG4gICAgICAgICAgICAgICAgY29uc3QgYWxsb2NhdG9yRnVuY3Rpb25Qb2ludGVyID0gY21vZHVsZS5tb2R1bGUuYWRkRnVuY3Rpb24oKF91c2VyRGF0YSwgcG9pbnRlciwgb2xkU2l6ZSwgbmV3U2l6ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3U2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW1vcnlTdGF0cy5tZW1vcnlVc2VkIC09IG9sZFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY21vZHVsZS5tb2R1bGUuX2ZyZWUocG9pbnRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmRNZW1vcnlEZWx0YSA9IHBvaW50ZXIgPyBuZXdTaXplIC0gb2xkU2l6ZSA6IG5ld1NpemU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZE1lbW9yeSA9IG1lbW9yeVN0YXRzLm1lbW9yeVVzZWQgKyBlbmRNZW1vcnlEZWx0YTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1NpemUgPiBvbGRTaXplICYmIG1lbW9yeVN0YXRzLm1lbW9yeU1heCAmJiBlbmRNZW1vcnkgPiBtZW1vcnlTdGF0cy5tZW1vcnlNYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlYWxsb2NhdGVkID0gY21vZHVsZS5tb2R1bGUuX3JlYWxsb2MocG9pbnRlciwgbmV3U2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWFsbG9jYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVtb3J5U3RhdHMubWVtb3J5VXNlZCA9IGVuZE1lbW9yeTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhbGxvY2F0ZWQ7XG4gICAgICAgICAgICAgICAgfSwgJ2lpaWlpJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgYWRkcmVzcyA9IGNtb2R1bGUubHVhX25ld3N0YXRlKGFsbG9jYXRvckZ1bmN0aW9uUG9pbnRlciwgbnVsbCk7XG4gICAgICAgICAgICAgICAgaWYgKCFhZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNtb2R1bGUubW9kdWxlLnJlbW92ZUZ1bmN0aW9uKGFsbG9jYXRvckZ1bmN0aW9uUG9pbnRlcik7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbHVhX25ld3N0YXRlIHJldHVybmVkIGEgbnVsbCBwb2ludGVyJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN1cGVyKGNtb2R1bGUsIFtdLCBhZGRyZXNzKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1lbW9yeVN0YXRzID0gbWVtb3J5U3RhdHM7XG4gICAgICAgICAgICAgICAgdGhpcy5hbGxvY2F0b3JGdW5jdGlvblBvaW50ZXIgPSBhbGxvY2F0b3JGdW5jdGlvblBvaW50ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdXBlcihjbW9kdWxlLCBbXSwgY21vZHVsZS5sdWFMX25ld3N0YXRlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNDbG9zZWQoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignR2xvYmFsIHN0YXRlIGNvdWxkIG5vdCBiZSBjcmVhdGVkIChwcm9iYWJseSBkdWUgdG8gbGFjayBvZiBtZW1vcnkpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2xvc2UoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0Nsb3NlZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3VwZXIuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMubHVhLmx1YV9jbG9zZSh0aGlzLmFkZHJlc3MpO1xuICAgICAgICAgICAgaWYgKHRoaXMuYWxsb2NhdG9yRnVuY3Rpb25Qb2ludGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sdWEubW9kdWxlLnJlbW92ZUZ1bmN0aW9uKHRoaXMuYWxsb2NhdG9yRnVuY3Rpb25Qb2ludGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3Qgd3JhcHBlciBvZiB0aGlzLnR5cGVFeHRlbnNpb25zKSB7XG4gICAgICAgICAgICAgICAgd3JhcHBlci5leHRlbnNpb24uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZWdpc3RlclR5cGVFeHRlbnNpb24ocHJpb3JpdHksIGV4dGVuc2lvbikge1xuICAgICAgICAgICAgdGhpcy50eXBlRXh0ZW5zaW9ucy5wdXNoKHsgZXh0ZW5zaW9uLCBwcmlvcml0eSB9KTtcbiAgICAgICAgICAgIHRoaXMudHlwZUV4dGVuc2lvbnMuc29ydCgoYSwgYikgPT4gYi5wcmlvcml0eSAtIGEucHJpb3JpdHkpO1xuICAgICAgICB9XG4gICAgICAgIGxvYWRMaWJyYXJ5KGxpYnJhcnkpIHtcbiAgICAgICAgICAgIHN3aXRjaCAobGlicmFyeSkge1xuICAgICAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5MdWFMaWJyYXJpZXMuQmFzZTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sdWEubHVhb3Blbl9iYXNlKHRoaXMuYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5MdWFMaWJyYXJpZXMuQ29yb3V0aW5lOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmx1YS5sdWFvcGVuX2Nvcm91dGluZSh0aGlzLmFkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGV4cG9ydHMuTHVhTGlicmFyaWVzLlRhYmxlOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmx1YS5sdWFvcGVuX3RhYmxlKHRoaXMuYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5MdWFMaWJyYXJpZXMuSU86XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubHVhLmx1YW9wZW5faW8odGhpcy5hZGRyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBleHBvcnRzLkx1YUxpYnJhcmllcy5PUzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sdWEubHVhb3Blbl9vcyh0aGlzLmFkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGV4cG9ydHMuTHVhTGlicmFyaWVzLlN0cmluZzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sdWEubHVhb3Blbl9zdHJpbmcodGhpcy5hZGRyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBleHBvcnRzLkx1YUxpYnJhcmllcy5VVEY4OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmx1YS5sdWFvcGVuX3N0cmluZyh0aGlzLmFkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGV4cG9ydHMuTHVhTGlicmFyaWVzLk1hdGg6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubHVhLmx1YW9wZW5fbWF0aCh0aGlzLmFkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGV4cG9ydHMuTHVhTGlicmFyaWVzLkRlYnVnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmx1YS5sdWFvcGVuX2RlYnVnKHRoaXMuYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5MdWFMaWJyYXJpZXMuUGFja2FnZTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sdWEubHVhb3Blbl9wYWNrYWdlKHRoaXMuYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5sdWEubHVhX3NldGdsb2JhbCh0aGlzLmFkZHJlc3MsIGxpYnJhcnkpO1xuICAgICAgICB9XG4gICAgICAgIGdldChuYW1lKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5sdWEubHVhX2dldGdsb2JhbCh0aGlzLmFkZHJlc3MsIG5hbWUpO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldFZhbHVlKC0xLCB0eXBlKTtcbiAgICAgICAgICAgIHRoaXMucG9wKCk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0KG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2hWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmx1YS5sdWFfc2V0Z2xvYmFsKHRoaXMuYWRkcmVzcywgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0VGFibGUobmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0U3RhY2tUb3AgPSB0aGlzLmdldFRvcCgpO1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHRoaXMubHVhLmx1YV9nZXRnbG9iYWwodGhpcy5hZGRyZXNzLCBuYW1lKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgIT09IGV4cG9ydHMuTHVhVHlwZS5UYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBVbmV4cGVjdGVkIHR5cGUgaW4gJHtuYW1lfS4gRXhwZWN0ZWQgJHtleHBvcnRzLkx1YVR5cGVbZXhwb3J0cy5MdWFUeXBlLlRhYmxlXX0uIEdvdCAke2V4cG9ydHMuTHVhVHlwZVt0eXBlXX0uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHN0YXJ0U3RhY2tUb3AgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldFRvcCgpICE9PSBzdGFydFN0YWNrVG9wICsgMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYGdldFRhYmxlOiBleHBlY3RlZCBzdGFjayBzaXplICR7c3RhcnRTdGFja1RvcH0gZ290ICR7dGhpcy5nZXRUb3AoKX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUb3Aoc3RhcnRTdGFja1RvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2V0TWVtb3J5VXNlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE1lbW9yeVN0YXRzUmVmKCkubWVtb3J5VXNlZDtcbiAgICAgICAgfVxuICAgICAgICBnZXRNZW1vcnlNYXgoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRNZW1vcnlTdGF0c1JlZigpLm1lbW9yeU1heDtcbiAgICAgICAgfVxuICAgICAgICBzZXRNZW1vcnlNYXgobWF4KSB7XG4gICAgICAgICAgICB0aGlzLmdldE1lbW9yeVN0YXRzUmVmKCkubWVtb3J5TWF4ID0gbWF4O1xuICAgICAgICB9XG4gICAgICAgIGdldE1lbW9yeVN0YXRzUmVmKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLm1lbW9yeVN0YXRzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZW1vcnkgYWxsb2NhdGlvbnMgaXMgbm90IGJlaW5nIHRyYWNlZCwgcGxlYXNlIGJ1aWxkIGVuZ2luZSB3aXRoIHsgdHJhY2VBbGxvY2F0aW9uczogdHJ1ZSB9Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tZW1vcnlTdGF0cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsYXNzIEx1YVR5cGVFeHRlbnNpb24ge1xuICAgICAgICBjb25zdHJ1Y3Rvcih0aHJlYWQsIG5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMudGhyZWFkID0gdGhyZWFkO1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgfVxuICAgICAgICBpc1R5cGUoX3RocmVhZCwgX2luZGV4LCB0eXBlLCBuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZSA9PT0gZXhwb3J0cy5MdWFUeXBlLlVzZXJkYXRhICYmIG5hbWUgPT09IHRoaXMubmFtZTtcbiAgICAgICAgfVxuICAgICAgICBnZXRWYWx1ZSh0aHJlYWQsIGluZGV4LCBfdXNlcmRhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlZlVzZXJkYXRhID0gdGhyZWFkLmx1YS5sdWFMX3Rlc3R1ZGF0YSh0aHJlYWQuYWRkcmVzcywgaW5kZXgsIHRoaXMubmFtZSk7XG4gICAgICAgICAgICBpZiAoIXJlZlVzZXJkYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBkYXRhIGRvZXMgbm90IGhhdmUgdGhlIGV4cGVjdGVkIG1ldGF0YWJsZTogJHt0aGlzLm5hbWV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZWZlcmVuY2VQb2ludGVyID0gdGhyZWFkLmx1YS5tb2R1bGUuZ2V0VmFsdWUocmVmVXNlcmRhdGEsICcqJyk7XG4gICAgICAgICAgICByZXR1cm4gdGhyZWFkLmx1YS5nZXRSZWYocmVmZXJlbmNlUG9pbnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgcHVzaFZhbHVlKHRocmVhZCwgZGVjb3JhdGVkVmFsdWUsIF91c2VyZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgeyB0YXJnZXQgfSA9IGRlY29yYXRlZFZhbHVlO1xuICAgICAgICAgICAgY29uc3QgcG9pbnRlciA9IHRocmVhZC5sdWEucmVmKHRhcmdldCk7XG4gICAgICAgICAgICBjb25zdCB1c2VyRGF0YVBvaW50ZXIgPSB0aHJlYWQubHVhLmx1YV9uZXd1c2VyZGF0YXV2KHRocmVhZC5hZGRyZXNzLCBQb2ludGVyU2l6ZSwgMCk7XG4gICAgICAgICAgICB0aHJlYWQubHVhLm1vZHVsZS5zZXRWYWx1ZSh1c2VyRGF0YVBvaW50ZXIsIHBvaW50ZXIsICcqJyk7XG4gICAgICAgICAgICBpZiAoZXhwb3J0cy5MdWFUeXBlLk5pbCA9PT0gdGhyZWFkLmx1YS5sdWFMX2dldG1ldGF0YWJsZSh0aHJlYWQuYWRkcmVzcywgdGhpcy5uYW1lKSkge1xuICAgICAgICAgICAgICAgIHRocmVhZC5wb3AoMik7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBtZXRhdGFibGUgbm90IGZvdW5kOiAke3RoaXMubmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocmVhZC5sdWEubHVhX3NldG1ldGF0YWJsZSh0aHJlYWQuYWRkcmVzcywgLTIpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGFzcyBFcnJvclR5cGVFeHRlbnNpb24gZXh0ZW5kcyBMdWFUeXBlRXh0ZW5zaW9uIHtcbiAgICAgICAgY29uc3RydWN0b3IodGhyZWFkLCBpbmplY3RPYmplY3QpIHtcbiAgICAgICAgICAgIHN1cGVyKHRocmVhZCwgJ2pzX2Vycm9yJyk7XG4gICAgICAgICAgICB0aGlzLmdjUG9pbnRlciA9IHRocmVhZC5sdWEubW9kdWxlLmFkZEZ1bmN0aW9uKChmdW5jdGlvblN0YXRlQWRkcmVzcykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJEYXRhUG9pbnRlciA9IHRocmVhZC5sdWEubHVhTF9jaGVja3VkYXRhKGZ1bmN0aW9uU3RhdGVBZGRyZXNzLCAxLCB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZVBvaW50ZXIgPSB0aHJlYWQubHVhLm1vZHVsZS5nZXRWYWx1ZSh1c2VyRGF0YVBvaW50ZXIsICcqJyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS51bnJlZihyZWZlcmVuY2VQb2ludGVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0cy5MdWFSZXR1cm4uT2s7XG4gICAgICAgICAgICB9LCAnaWknKTtcbiAgICAgICAgICAgIGlmICh0aHJlYWQubHVhLmx1YUxfbmV3bWV0YXRhYmxlKHRocmVhZC5hZGRyZXNzLCB0aGlzLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YXRhYmxlSW5kZXggPSB0aHJlYWQubHVhLmx1YV9nZXR0b3AodGhyZWFkLmFkZHJlc3MpO1xuICAgICAgICAgICAgICAgIHRocmVhZC5sdWEubHVhX3B1c2hzdHJpbmcodGhyZWFkLmFkZHJlc3MsICdwcm90ZWN0ZWQgbWV0YXRhYmxlJyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfc2V0ZmllbGQodGhyZWFkLmFkZHJlc3MsIG1ldGF0YWJsZUluZGV4LCAnX19tZXRhdGFibGUnKTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9wdXNoY2Nsb3N1cmUodGhyZWFkLmFkZHJlc3MsIHRoaXMuZ2NQb2ludGVyLCAwKTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9zZXRmaWVsZCh0aHJlYWQuYWRkcmVzcywgbWV0YXRhYmxlSW5kZXgsICdfX2djJyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLnB1c2hWYWx1ZSgoanNSZWZFcnJvciwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdtZXNzYWdlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGpzUmVmRXJyb3IubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9zZXRmaWVsZCh0aHJlYWQuYWRkcmVzcywgbWV0YXRhYmxlSW5kZXgsICdfX2luZGV4Jyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLnB1c2hWYWx1ZSgoanNSZWZFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ganNSZWZFcnJvci5tZXNzYWdlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRocmVhZC5sdWEubHVhX3NldGZpZWxkKHRocmVhZC5hZGRyZXNzLCBtZXRhdGFibGVJbmRleCwgJ19fdG9zdHJpbmcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocmVhZC5sdWEubHVhX3BvcCh0aHJlYWQuYWRkcmVzcywgMSk7XG4gICAgICAgICAgICBpZiAoaW5qZWN0T2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdGhyZWFkLnNldCgnRXJyb3InLCB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZTogKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlICYmIHR5cGVvZiBtZXNzYWdlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbWVzc2FnZSBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHB1c2hWYWx1ZSh0aHJlYWQsIGRlY29yYXRpb24pIHtcbiAgICAgICAgICAgIGlmICghKGRlY29yYXRpb24udGFyZ2V0IGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnB1c2hWYWx1ZSh0aHJlYWQsIGRlY29yYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGNsb3NlKCkge1xuICAgICAgICAgICAgdGhpcy50aHJlYWQubHVhLm1vZHVsZS5yZW1vdmVGdW5jdGlvbih0aGlzLmdjUG9pbnRlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlVHlwZUV4dGVuc2lvbiQ2KHRocmVhZCwgaW5qZWN0T2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3JUeXBlRXh0ZW5zaW9uKHRocmVhZCwgaW5qZWN0T2JqZWN0KTtcbiAgICB9XG5cbiAgICBjbGFzcyBSYXdSZXN1bHQge1xuICAgICAgICBjb25zdHJ1Y3Rvcihjb3VudCkge1xuICAgICAgICAgICAgdGhpcy5jb3VudCA9IGNvdW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVjb3JhdGVGdW5jdGlvbih0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWNvcmF0aW9uKHRhcmdldCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGNsYXNzIEZ1bmN0aW9uVHlwZUV4dGVuc2lvbiBleHRlbmRzIEx1YVR5cGVFeHRlbnNpb24ge1xuICAgICAgICBjb25zdHJ1Y3Rvcih0aHJlYWQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHN1cGVyKHRocmVhZCwgJ2pzX2Z1bmN0aW9uJyk7XG4gICAgICAgICAgICB0aGlzLmZ1bmN0aW9uUmVnaXN0cnkgPSB0eXBlb2YgRmluYWxpemF0aW9uUmVnaXN0cnkgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgPyBuZXcgRmluYWxpemF0aW9uUmVnaXN0cnkoKGZ1bmMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRocmVhZC5pc0Nsb3NlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRocmVhZC5sdWEubHVhTF91bnJlZih0aGlzLnRocmVhZC5hZGRyZXNzLCBMVUFfUkVHSVNUUllJTkRFWCwgZnVuYyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tDb250ZXh0ID0gdGhyZWFkLm5ld1RocmVhZCgpO1xuICAgICAgICAgICAgdGhpcy5jYWxsYmFja0NvbnRleHRJbmRleCA9IHRoaXMudGhyZWFkLmx1YS5sdWFMX3JlZih0aHJlYWQuYWRkcmVzcywgTFVBX1JFR0lTVFJZSU5ERVgpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmZ1bmN0aW9uUmVnaXN0cnkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0Z1bmN0aW9uVHlwZUV4dGVuc2lvbjogRmluYWxpemF0aW9uUmVnaXN0cnkgbm90IGZvdW5kLiBNZW1vcnkgbGVha3MgbGlrZWx5LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nY1BvaW50ZXIgPSB0aHJlYWQubHVhLm1vZHVsZS5hZGRGdW5jdGlvbigoY2FsbGVkTCkgPT4ge1xuICAgICAgICAgICAgICAgIHRocmVhZC5sdWEubHVhTF9jaGVja3VkYXRhKGNhbGxlZEwsIDEsIHRoaXMubmFtZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlckRhdGFQb2ludGVyID0gdGhyZWFkLmx1YS5sdWFMX2NoZWNrdWRhdGEoY2FsbGVkTCwgMSwgdGhpcy5uYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWZlcmVuY2VQb2ludGVyID0gdGhyZWFkLmx1YS5tb2R1bGUuZ2V0VmFsdWUodXNlckRhdGFQb2ludGVyLCAnKicpO1xuICAgICAgICAgICAgICAgIHRocmVhZC5sdWEudW5yZWYocmVmZXJlbmNlUG9pbnRlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMuTHVhUmV0dXJuLk9rO1xuICAgICAgICAgICAgfSwgJ2lpJyk7XG4gICAgICAgICAgICBpZiAodGhyZWFkLmx1YS5sdWFMX25ld21ldGF0YWJsZSh0aHJlYWQuYWRkcmVzcywgdGhpcy5uYW1lKSkge1xuICAgICAgICAgICAgICAgIHRocmVhZC5sdWEubHVhX3B1c2hzdHJpbmcodGhyZWFkLmFkZHJlc3MsICdfX2djJyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfcHVzaGNjbG9zdXJlKHRocmVhZC5hZGRyZXNzLCB0aGlzLmdjUG9pbnRlciwgMCk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfc2V0dGFibGUodGhyZWFkLmFkZHJlc3MsIC0zKTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9wdXNoc3RyaW5nKHRocmVhZC5hZGRyZXNzLCAnX19tZXRhdGFibGUnKTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9wdXNoc3RyaW5nKHRocmVhZC5hZGRyZXNzLCAncHJvdGVjdGVkIG1ldGF0YWJsZScpO1xuICAgICAgICAgICAgICAgIHRocmVhZC5sdWEubHVhX3NldHRhYmxlKHRocmVhZC5hZGRyZXNzLCAtMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9wb3AodGhyZWFkLmFkZHJlc3MsIDEpO1xuICAgICAgICAgICAgdGhpcy5mdW5jdGlvbldyYXBwZXIgPSB0aHJlYWQubHVhLm1vZHVsZS5hZGRGdW5jdGlvbigoY2FsbGVkTCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxlZFRocmVhZCA9IHRocmVhZC5zdGF0ZVRvVGhyZWFkKGNhbGxlZEwpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZlVzZXJkYXRhID0gdGhyZWFkLmx1YS5sdWFMX2NoZWNrdWRhdGEoY2FsbGVkTCwgdGhyZWFkLmx1YS5sdWFfdXB2YWx1ZWluZGV4KDEpLCB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZlBvaW50ZXIgPSB0aHJlYWQubHVhLm1vZHVsZS5nZXRWYWx1ZShyZWZVc2VyZGF0YSwgJyonKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRhcmdldCwgb3B0aW9ucyB9ID0gdGhyZWFkLmx1YS5nZXRSZWYocmVmUG9pbnRlcik7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJnc1F1YW50aXR5ID0gY2FsbGVkVGhyZWFkLmdldFRvcCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZWNlaXZlVGhyZWFkKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChjYWxsZWRUaHJlYWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZWNlaXZlQXJnc1F1YW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmdzUXVhbnRpdHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gYXJnc1F1YW50aXR5OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2FsbGVkVGhyZWFkLmdldFZhbHVlKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IDEgfHwgIShvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2VsZikgfHwgdmFsdWUgIT09IG9wdGlvbnMuc2VsZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5zZWxmLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBSYXdSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuY291bnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzdWx0IGluc3RhbmNlb2YgTXVsdGlSZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZWRUaHJlYWQucHVzaFZhbHVlKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZWRUaHJlYWQucHVzaFZhbHVlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIgPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FsbGVkVGhyZWFkLnB1c2hWYWx1ZShlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGVkVGhyZWFkLmx1YS5sdWFfZXJyb3IoY2FsbGVkVGhyZWFkLmFkZHJlc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sICdpaScpO1xuICAgICAgICB9XG4gICAgICAgIGNsb3NlKCkge1xuICAgICAgICAgICAgdGhpcy50aHJlYWQubHVhLm1vZHVsZS5yZW1vdmVGdW5jdGlvbih0aGlzLmdjUG9pbnRlcik7XG4gICAgICAgICAgICB0aGlzLnRocmVhZC5sdWEubW9kdWxlLnJlbW92ZUZ1bmN0aW9uKHRoaXMuZnVuY3Rpb25XcmFwcGVyKTtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tDb250ZXh0LmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrQ29udGV4dC5sdWEubHVhTF91bnJlZih0aGlzLmNhbGxiYWNrQ29udGV4dC5hZGRyZXNzLCBMVUFfUkVHSVNUUllJTkRFWCwgdGhpcy5jYWxsYmFja0NvbnRleHRJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgaXNUeXBlKF90aHJlYWQsIF9pbmRleCwgdHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGUgPT09IGV4cG9ydHMuTHVhVHlwZS5GdW5jdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBwdXNoVmFsdWUodGhyZWFkLCBkZWNvcmF0aW9uKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlY29yYXRpb24udGFyZ2V0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcG9pbnRlciA9IHRocmVhZC5sdWEucmVmKGRlY29yYXRpb24pO1xuICAgICAgICAgICAgY29uc3QgdXNlckRhdGFQb2ludGVyID0gdGhyZWFkLmx1YS5sdWFfbmV3dXNlcmRhdGF1dih0aHJlYWQuYWRkcmVzcywgUG9pbnRlclNpemUsIDApO1xuICAgICAgICAgICAgdGhyZWFkLmx1YS5tb2R1bGUuc2V0VmFsdWUodXNlckRhdGFQb2ludGVyLCBwb2ludGVyLCAnKicpO1xuICAgICAgICAgICAgaWYgKGV4cG9ydHMuTHVhVHlwZS5OaWwgPT09IHRocmVhZC5sdWEubHVhTF9nZXRtZXRhdGFibGUodGhyZWFkLmFkZHJlc3MsIHRoaXMubmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJlYWQucG9wKDEpO1xuICAgICAgICAgICAgICAgIHRocmVhZC5sdWEudW5yZWYocG9pbnRlcik7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBtZXRhdGFibGUgbm90IGZvdW5kOiAke3RoaXMubmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocmVhZC5sdWEubHVhX3NldG1ldGF0YWJsZSh0aHJlYWQuYWRkcmVzcywgLTIpO1xuICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfcHVzaGNjbG9zdXJlKHRocmVhZC5hZGRyZXNzLCB0aGlzLmZ1bmN0aW9uV3JhcHBlciwgMSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBnZXRWYWx1ZSh0aHJlYWQsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9wdXNodmFsdWUodGhyZWFkLmFkZHJlc3MsIGluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IGZ1bmMgPSB0aHJlYWQubHVhLmx1YUxfcmVmKHRocmVhZC5hZGRyZXNzLCBMVUFfUkVHSVNUUllJTkRFWCk7XG4gICAgICAgICAgICBjb25zdCBqc0Z1bmMgPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFja0NvbnRleHQuaXNDbG9zZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RyaWVkIHRvIGNhbGwgYSBmdW5jdGlvbiBhZnRlciBjbG9zaW5nIGx1YSBzdGF0ZScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxUaHJlYWQgPSB0aGlzLmNhbGxiYWNrQ29udGV4dC5uZXdUaHJlYWQoKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnRlcm5hbFR5cGUgPSBjYWxsVGhyZWFkLmx1YS5sdWFfcmF3Z2V0aShjYWxsVGhyZWFkLmFkZHJlc3MsIExVQV9SRUdJU1RSWUlOREVYLCBCaWdJbnQoZnVuYykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJuYWxUeXBlICE9PSBleHBvcnRzLkx1YVR5cGUuRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxNZXRhZmllbGRUeXBlID0gY2FsbFRocmVhZC5sdWEubHVhTF9nZXRtZXRhZmllbGQoY2FsbFRocmVhZC5hZGRyZXNzLCAtMSwgJ19fY2FsbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbFRocmVhZC5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsTWV0YWZpZWxkVHlwZSAhPT0gZXhwb3J0cy5MdWFUeXBlLkZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBIHZhbHVlIG9mIHR5cGUgJyR7aW50ZXJuYWxUeXBlfScgd2FzIHB1c2hlZCBidXQgaXQgaXMgbm90IGNhbGxhYmxlYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhcmcgb2YgYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbFRocmVhZC5wdXNoVmFsdWUoYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoKF9hID0gdGhpcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZnVuY3Rpb25UaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsVGhyZWFkLnNldFRpbWVvdXQoRGF0ZS5ub3coKSArIHRoaXMub3B0aW9ucy5mdW5jdGlvblRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IGNhbGxUaHJlYWQubHVhLmx1YV9wY2FsbGsoY2FsbFRocmVhZC5hZGRyZXNzLCBhcmdzLmxlbmd0aCwgMSwgMCwgMCwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IGV4cG9ydHMuTHVhUmV0dXJuLllpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCB5aWVsZCBpbiBjYWxsYmFja3MgZnJvbSBqYXZhc2NyaXB0Jyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FsbFRocmVhZC5hc3NlcnRPayhzdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbFRocmVhZC5nZXRUb3AoKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsVGhyZWFkLmdldFZhbHVlKC0xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbFRocmVhZC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrQ29udGV4dC5wb3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgKF9hID0gdGhpcy5mdW5jdGlvblJlZ2lzdHJ5KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVnaXN0ZXIoanNGdW5jLCBmdW5jKTtcbiAgICAgICAgICAgIHJldHVybiBqc0Z1bmM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlVHlwZUV4dGVuc2lvbiQ1KHRocmVhZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uVHlwZUV4dGVuc2lvbih0aHJlYWQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGNsYXNzIE51bGxUeXBlRXh0ZW5zaW9uIGV4dGVuZHMgTHVhVHlwZUV4dGVuc2lvbiB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHRocmVhZCkge1xuICAgICAgICAgICAgc3VwZXIodGhyZWFkLCAnanNfbnVsbCcpO1xuICAgICAgICAgICAgdGhpcy5nY1BvaW50ZXIgPSB0aHJlYWQubHVhLm1vZHVsZS5hZGRGdW5jdGlvbigoZnVuY3Rpb25TdGF0ZUFkZHJlc3MpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VyRGF0YVBvaW50ZXIgPSB0aHJlYWQubHVhLmx1YUxfY2hlY2t1ZGF0YShmdW5jdGlvblN0YXRlQWRkcmVzcywgMSwgdGhpcy5uYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWZlcmVuY2VQb2ludGVyID0gdGhyZWFkLmx1YS5tb2R1bGUuZ2V0VmFsdWUodXNlckRhdGFQb2ludGVyLCAnKicpO1xuICAgICAgICAgICAgICAgIHRocmVhZC5sdWEudW5yZWYocmVmZXJlbmNlUG9pbnRlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMuTHVhUmV0dXJuLk9rO1xuICAgICAgICAgICAgfSwgJ2lpJyk7XG4gICAgICAgICAgICBpZiAodGhyZWFkLmx1YS5sdWFMX25ld21ldGF0YWJsZSh0aHJlYWQuYWRkcmVzcywgdGhpcy5uYW1lKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGF0YWJsZUluZGV4ID0gdGhyZWFkLmx1YS5sdWFfZ2V0dG9wKHRocmVhZC5hZGRyZXNzKTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9wdXNoc3RyaW5nKHRocmVhZC5hZGRyZXNzLCAncHJvdGVjdGVkIG1ldGF0YWJsZScpO1xuICAgICAgICAgICAgICAgIHRocmVhZC5sdWEubHVhX3NldGZpZWxkKHRocmVhZC5hZGRyZXNzLCBtZXRhdGFibGVJbmRleCwgJ19fbWV0YXRhYmxlJyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfcHVzaGNjbG9zdXJlKHRocmVhZC5hZGRyZXNzLCB0aGlzLmdjUG9pbnRlciwgMCk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfc2V0ZmllbGQodGhyZWFkLmFkZHJlc3MsIG1ldGF0YWJsZUluZGV4LCAnX19nYycpO1xuICAgICAgICAgICAgICAgIHRocmVhZC5wdXNoVmFsdWUoKCkgPT4gbnVsbCk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfc2V0ZmllbGQodGhyZWFkLmFkZHJlc3MsIG1ldGF0YWJsZUluZGV4LCAnX19pbmRleCcpO1xuICAgICAgICAgICAgICAgIHRocmVhZC5wdXNoVmFsdWUoKCkgPT4gJ251bGwnKTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9zZXRmaWVsZCh0aHJlYWQuYWRkcmVzcywgbWV0YXRhYmxlSW5kZXgsICdfX3Rvc3RyaW5nJyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLnB1c2hWYWx1ZSgoc2VsZiwgb3RoZXIpID0+IHNlbGYgPT09IG90aGVyKTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9zZXRmaWVsZCh0aHJlYWQuYWRkcmVzcywgbWV0YXRhYmxlSW5kZXgsICdfX2VxJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9wb3AodGhyZWFkLmFkZHJlc3MsIDEpO1xuICAgICAgICAgICAgc3VwZXIucHVzaFZhbHVlKHRocmVhZCwgbmV3IERlY29yYXRpb24oe30sIHt9KSk7XG4gICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9zZXRnbG9iYWwodGhyZWFkLmFkZHJlc3MsICdudWxsJyk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0VmFsdWUodGhyZWFkLCBpbmRleCkge1xuICAgICAgICAgICAgY29uc3QgcmVmVXNlckRhdGEgPSB0aHJlYWQubHVhLmx1YUxfdGVzdHVkYXRhKHRocmVhZC5hZGRyZXNzLCBpbmRleCwgdGhpcy5uYW1lKTtcbiAgICAgICAgICAgIGlmICghcmVmVXNlckRhdGEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRhdGEgZG9lcyBub3QgaGF2ZSB0aGUgZXhwZWN0ZWQgbWV0YXRhYmxlOiAke3RoaXMubmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHB1c2hWYWx1ZSh0aHJlYWQsIGRlY29yYXRpb24pIHtcbiAgICAgICAgICAgIGlmICgoZGVjb3JhdGlvbiA9PT0gbnVsbCB8fCBkZWNvcmF0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWNvcmF0aW9uLnRhcmdldCkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9nZXRnbG9iYWwodGhyZWFkLmFkZHJlc3MsICdudWxsJyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjbG9zZSgpIHtcbiAgICAgICAgICAgIHRoaXMudGhyZWFkLmx1YS5tb2R1bGUucmVtb3ZlRnVuY3Rpb24odGhpcy5nY1BvaW50ZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZVR5cGVFeHRlbnNpb24kNCh0aHJlYWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOdWxsVHlwZUV4dGVuc2lvbih0aHJlYWQpO1xuICAgIH1cblxuICAgIGNsYXNzIFByb21pc2VUeXBlRXh0ZW5zaW9uIGV4dGVuZHMgTHVhVHlwZUV4dGVuc2lvbiB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHRocmVhZCwgaW5qZWN0T2JqZWN0KSB7XG4gICAgICAgICAgICBzdXBlcih0aHJlYWQsICdqc19wcm9taXNlJyk7XG4gICAgICAgICAgICB0aGlzLmdjUG9pbnRlciA9IHRocmVhZC5sdWEubW9kdWxlLmFkZEZ1bmN0aW9uKChmdW5jdGlvblN0YXRlQWRkcmVzcykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJEYXRhUG9pbnRlciA9IHRocmVhZC5sdWEubHVhTF9jaGVja3VkYXRhKGZ1bmN0aW9uU3RhdGVBZGRyZXNzLCAxLCB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZVBvaW50ZXIgPSB0aHJlYWQubHVhLm1vZHVsZS5nZXRWYWx1ZSh1c2VyRGF0YVBvaW50ZXIsICcqJyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS51bnJlZihyZWZlcmVuY2VQb2ludGVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0cy5MdWFSZXR1cm4uT2s7XG4gICAgICAgICAgICB9LCAnaWknKTtcbiAgICAgICAgICAgIGlmICh0aHJlYWQubHVhLmx1YUxfbmV3bWV0YXRhYmxlKHRocmVhZC5hZGRyZXNzLCB0aGlzLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YXRhYmxlSW5kZXggPSB0aHJlYWQubHVhLmx1YV9nZXR0b3AodGhyZWFkLmFkZHJlc3MpO1xuICAgICAgICAgICAgICAgIHRocmVhZC5sdWEubHVhX3B1c2hzdHJpbmcodGhyZWFkLmFkZHJlc3MsICdwcm90ZWN0ZWQgbWV0YXRhYmxlJyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfc2V0ZmllbGQodGhyZWFkLmFkZHJlc3MsIG1ldGF0YWJsZUluZGV4LCAnX19tZXRhdGFibGUnKTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9wdXNoY2Nsb3N1cmUodGhyZWFkLmFkZHJlc3MsIHRoaXMuZ2NQb2ludGVyLCAwKTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9zZXRmaWVsZCh0aHJlYWQuYWRkcmVzcywgbWV0YXRhYmxlSW5kZXgsICdfX2djJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tTZWxmID0gKHNlbGYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFByb21pc2UucmVzb2x2ZShzZWxmKSAhPT0gc2VsZiAmJiB0eXBlb2Ygc2VsZi50aGVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb21pc2UgbWV0aG9kIGNhbGxlZCB3aXRob3V0IHNlbGYgaW5zdGFuY2UnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRocmVhZC5wdXNoVmFsdWUoe1xuICAgICAgICAgICAgICAgICAgICBuZXh0OiAoc2VsZiwgLi4uYXJncykgPT4gY2hlY2tTZWxmKHNlbGYpICYmIHNlbGYudGhlbiguLi5hcmdzKSxcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2g6IChzZWxmLCAuLi5hcmdzKSA9PiBjaGVja1NlbGYoc2VsZikgJiYgc2VsZi5jYXRjaCguLi5hcmdzKSxcbiAgICAgICAgICAgICAgICAgICAgZmluYWxseTogKHNlbGYsIC4uLmFyZ3MpID0+IGNoZWNrU2VsZihzZWxmKSAmJiBzZWxmLmZpbmFsbHkoLi4uYXJncyksXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0OiBkZWNvcmF0ZUZ1bmN0aW9uKChmdW5jdGlvblRocmVhZCwgc2VsZikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tTZWxmKHNlbGYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZ1bmN0aW9uVGhyZWFkLmFkZHJlc3MgPT09IHRocmVhZC5hZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgYXdhaXQgaW4gdGhlIG1haW4gdGhyZWFkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcHJvbWlzZVJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF3YWl0UHJvbWlzZSA9IHNlbGZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZVJlc3VsdCA9IHsgc3RhdHVzOiAnZnVsZmlsbGVkJywgdmFsdWU6IHJlcyB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VSZXN1bHQgPSB7IHN0YXR1czogJ3JlamVjdGVkJywgdmFsdWU6IGVyciB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250aW51YW5jZSA9IHRoaXMudGhyZWFkLmx1YS5tb2R1bGUuYWRkRnVuY3Rpb24oKGNvbnRpbnVhbmNlU3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXByb21pc2VSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRocmVhZC5sdWEubHVhX3lpZWxkayhmdW5jdGlvblRocmVhZC5hZGRyZXNzLCAwLCAwLCBjb250aW51YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyZWFkLmx1YS5tb2R1bGUucmVtb3ZlRnVuY3Rpb24oY29udGludWFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRpbnVhbmNlVGhyZWFkID0gdGhyZWFkLnN0YXRlVG9UaHJlYWQoY29udGludWFuY2VTdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb21pc2VSZXN1bHQuc3RhdHVzID09PSAncmVqZWN0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVhbmNlVGhyZWFkLnB1c2hWYWx1ZShwcm9taXNlUmVzdWx0LnZhbHVlIHx8IG5ldyBFcnJvcigncHJvbWlzZSByZWplY3RlZCB3aXRoIG5vIGVycm9yJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50aHJlYWQubHVhLmx1YV9lcnJvcihjb250aW51YW5jZVN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb21pc2VSZXN1bHQudmFsdWUgaW5zdGFuY2VvZiBSYXdSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2VSZXN1bHQudmFsdWUuY291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb21pc2VSZXN1bHQudmFsdWUgaW5zdGFuY2VvZiBNdWx0aVJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFyZyBvZiBwcm9taXNlUmVzdWx0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51YW5jZVRocmVhZC5wdXNoVmFsdWUoYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZVJlc3VsdC52YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51YW5jZVRocmVhZC5wdXNoVmFsdWUocHJvbWlzZVJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sICdpaWlpJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvblRocmVhZC5wdXNoVmFsdWUoYXdhaXRQcm9taXNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmF3UmVzdWx0KHRocmVhZC5sdWEubHVhX3lpZWxkayhmdW5jdGlvblRocmVhZC5hZGRyZXNzLCAxLCAwLCBjb250aW51YW5jZSkpO1xuICAgICAgICAgICAgICAgICAgICB9LCB7IHJlY2VpdmVUaHJlYWQ6IHRydWUgfSksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfc2V0ZmllbGQodGhyZWFkLmFkZHJlc3MsIG1ldGF0YWJsZUluZGV4LCAnX19pbmRleCcpO1xuICAgICAgICAgICAgICAgIHRocmVhZC5wdXNoVmFsdWUoKHNlbGYsIG90aGVyKSA9PiBzZWxmID09PSBvdGhlcik7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfc2V0ZmllbGQodGhyZWFkLmFkZHJlc3MsIG1ldGF0YWJsZUluZGV4LCAnX19lcScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfcG9wKHRocmVhZC5hZGRyZXNzLCAxKTtcbiAgICAgICAgICAgIGlmIChpbmplY3RPYmplY3QpIHtcbiAgICAgICAgICAgICAgICB0aHJlYWQuc2V0KCdQcm9taXNlJywge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGU6IChjYWxsYmFjaykgPT4gbmV3IFByb21pc2UoY2FsbGJhY2spLFxuICAgICAgICAgICAgICAgICAgICBhbGw6IChwcm9taXNlQXJyYXkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9taXNlQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhcmd1bWVudCBtdXN0IGJlIGFuIGFycmF5IG9mIHByb21pc2VzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZUFycmF5Lm1hcCgocG90ZW50aWFsUHJvbWlzZSkgPT4gUHJvbWlzZS5yZXNvbHZlKHBvdGVudGlhbFByb21pc2UpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6ICh2YWx1ZSkgPT4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjbG9zZSgpIHtcbiAgICAgICAgICAgIHRoaXMudGhyZWFkLmx1YS5tb2R1bGUucmVtb3ZlRnVuY3Rpb24odGhpcy5nY1BvaW50ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHB1c2hWYWx1ZSh0aHJlYWQsIGRlY29yYXRpb24pIHtcbiAgICAgICAgICAgIGlmIChQcm9taXNlLnJlc29sdmUoZGVjb3JhdGlvbi50YXJnZXQpICE9PSBkZWNvcmF0aW9uLnRhcmdldCAmJiB0eXBlb2YgZGVjb3JhdGlvbi50YXJnZXQudGhlbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdXBlci5wdXNoVmFsdWUodGhyZWFkLCBkZWNvcmF0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVUeXBlRXh0ZW5zaW9uJDModGhyZWFkLCBpbmplY3RPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlVHlwZUV4dGVuc2lvbih0aHJlYWQsIGluamVjdE9iamVjdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVjb3JhdGVQcm94eSh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWNvcmF0aW9uKHRhcmdldCwgb3B0aW9ucyB8fCB7fSk7XG4gICAgfVxuICAgIGNsYXNzIFByb3h5VHlwZUV4dGVuc2lvbiBleHRlbmRzIEx1YVR5cGVFeHRlbnNpb24ge1xuICAgICAgICBjb25zdHJ1Y3Rvcih0aHJlYWQpIHtcbiAgICAgICAgICAgIHN1cGVyKHRocmVhZCwgJ2pzX3Byb3h5Jyk7XG4gICAgICAgICAgICB0aGlzLmdjUG9pbnRlciA9IHRocmVhZC5sdWEubW9kdWxlLmFkZEZ1bmN0aW9uKChmdW5jdGlvblN0YXRlQWRkcmVzcykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJEYXRhUG9pbnRlciA9IHRocmVhZC5sdWEubHVhTF9jaGVja3VkYXRhKGZ1bmN0aW9uU3RhdGVBZGRyZXNzLCAxLCB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZVBvaW50ZXIgPSB0aHJlYWQubHVhLm1vZHVsZS5nZXRWYWx1ZSh1c2VyRGF0YVBvaW50ZXIsICcqJyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS51bnJlZihyZWZlcmVuY2VQb2ludGVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0cy5MdWFSZXR1cm4uT2s7XG4gICAgICAgICAgICB9LCAnaWknKTtcbiAgICAgICAgICAgIGlmICh0aHJlYWQubHVhLmx1YUxfbmV3bWV0YXRhYmxlKHRocmVhZC5hZGRyZXNzLCB0aGlzLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YXRhYmxlSW5kZXggPSB0aHJlYWQubHVhLmx1YV9nZXR0b3AodGhyZWFkLmFkZHJlc3MpO1xuICAgICAgICAgICAgICAgIHRocmVhZC5sdWEubHVhX3B1c2hzdHJpbmcodGhyZWFkLmFkZHJlc3MsICdwcm90ZWN0ZWQgbWV0YXRhYmxlJyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfc2V0ZmllbGQodGhyZWFkLmFkZHJlc3MsIG1ldGF0YWJsZUluZGV4LCAnX19tZXRhdGFibGUnKTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9wdXNoY2Nsb3N1cmUodGhyZWFkLmFkZHJlc3MsIHRoaXMuZ2NQb2ludGVyLCAwKTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9zZXRmaWVsZCh0aHJlYWQuYWRkcmVzcywgbWV0YXRhYmxlSW5kZXgsICdfX2djJyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLnB1c2hWYWx1ZSgoc2VsZiwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBrZXkgLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IHN0cmluZ3Mgb3IgbnVtYmVycyBjYW4gaW5kZXgganMgb2JqZWN0cycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gc2VsZltrZXldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVjb3JhdGVGdW5jdGlvbih2YWx1ZSwgeyBzZWxmIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9zZXRmaWVsZCh0aHJlYWQuYWRkcmVzcywgbWV0YXRhYmxlSW5kZXgsICdfX2luZGV4Jyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLnB1c2hWYWx1ZSgoc2VsZiwga2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0ga2V5IC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBzdHJpbmdzIG9yIG51bWJlcnMgY2FuIGluZGV4IGpzIG9iamVjdHMnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9zZXRmaWVsZCh0aHJlYWQuYWRkcmVzcywgbWV0YXRhYmxlSW5kZXgsICdfX25ld2luZGV4Jyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLnB1c2hWYWx1ZSgoc2VsZikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gc2VsZi50b1N0cmluZykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoc2VsZikpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHR5cGVvZiBzZWxmO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRocmVhZC5sdWEubHVhX3NldGZpZWxkKHRocmVhZC5hZGRyZXNzLCBtZXRhdGFibGVJbmRleCwgJ19fdG9zdHJpbmcnKTtcbiAgICAgICAgICAgICAgICB0aHJlYWQucHVzaFZhbHVlKChzZWxmKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmxlbmd0aCB8fCAwO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRocmVhZC5sdWEubHVhX3NldGZpZWxkKHRocmVhZC5hZGRyZXNzLCBtZXRhdGFibGVJbmRleCwgJ19fbGVuJyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLnB1c2hWYWx1ZSgoc2VsZikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc2VsZik7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE11bHRpUmV0dXJuLm9mKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJldCA9IE11bHRpUmV0dXJuLm9mKGtleXNbaV0sIHNlbGZba2V5c1tpXV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICAgICAgfSwgc2VsZiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfc2V0ZmllbGQodGhyZWFkLmFkZHJlc3MsIG1ldGF0YWJsZUluZGV4LCAnX19wYWlycycpO1xuICAgICAgICAgICAgICAgIHRocmVhZC5wdXNoVmFsdWUoKHNlbGYsIG90aGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmID09PSBvdGhlcjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9zZXRmaWVsZCh0aHJlYWQuYWRkcmVzcywgbWV0YXRhYmxlSW5kZXgsICdfX2VxJyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLnB1c2hWYWx1ZSgoc2VsZiwgLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnc1swXSA9PT0gc2VsZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRocmVhZC5sdWEubHVhX3NldGZpZWxkKHRocmVhZC5hZGRyZXNzLCBtZXRhdGFibGVJbmRleCwgJ19fY2FsbCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfcG9wKHRocmVhZC5hZGRyZXNzLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBpc1R5cGUoX3RocmVhZCwgX2luZGV4LCB0eXBlLCBuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZSA9PT0gZXhwb3J0cy5MdWFUeXBlLlVzZXJkYXRhICYmIG5hbWUgPT09IHRoaXMubmFtZTtcbiAgICAgICAgfVxuICAgICAgICBnZXRWYWx1ZSh0aHJlYWQsIGluZGV4KSB7XG4gICAgICAgICAgICBjb25zdCByZWZVc2VyZGF0YSA9IHRocmVhZC5sdWEubHVhX3RvdXNlcmRhdGEodGhyZWFkLmFkZHJlc3MsIGluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZVBvaW50ZXIgPSB0aHJlYWQubHVhLm1vZHVsZS5nZXRWYWx1ZShyZWZVc2VyZGF0YSwgJyonKTtcbiAgICAgICAgICAgIHJldHVybiB0aHJlYWQubHVhLmdldFJlZihyZWZlcmVuY2VQb2ludGVyKTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoVmFsdWUodGhyZWFkLCBkZWNvcmF0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgeyB0YXJnZXQsIG9wdGlvbnMgfSA9IGRlY29yYXRlZFZhbHVlO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucHJveHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IG51bGwgfHwgdGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNDbGFzcyA9IHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicgJiYgKChfYSA9IHRhcmdldC5wcm90b3R5cGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb25zdHJ1Y3RvcikgPT09IHRhcmdldCAmJiB0YXJnZXQudG9TdHJpbmcoKS5zdGFydHNXaXRoKCdjbGFzcyAnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0NsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFByb21pc2UucmVzb2x2ZSh0YXJnZXQpID09PSB0YXJnZXQgfHwgdHlwZW9mIHRhcmdldC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvcHRpb25zLnByb3h5ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLm1ldGF0YWJsZSAmJiAhKG9wdGlvbnMubWV0YXRhYmxlIGluc3RhbmNlb2YgRGVjb3JhdGlvbikpIHtcbiAgICAgICAgICAgICAgICBkZWNvcmF0ZWRWYWx1ZS5vcHRpb25zLm1ldGF0YWJsZSA9IGRlY29yYXRlUHJveHkob3B0aW9ucy5tZXRhdGFibGUsIHsgcHJveHk6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdXBlci5wdXNoVmFsdWUodGhyZWFkLCBkZWNvcmF0ZWRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2xvc2UoKSB7XG4gICAgICAgICAgICB0aGlzLnRocmVhZC5sdWEubW9kdWxlLnJlbW92ZUZ1bmN0aW9uKHRoaXMuZ2NQb2ludGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVUeXBlRXh0ZW5zaW9uJDIodGhyZWFkKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJveHlUeXBlRXh0ZW5zaW9uKHRocmVhZCk7XG4gICAgfVxuXG4gICAgY2xhc3MgVGFibGVUeXBlRXh0ZW5zaW9uIGV4dGVuZHMgTHVhVHlwZUV4dGVuc2lvbiB7XG4gICAgICAgIGNvbnN0cnVjdG9yKHRocmVhZCkge1xuICAgICAgICAgICAgc3VwZXIodGhyZWFkLCAnanNfdGFibGUnKTtcbiAgICAgICAgfVxuICAgICAgICBjbG9zZSgpIHtcbiAgICAgICAgfVxuICAgICAgICBpc1R5cGUoX3RocmVhZCwgX2luZGV4LCB0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZSA9PT0gZXhwb3J0cy5MdWFUeXBlLlRhYmxlO1xuICAgICAgICB9XG4gICAgICAgIGdldFZhbHVlKHRocmVhZCwgaW5kZXgsIHVzZXJkYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBzZWVuTWFwID0gdXNlcmRhdGEgfHwgbmV3IE1hcCgpO1xuICAgICAgICAgICAgY29uc3QgcG9pbnRlciA9IHRocmVhZC5sdWEubHVhX3RvcG9pbnRlcih0aHJlYWQuYWRkcmVzcywgaW5kZXgpO1xuICAgICAgICAgICAgbGV0IHRhYmxlID0gc2Vlbk1hcC5nZXQocG9pbnRlcik7XG4gICAgICAgICAgICBpZiAoIXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5cyA9IHRoaXMucmVhZFRhYmxlS2V5cyh0aHJlYWQsIGluZGV4KTtcbiAgICAgICAgICAgICAgICBjb25zdCBpc1NlcXVlbnRpYWwgPSBrZXlzLmxlbmd0aCA+IDAgJiYga2V5cy5ldmVyeSgoa2V5LCBpbmRleCkgPT4ga2V5ID09PSBTdHJpbmcoaW5kZXggKyAxKSk7XG4gICAgICAgICAgICAgICAgdGFibGUgPSBpc1NlcXVlbnRpYWwgPyBbXSA6IHt9O1xuICAgICAgICAgICAgICAgIHNlZW5NYXAuc2V0KHBvaW50ZXIsIHRhYmxlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlYWRUYWJsZVZhbHVlcyh0aHJlYWQsIGluZGV4LCBzZWVuTWFwLCB0YWJsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgICAgIH1cbiAgICAgICAgcHVzaFZhbHVlKHRocmVhZCwgeyB0YXJnZXQgfSwgdXNlcmRhdGEpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0JyB8fCB0YXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzZWVuTWFwID0gdXNlcmRhdGEgfHwgbmV3IE1hcCgpO1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdSZWZlcmVuY2UgPSBzZWVuTWFwLmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nUmVmZXJlbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9yYXdnZXRpKHRocmVhZC5hZGRyZXNzLCBMVUFfUkVHSVNUUllJTkRFWCwgQmlnSW50KGV4aXN0aW5nUmVmZXJlbmNlKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhYmxlSW5kZXggPSB0aHJlYWQuZ2V0VG9wKCkgKyAxO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZVRhYmxlID0gKGFycmF5Q291bnQsIGtleUNvdW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRocmVhZC5sdWEubHVhX2NyZWF0ZXRhYmxlKHRocmVhZC5hZGRyZXNzLCBhcnJheUNvdW50LCBrZXlDb3VudCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZiA9IHRocmVhZC5sdWEubHVhTF9yZWYodGhyZWFkLmFkZHJlc3MsIExVQV9SRUdJU1RSWUlOREVYKTtcbiAgICAgICAgICAgICAgICAgICAgc2Vlbk1hcC5zZXQodGFyZ2V0LCByZWYpO1xuICAgICAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9yYXdnZXRpKHRocmVhZC5hZGRyZXNzLCBMVUFfUkVHSVNUUllJTkRFWCwgQmlnSW50KHJlZikpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVUYWJsZSh0YXJnZXQubGVuZ3RoLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YXJnZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocmVhZC5wdXNoVmFsdWUoaSArIDEsIHNlZW5NYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyZWFkLnB1c2hWYWx1ZSh0YXJnZXRbaV0sIHNlZW5NYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfc2V0dGFibGUodGhyZWFkLmFkZHJlc3MsIHRhYmxlSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVUYWJsZSgwLCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyZWFkLnB1c2hWYWx1ZShrZXksIHNlZW5NYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyZWFkLnB1c2hWYWx1ZSh0YXJnZXRba2V5XSwgc2Vlbk1hcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9zZXR0YWJsZSh0aHJlYWQuYWRkcmVzcywgdGFibGVJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBpZiAodXNlcmRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlZmVyZW5jZSBvZiBzZWVuTWFwLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YUxfdW5yZWYodGhyZWFkLmFkZHJlc3MsIExVQV9SRUdJU1RSWUlOREVYLCByZWZlcmVuY2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVhZFRhYmxlS2V5cyh0aHJlYWQsIGluZGV4KSB7XG4gICAgICAgICAgICBjb25zdCBrZXlzID0gW107XG4gICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9wdXNobmlsKHRocmVhZC5hZGRyZXNzKTtcbiAgICAgICAgICAgIHdoaWxlICh0aHJlYWQubHVhLmx1YV9uZXh0KHRocmVhZC5hZGRyZXNzLCBpbmRleCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSB0aHJlYWQuaW5kZXhUb1N0cmluZygtMik7XG4gICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICAgIH1cbiAgICAgICAgcmVhZFRhYmxlVmFsdWVzKHRocmVhZCwgaW5kZXgsIHNlZW5NYXAsIHRhYmxlKSB7XG4gICAgICAgICAgICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSh0YWJsZSk7XG4gICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9wdXNobmlsKHRocmVhZC5hZGRyZXNzKTtcbiAgICAgICAgICAgIHdoaWxlICh0aHJlYWQubHVhLmx1YV9uZXh0KHRocmVhZC5hZGRyZXNzLCBpbmRleCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSB0aHJlYWQuaW5kZXhUb1N0cmluZygtMik7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aHJlYWQuZ2V0VmFsdWUoLTEsIHVuZGVmaW5lZCwgc2Vlbk1hcCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFibGUucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocmVhZC5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVUeXBlRXh0ZW5zaW9uJDEodGhyZWFkKSB7XG4gICAgICAgIHJldHVybiBuZXcgVGFibGVUeXBlRXh0ZW5zaW9uKHRocmVhZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVjb3JhdGVVc2VyZGF0YSh0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWNvcmF0aW9uKHRhcmdldCwgeyByZWZlcmVuY2U6IHRydWUgfSk7XG4gICAgfVxuICAgIGNsYXNzIFVzZXJkYXRhVHlwZUV4dGVuc2lvbiBleHRlbmRzIEx1YVR5cGVFeHRlbnNpb24ge1xuICAgICAgICBjb25zdHJ1Y3Rvcih0aHJlYWQpIHtcbiAgICAgICAgICAgIHN1cGVyKHRocmVhZCwgJ2pzX3VzZXJkYXRhJyk7XG4gICAgICAgICAgICB0aGlzLmdjUG9pbnRlciA9IHRocmVhZC5sdWEubW9kdWxlLmFkZEZ1bmN0aW9uKChmdW5jdGlvblN0YXRlQWRkcmVzcykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJEYXRhUG9pbnRlciA9IHRocmVhZC5sdWEubHVhTF9jaGVja3VkYXRhKGZ1bmN0aW9uU3RhdGVBZGRyZXNzLCAxLCB0aGlzLm5hbWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZVBvaW50ZXIgPSB0aHJlYWQubHVhLm1vZHVsZS5nZXRWYWx1ZSh1c2VyRGF0YVBvaW50ZXIsICcqJyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS51bnJlZihyZWZlcmVuY2VQb2ludGVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0cy5MdWFSZXR1cm4uT2s7XG4gICAgICAgICAgICB9LCAnaWknKTtcbiAgICAgICAgICAgIGlmICh0aHJlYWQubHVhLmx1YUxfbmV3bWV0YXRhYmxlKHRocmVhZC5hZGRyZXNzLCB0aGlzLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YXRhYmxlSW5kZXggPSB0aHJlYWQubHVhLmx1YV9nZXR0b3AodGhyZWFkLmFkZHJlc3MpO1xuICAgICAgICAgICAgICAgIHRocmVhZC5sdWEubHVhX3B1c2hzdHJpbmcodGhyZWFkLmFkZHJlc3MsICdwcm90ZWN0ZWQgbWV0YXRhYmxlJyk7XG4gICAgICAgICAgICAgICAgdGhyZWFkLmx1YS5sdWFfc2V0ZmllbGQodGhyZWFkLmFkZHJlc3MsIG1ldGF0YWJsZUluZGV4LCAnX19tZXRhdGFibGUnKTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9wdXNoY2Nsb3N1cmUodGhyZWFkLmFkZHJlc3MsIHRoaXMuZ2NQb2ludGVyLCAwKTtcbiAgICAgICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9zZXRmaWVsZCh0aHJlYWQuYWRkcmVzcywgbWV0YXRhYmxlSW5kZXgsICdfX2djJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJlYWQubHVhLmx1YV9wb3AodGhyZWFkLmFkZHJlc3MsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlzVHlwZShfdGhyZWFkLCBfaW5kZXgsIHR5cGUsIG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlID09PSBleHBvcnRzLkx1YVR5cGUuVXNlcmRhdGEgJiYgbmFtZSA9PT0gdGhpcy5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIGdldFZhbHVlKHRocmVhZCwgaW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlZlVzZXJkYXRhID0gdGhyZWFkLmx1YS5sdWFfdG91c2VyZGF0YSh0aHJlYWQuYWRkcmVzcywgaW5kZXgpO1xuICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlUG9pbnRlciA9IHRocmVhZC5sdWEubW9kdWxlLmdldFZhbHVlKHJlZlVzZXJkYXRhLCAnKicpO1xuICAgICAgICAgICAgcmV0dXJuIHRocmVhZC5sdWEuZ2V0UmVmKHJlZmVyZW5jZVBvaW50ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHB1c2hWYWx1ZSh0aHJlYWQsIGRlY29yYXRlZFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIWRlY29yYXRlZFZhbHVlLm9wdGlvbnMucmVmZXJlbmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnB1c2hWYWx1ZSh0aHJlYWQsIGRlY29yYXRlZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjbG9zZSgpIHtcbiAgICAgICAgICAgIHRoaXMudGhyZWFkLmx1YS5tb2R1bGUucmVtb3ZlRnVuY3Rpb24odGhpcy5nY1BvaW50ZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZVR5cGVFeHRlbnNpb24odGhyZWFkKSB7XG4gICAgICAgIHJldHVybiBuZXcgVXNlcmRhdGFUeXBlRXh0ZW5zaW9uKHRocmVhZCk7XG4gICAgfVxuXG4gICAgY2xhc3MgTHVhRW5naW5lIHtcbiAgICAgICAgY29uc3RydWN0b3IoY21vZHVsZSwgeyBvcGVuU3RhbmRhcmRMaWJzID0gdHJ1ZSwgaW5qZWN0T2JqZWN0cyA9IGZhbHNlLCBlbmFibGVQcm94eSA9IHRydWUsIHRyYWNlQWxsb2NhdGlvbnMgPSBmYWxzZSwgZnVuY3Rpb25UaW1lb3V0ID0gdW5kZWZpbmVkLCB9ID0ge30pIHtcbiAgICAgICAgICAgIHRoaXMuY21vZHVsZSA9IGNtb2R1bGU7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbCA9IG5ldyBHbG9iYWwodGhpcy5jbW9kdWxlLCB0cmFjZUFsbG9jYXRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsLnJlZ2lzdGVyVHlwZUV4dGVuc2lvbigwLCBjcmVhdGVUeXBlRXh0ZW5zaW9uJDEodGhpcy5nbG9iYWwpKTtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsLnJlZ2lzdGVyVHlwZUV4dGVuc2lvbigwLCBjcmVhdGVUeXBlRXh0ZW5zaW9uJDUodGhpcy5nbG9iYWwsIHsgZnVuY3Rpb25UaW1lb3V0IH0pKTtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsLnJlZ2lzdGVyVHlwZUV4dGVuc2lvbigxLCBjcmVhdGVUeXBlRXh0ZW5zaW9uJDModGhpcy5nbG9iYWwsIGluamVjdE9iamVjdHMpKTtcbiAgICAgICAgICAgIGlmIChpbmplY3RPYmplY3RzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWwucmVnaXN0ZXJUeXBlRXh0ZW5zaW9uKDUsIGNyZWF0ZVR5cGVFeHRlbnNpb24kNCh0aGlzLmdsb2JhbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVuYWJsZVByb3h5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWwucmVnaXN0ZXJUeXBlRXh0ZW5zaW9uKDMsIGNyZWF0ZVR5cGVFeHRlbnNpb24kMih0aGlzLmdsb2JhbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWwucmVnaXN0ZXJUeXBlRXh0ZW5zaW9uKDEsIGNyZWF0ZVR5cGVFeHRlbnNpb24kNih0aGlzLmdsb2JhbCwgaW5qZWN0T2JqZWN0cykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nbG9iYWwucmVnaXN0ZXJUeXBlRXh0ZW5zaW9uKDQsIGNyZWF0ZVR5cGVFeHRlbnNpb24odGhpcy5nbG9iYWwpKTtcbiAgICAgICAgICAgIGlmIChvcGVuU3RhbmRhcmRMaWJzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbW9kdWxlLmx1YUxfb3BlbmxpYnModGhpcy5nbG9iYWwuYWRkcmVzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZG9TdHJpbmcoc2NyaXB0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxsQnl0ZUNvZGUoKHRocmVhZCkgPT4gdGhyZWFkLmxvYWRTdHJpbmcoc2NyaXB0KSk7XG4gICAgICAgIH1cbiAgICAgICAgZG9GaWxlKGZpbGVuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxsQnl0ZUNvZGUoKHRocmVhZCkgPT4gdGhyZWFkLmxvYWRGaWxlKGZpbGVuYW1lKSk7XG4gICAgICAgIH1cbiAgICAgICAgZG9TdHJpbmdTeW5jKHNjcmlwdCkge1xuICAgICAgICAgICAgdGhpcy5nbG9iYWwubG9hZFN0cmluZyhzY3JpcHQpO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5nbG9iYWwucnVuU3luYygpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFswXTtcbiAgICAgICAgfVxuICAgICAgICBkb0ZpbGVTeW5jKGZpbGVuYW1lKSB7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbC5sb2FkRmlsZShmaWxlbmFtZSk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmdsb2JhbC5ydW5TeW5jKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0WzBdO1xuICAgICAgICB9XG4gICAgICAgIGFzeW5jIGNhbGxCeXRlQ29kZShsb2FkZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRocmVhZCA9IHRoaXMuZ2xvYmFsLm5ld1RocmVhZCgpO1xuICAgICAgICAgICAgY29uc3QgdGhyZWFkSW5kZXggPSB0aGlzLmdsb2JhbC5nZXRUb3AoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbG9hZGVyKHRocmVhZCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhyZWFkLnJ1bigwKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbW9kdWxlLmx1YV94bW92ZSh0aHJlYWQuYWRkcmVzcywgdGhpcy5nbG9iYWwuYWRkcmVzcywgcmVzdWx0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdsb2JhbC5nZXRWYWx1ZSh0aGlzLmdsb2JhbC5nZXRUb3AoKSAtIHJlc3VsdC5sZW5ndGggKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFsLnJlbW92ZSh0aHJlYWRJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaW5pdFdhc21Nb2R1bGUgPSAoKCkgPT4ge1xuICAgICAgdmFyIF9zY3JpcHREaXIgPSAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbG9jYXRpb24gPT09ICd1bmRlZmluZWQnID8gcmVxdWlyZSgndScgKyAncmwnKS5wYXRoVG9GaWxlVVJMKF9fZmlsZW5hbWUpLmhyZWYgOiB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnID8gbG9jYXRpb24uaHJlZiA6IChfZG9jdW1lbnRDdXJyZW50U2NyaXB0ICYmIF9kb2N1bWVudEN1cnJlbnRTY3JpcHQuc3JjIHx8IG5ldyBVUkwoJ2luZGV4LmpzJywgZG9jdW1lbnQuYmFzZVVSSSkuaHJlZikpO1xuICAgICAgXG4gICAgICByZXR1cm4gKFxuICAgIGFzeW5jIGZ1bmN0aW9uKG1vZHVsZUFyZyA9IHt9KSB7XG5cbiAgICB2YXIgZT1tb2R1bGVBcmcsYWEsYmE7ZS5yZWFkeT1uZXcgUHJvbWlzZSgoYSxiKT0+e2FhPWE7YmE9Yjt9KTtcbiAgICBcIl9tYWxsb2MgX2ZyZWUgX3JlYWxsb2MgX2x1YUxfY2hlY2t2ZXJzaW9uXyBfbHVhTF9nZXRtZXRhZmllbGQgX2x1YUxfY2FsbG1ldGEgX2x1YUxfdG9sc3RyaW5nIF9sdWFMX2FyZ2Vycm9yIF9sdWFMX3R5cGVlcnJvciBfbHVhTF9jaGVja2xzdHJpbmcgX2x1YUxfb3B0bHN0cmluZyBfbHVhTF9jaGVja251bWJlciBfbHVhTF9vcHRudW1iZXIgX2x1YUxfY2hlY2tpbnRlZ2VyIF9sdWFMX29wdGludGVnZXIgX2x1YUxfY2hlY2tzdGFjayBfbHVhTF9jaGVja3R5cGUgX2x1YUxfY2hlY2thbnkgX2x1YUxfbmV3bWV0YXRhYmxlIF9sdWFMX3NldG1ldGF0YWJsZSBfbHVhTF90ZXN0dWRhdGEgX2x1YUxfY2hlY2t1ZGF0YSBfbHVhTF93aGVyZSBfbHVhTF9maWxlcmVzdWx0IF9sdWFMX2V4ZWNyZXN1bHQgX2x1YUxfcmVmIF9sdWFMX3VucmVmIF9sdWFMX2xvYWRmaWxleCBfbHVhTF9sb2FkYnVmZmVyeCBfbHVhTF9sb2Fkc3RyaW5nIF9sdWFMX25ld3N0YXRlIF9sdWFMX2xlbiBfbHVhTF9hZGRnc3ViIF9sdWFMX2dzdWIgX2x1YUxfc2V0ZnVuY3MgX2x1YUxfZ2V0c3VidGFibGUgX2x1YUxfdHJhY2ViYWNrIF9sdWFMX3JlcXVpcmVmIF9sdWFMX2J1ZmZpbml0IF9sdWFMX3ByZXBidWZmc2l6ZSBfbHVhTF9hZGRsc3RyaW5nIF9sdWFMX2FkZHN0cmluZyBfbHVhTF9hZGR2YWx1ZSBfbHVhTF9wdXNocmVzdWx0IF9sdWFMX3B1c2hyZXN1bHRzaXplIF9sdWFMX2J1ZmZpbml0c2l6ZSBfbHVhX25ld3N0YXRlIF9sdWFfY2xvc2UgX2x1YV9uZXd0aHJlYWQgX2x1YV9yZXNldHRocmVhZCBfbHVhX2F0cGFuaWMgX2x1YV92ZXJzaW9uIF9sdWFfYWJzaW5kZXggX2x1YV9nZXR0b3AgX2x1YV9zZXR0b3AgX2x1YV9wdXNodmFsdWUgX2x1YV9yb3RhdGUgX2x1YV9jb3B5IF9sdWFfY2hlY2tzdGFjayBfbHVhX3htb3ZlIF9sdWFfaXNudW1iZXIgX2x1YV9pc3N0cmluZyBfbHVhX2lzY2Z1bmN0aW9uIF9sdWFfaXNpbnRlZ2VyIF9sdWFfaXN1c2VyZGF0YSBfbHVhX3R5cGUgX2x1YV90eXBlbmFtZSBfbHVhX3RvbnVtYmVyeCBfbHVhX3RvaW50ZWdlcnggX2x1YV90b2Jvb2xlYW4gX2x1YV90b2xzdHJpbmcgX2x1YV9yYXdsZW4gX2x1YV90b2NmdW5jdGlvbiBfbHVhX3RvdXNlcmRhdGEgX2x1YV90b3RocmVhZCBfbHVhX3RvcG9pbnRlciBfbHVhX2FyaXRoIF9sdWFfcmF3ZXF1YWwgX2x1YV9jb21wYXJlIF9sdWFfcHVzaG5pbCBfbHVhX3B1c2hudW1iZXIgX2x1YV9wdXNoaW50ZWdlciBfbHVhX3B1c2hsc3RyaW5nIF9sdWFfcHVzaHN0cmluZyBfbHVhX3B1c2hjY2xvc3VyZSBfbHVhX3B1c2hib29sZWFuIF9sdWFfcHVzaGxpZ2h0dXNlcmRhdGEgX2x1YV9wdXNodGhyZWFkIF9sdWFfZ2V0Z2xvYmFsIF9sdWFfZ2V0dGFibGUgX2x1YV9nZXRmaWVsZCBfbHVhX2dldGkgX2x1YV9yYXdnZXQgX2x1YV9yYXdnZXRpIF9sdWFfcmF3Z2V0cCBfbHVhX2NyZWF0ZXRhYmxlIF9sdWFfbmV3dXNlcmRhdGF1diBfbHVhX2dldG1ldGF0YWJsZSBfbHVhX2dldGl1c2VydmFsdWUgX2x1YV9zZXRnbG9iYWwgX2x1YV9zZXR0YWJsZSBfbHVhX3NldGZpZWxkIF9sdWFfc2V0aSBfbHVhX3Jhd3NldCBfbHVhX3Jhd3NldGkgX2x1YV9yYXdzZXRwIF9sdWFfc2V0bWV0YXRhYmxlIF9sdWFfc2V0aXVzZXJ2YWx1ZSBfbHVhX2NhbGxrIF9sdWFfcGNhbGxrIF9sdWFfbG9hZCBfbHVhX2R1bXAgX2x1YV95aWVsZGsgX2x1YV9yZXN1bWUgX2x1YV9zdGF0dXMgX2x1YV9pc3lpZWxkYWJsZSBfbHVhX3NldHdhcm5mIF9sdWFfd2FybmluZyBfbHVhX2Vycm9yIF9sdWFfbmV4dCBfbHVhX2NvbmNhdCBfbHVhX2xlbiBfbHVhX3N0cmluZ3RvbnVtYmVyIF9sdWFfZ2V0YWxsb2NmIF9sdWFfc2V0YWxsb2NmIF9sdWFfdG9jbG9zZSBfbHVhX2Nsb3Nlc2xvdCBfbHVhX2dldHN0YWNrIF9sdWFfZ2V0aW5mbyBfbHVhX2dldGxvY2FsIF9sdWFfc2V0bG9jYWwgX2x1YV9nZXR1cHZhbHVlIF9sdWFfc2V0dXB2YWx1ZSBfbHVhX3VwdmFsdWVpZCBfbHVhX3VwdmFsdWVqb2luIF9sdWFfc2V0aG9vayBfbHVhX2dldGhvb2sgX2x1YV9nZXRob29rbWFzayBfbHVhX2dldGhvb2tjb3VudCBfbHVhX3NldGNzdGFja2xpbWl0IF9sdWFvcGVuX2Jhc2UgX2x1YW9wZW5fY29yb3V0aW5lIF9sdWFvcGVuX3RhYmxlIF9sdWFvcGVuX2lvIF9sdWFvcGVuX29zIF9sdWFvcGVuX3N0cmluZyBfbHVhb3Blbl91dGY4IF9sdWFvcGVuX21hdGggX2x1YW9wZW5fZGVidWcgX2x1YW9wZW5fcGFja2FnZSBfbHVhTF9vcGVubGlicyBfbWVtb3J5IF9fX2luZGlyZWN0X2Z1bmN0aW9uX3RhYmxlIF9mZmx1c2ggb25SdW50aW1lSW5pdGlhbGl6ZWRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChhPT57T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLnJlYWR5LFxuICAgIGEpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5yZWFkeSxhLHtnZXQ6KCk9PmcoXCJZb3UgYXJlIGdldHRpbmcgXCIrYStcIiBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKSxzZXQ6KCk9PmcoXCJZb3UgYXJlIHNldHRpbmcgXCIrYStcIiBvbiB0aGUgUHJvbWlzZSBvYmplY3QsIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlLiBVc2UgLnRoZW4oKSB0byBnZXQgY2FsbGVkIGJhY2sgd2l0aCB0aGUgaW5zdGFuY2UsIHNlZSB0aGUgTU9EVUxBUklaRSBkb2NzIGluIHNyYy9zZXR0aW5ncy5qc1wiKX0pO30pO1xuICAgIHZhciBjYT1PYmplY3QuYXNzaWduKHt9LGUpLGRhPVwiLi90aGlzLnByb2dyYW1cIixlYT0oYSxiKT0+e3Rocm93IGI7fSxmYT1cIm9iamVjdFwiPT10eXBlb2Ygd2luZG93LGs9XCJmdW5jdGlvblwiPT10eXBlb2YgaW1wb3J0U2NyaXB0cyxuPVwib2JqZWN0XCI9PXR5cGVvZiBwcm9jZXNzJiZcIm9iamVjdFwiPT10eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyYmXCJzdHJpbmdcIj09dHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSxoYT0hZmEmJiFuJiYhaztpZihlLkVOVklST05NRU5UKXRocm93IEVycm9yKFwiTW9kdWxlLkVOVklST05NRU5UIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFRvIGZvcmNlIHRoZSBlbnZpcm9ubWVudCwgdXNlIHRoZSBFTlZJUk9OTUVOVCBjb21waWxlLXRpbWUgb3B0aW9uIChmb3IgZXhhbXBsZSwgLXNFTlZJUk9OTUVOVD13ZWIgb3IgLXNFTlZJUk9OTUVOVD1ub2RlKVwiKTt2YXIgcj1cIlwiLGlhLGphLGthO1xuICAgIGlmKG4pe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBwcm9jZXNzfHwhcHJvY2Vzcy5yZWxlYXNlfHxcIm5vZGVcIiE9PXByb2Nlc3MucmVsZWFzZS5uYW1lKXRocm93IEVycm9yKFwibm90IGNvbXBpbGVkIGZvciB0aGlzIGVudmlyb25tZW50IChkaWQgeW91IGJ1aWxkIHRvIEhUTUwgYW5kIHRyeSB0byBydW4gaXQgbm90IG9uIHRoZSB3ZWIsIG9yIHNldCBFTlZJUk9OTUVOVCB0byBzb21ldGhpbmcgLSBsaWtlIG5vZGUgLSBhbmQgcnVuIGl0IHNvbWVwbGFjZSBlbHNlIC0gbGlrZSBvbiB0aGUgd2ViPylcIik7dmFyIGxhPXByb2Nlc3MudmVyc2lvbnMubm9kZSxtYT1sYS5zcGxpdChcIi5cIikuc2xpY2UoMCwzKTttYT0xRTQqbWFbMF0rMTAwKm1hWzFdKzEqbWFbMl0uc3BsaXQoXCItXCIpWzBdO2lmKDE2RTQ+bWEpdGhyb3cgRXJyb3IoXCJUaGlzIGVtc2NyaXB0ZW4tZ2VuZXJhdGVkIGNvZGUgcmVxdWlyZXMgbm9kZSB2MTYuMC4wIChkZXRlY3RlZCB2XCIrbGErXCIpXCIpO2NvbnN0IHtjcmVhdGVSZXF1aXJlOmF9PVxuICAgIGF3YWl0IGltcG9ydCgnbW9kdWxlJyk7dmFyIHJlcXVpcmUkMT1hKCh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBsb2NhdGlvbiA9PT0gJ3VuZGVmaW5lZCcgPyByZXF1aXJlKCd1JyArICdybCcpLnBhdGhUb0ZpbGVVUkwoX19maWxlbmFtZSkuaHJlZiA6IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgPyBsb2NhdGlvbi5ocmVmIDogKF9kb2N1bWVudEN1cnJlbnRTY3JpcHQgJiYgX2RvY3VtZW50Q3VycmVudFNjcmlwdC5zcmMgfHwgbmV3IFVSTCgnaW5kZXguanMnLCBkb2N1bWVudC5iYXNlVVJJKS5ocmVmKSkpLGZzPXJlcXVpcmUkMShcImZzXCIpLG5hPXJlcXVpcmUkMShcInBhdGhcIik7az9yPW5hLmRpcm5hbWUocikrXCIvXCI6cj1yZXF1aXJlJDEoXCJ1cmxcIikuZmlsZVVSTFRvUGF0aChuZXcgVVJMKFwiLi9cIiwodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbG9jYXRpb24gPT09ICd1bmRlZmluZWQnID8gcmVxdWlyZSgndScgKyAncmwnKS5wYXRoVG9GaWxlVVJMKF9fZmlsZW5hbWUpLmhyZWYgOiB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnID8gbG9jYXRpb24uaHJlZiA6IChfZG9jdW1lbnRDdXJyZW50U2NyaXB0ICYmIF9kb2N1bWVudEN1cnJlbnRTY3JpcHQuc3JjIHx8IG5ldyBVUkwoJ2luZGV4LmpzJywgZG9jdW1lbnQuYmFzZVVSSSkuaHJlZikpKSk7aWE9KGIsYyk9PntiPW9hKGIpP25ldyBVUkwoYik6bmEubm9ybWFsaXplKGIpO3JldHVybiBmcy5yZWFkRmlsZVN5bmMoYixjP3ZvaWQgMDpcInV0ZjhcIil9O2thPWI9PntiPWlhKGIsITApO2IuYnVmZmVyfHwoYj1uZXcgVWludDhBcnJheShiKSk7dShiLmJ1ZmZlcik7cmV0dXJuIGJ9O2phPShiLGMsZCxmPSEwKT0+e2I9b2EoYik/bmV3IFVSTChiKTpuYS5ub3JtYWxpemUoYik7ZnMucmVhZEZpbGUoYixmP3ZvaWQgMDpcInV0ZjhcIiwoaCxtKT0+e2g/ZChoKTpjKGY/bS5idWZmZXI6bSk7fSk7fTshZS50aGlzUHJvZ3JhbSYmXG4gICAgMTxwcm9jZXNzLmFyZ3YubGVuZ3RoJiYoZGE9cHJvY2Vzcy5hcmd2WzFdLnJlcGxhY2UoL1xcXFwvZyxcIi9cIikpO3Byb2Nlc3MuYXJndi5zbGljZSgyKTtlYT0oYixjKT0+e3Byb2Nlc3MuZXhpdENvZGU9Yjt0aHJvdyBjO307ZS5pbnNwZWN0PSgpPT5cIltFbXNjcmlwdGVuIE1vZHVsZSBvYmplY3RdXCI7fWVsc2UgaWYoaGEpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBwcm9jZXNzJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVxdWlyZSQxfHxcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBpbXBvcnRTY3JpcHRzKXRocm93IEVycm9yKFwibm90IGNvbXBpbGVkIGZvciB0aGlzIGVudmlyb25tZW50IChkaWQgeW91IGJ1aWxkIHRvIEhUTUwgYW5kIHRyeSB0byBydW4gaXQgbm90IG9uIHRoZSB3ZWIsIG9yIHNldCBFTlZJUk9OTUVOVCB0byBzb21ldGhpbmcgLSBsaWtlIG5vZGUgLSBhbmQgcnVuIGl0IHNvbWVwbGFjZSBlbHNlIC0gbGlrZSBvbiB0aGUgd2ViPylcIik7XCJ1bmRlZmluZWRcIiE9XG4gICAgdHlwZW9mIHJlYWQmJihpYT1yZWFkKTtrYT1hPT57aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgcmVhZGJ1ZmZlcilyZXR1cm4gbmV3IFVpbnQ4QXJyYXkocmVhZGJ1ZmZlcihhKSk7YT1yZWFkKGEsXCJiaW5hcnlcIik7dShcIm9iamVjdFwiPT10eXBlb2YgYSk7cmV0dXJuIGF9O2phPShhLGIpPT57c2V0VGltZW91dCgoKT0+YihrYShhKSkpO307XCJ1bmRlZmluZWRcIj09dHlwZW9mIGNsZWFyVGltZW91dCYmKGdsb2JhbFRoaXMuY2xlYXJUaW1lb3V0PSgpPT57fSk7XCJ1bmRlZmluZWRcIj09dHlwZW9mIHNldFRpbWVvdXQmJihnbG9iYWxUaGlzLnNldFRpbWVvdXQ9YT0+XCJmdW5jdGlvblwiPT10eXBlb2YgYT9hKCk6ZygpKTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBxdWl0JiYoZWE9KGEsYik9PntzZXRUaW1lb3V0KCgpPT57aWYoIShiIGluc3RhbmNlb2YgcGEpKXtsZXQgYz1iO2ImJlwib2JqZWN0XCI9PXR5cGVvZiBiJiZiLnN0YWNrJiYoYz1bYixiLnN0YWNrXSk7eihgZXhpdGluZyBkdWUgdG8gZXhjZXB0aW9uOiAke2N9YCk7fXF1aXQoYSk7fSk7XG4gICAgdGhyb3cgYjt9KTtcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJpbnQmJihcInVuZGVmaW5lZFwiPT10eXBlb2YgY29uc29sZSYmKGNvbnNvbGU9e30pLGNvbnNvbGUubG9nPXByaW50LGNvbnNvbGUud2Fybj1jb25zb2xlLmVycm9yPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcmludEVycj9wcmludEVycjpwcmludCk7fWVsc2UgaWYoZmF8fGspe2s/cj1zZWxmLmxvY2F0aW9uLmhyZWY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50JiZkb2N1bWVudC5jdXJyZW50U2NyaXB0JiYocj1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyk7X3NjcmlwdERpciYmKHI9X3NjcmlwdERpcik7MCE9PXIuaW5kZXhPZihcImJsb2I6XCIpP3I9ci5zdWJzdHIoMCxyLnJlcGxhY2UoL1s/I10uKi8sXCJcIikubGFzdEluZGV4T2YoXCIvXCIpKzEpOnI9XCJcIjtpZihcIm9iamVjdFwiIT10eXBlb2Ygd2luZG93JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBpbXBvcnRTY3JpcHRzKXRocm93IEVycm9yKFwibm90IGNvbXBpbGVkIGZvciB0aGlzIGVudmlyb25tZW50IChkaWQgeW91IGJ1aWxkIHRvIEhUTUwgYW5kIHRyeSB0byBydW4gaXQgbm90IG9uIHRoZSB3ZWIsIG9yIHNldCBFTlZJUk9OTUVOVCB0byBzb21ldGhpbmcgLSBsaWtlIG5vZGUgLSBhbmQgcnVuIGl0IHNvbWVwbGFjZSBlbHNlIC0gbGlrZSBvbiB0aGUgd2ViPylcIik7XG4gICAgaWE9YT0+e3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJHRVRcIixhLCExKTtiLnNlbmQobnVsbCk7cmV0dXJuIGIucmVzcG9uc2VUZXh0fTtrJiYoa2E9YT0+e3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJHRVRcIixhLCExKTtiLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7Yi5zZW5kKG51bGwpO3JldHVybiBuZXcgVWludDhBcnJheShiLnJlc3BvbnNlKX0pO2phPShhLGIsYyk9Pnt2YXIgZD1uZXcgWE1MSHR0cFJlcXVlc3Q7ZC5vcGVuKFwiR0VUXCIsYSwhMCk7ZC5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiO2Qub25sb2FkPSgpPT57MjAwPT1kLnN0YXR1c3x8MD09ZC5zdGF0dXMmJmQucmVzcG9uc2U/YihkLnJlc3BvbnNlKTpjKCk7fTtkLm9uZXJyb3I9YztkLnNlbmQobnVsbCk7fTt9ZWxzZSB0aHJvdyBFcnJvcihcImVudmlyb25tZW50IGRldGVjdGlvbiBlcnJvclwiKTt2YXIgcWE9Y29uc29sZS5sb2cuYmluZChjb25zb2xlKSx6PWNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKTtcbiAgICBPYmplY3QuYXNzaWduKGUsY2EpO2NhPW51bGw7QyhcIkVOVklST05NRU5UXCIpO0MoXCJHTF9NQVhfVEVYVFVSRV9JTUFHRV9VTklUU1wiKTtDKFwiU0RMX2NhblBsYXlXaXRoV2ViQXVkaW9cIik7QyhcIlNETF9udW1TaW11bHRhbmVvdXNseVF1ZXVlZEJ1ZmZlcnNcIik7QyhcIklOSVRJQUxfTUVNT1JZXCIpO0MoXCJ3YXNtTWVtb3J5XCIpO0MoXCJhcmd1bWVudHNcIik7QyhcImJ1ZmZlclwiKTtDKFwiY2FudmFzXCIpO0MoXCJkb05vdENhcHR1cmVLZXlib2FyZFwiKTtDKFwiZHluYW1pY0xpYnJhcmllc1wiKTtDKFwiZWxlbWVudFBvaW50ZXJMb2NrXCIpO0MoXCJleHRyYVN0YWNrVHJhY2VcIik7QyhcImZvcmNlZEFzcGVjdFJhdGlvXCIpO0MoXCJpbnN0YW50aWF0ZVdhc21cIik7QyhcImtleWJvYXJkTGlzdGVuaW5nRWxlbWVudFwiKTtDKFwiZnJlZVByZWxvYWRlZE1lZGlhT25Vc2VcIik7QyhcImxvYWRTcGxpdE1vZHVsZVwiKTtDKFwibG9nUmVhZEZpbGVzXCIpO0MoXCJtYWluU2NyaXB0VXJsT3JCbG9iXCIpO0MoXCJtZW1cIik7QyhcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIik7XG4gICAgQyhcIm5vRXhpdFJ1bnRpbWVcIik7QyhcIm5vSW5pdGlhbFJ1blwiKTtDKFwib25BYm9ydFwiKTtDKFwib25DdXN0b21NZXNzYWdlXCIpO0MoXCJvbkV4aXRcIik7QyhcIm9uRnJlZVwiKTtDKFwib25GdWxsU2NyZWVuXCIpO0MoXCJvbk1hbGxvY1wiKTtDKFwib25SZWFsbG9jXCIpO0MoXCJvblJ1bnRpbWVJbml0aWFsaXplZFwiKTtDKFwicG9zdE1haW5Mb29wXCIpO0MoXCJwb3N0UnVuXCIpO0MoXCJwcmVJbml0XCIpO0MoXCJwcmVNYWluTG9vcFwiKTtDKFwicHJlaW5pdGlhbGl6ZWRXZWJHTENvbnRleHRcIik7QyhcIm1lbW9yeUluaXRpYWxpemVyUmVxdWVzdFwiKTtDKFwicHJlbG9hZFBsdWdpbnNcIik7QyhcInByaW50XCIpO0MoXCJwcmludEVyclwiKTtDKFwicXVpdFwiKTtDKFwic2V0U3RhdHVzXCIpO0MoXCJzdGF0dXNNZXNzYWdlXCIpO0MoXCJzdGRlcnJcIik7QyhcInN0ZGluXCIpO0MoXCJzdGRvdXRcIik7QyhcInRoaXNQcm9ncmFtXCIpO0MoXCJ3YXNtXCIpO0MoXCJ3YXNtQmluYXJ5XCIpO0MoXCJ3ZWJzb2NrZXRcIik7QyhcImZldGNoU2V0dGluZ3NcIik7XG4gICAgRChcImFyZ3VtZW50c1wiLFwiYXJndW1lbnRzX1wiKTtEKFwidGhpc1Byb2dyYW1cIixcInRoaXNQcm9ncmFtXCIpO0QoXCJxdWl0XCIsXCJxdWl0X1wiKTt1KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlLm1lbW9yeUluaXRpYWxpemVyUHJlZml4VVJMLFwiTW9kdWxlLm1lbW9yeUluaXRpYWxpemVyUHJlZml4VVJMIG9wdGlvbiB3YXMgcmVtb3ZlZCwgdXNlIE1vZHVsZS5sb2NhdGVGaWxlIGluc3RlYWRcIik7dShcInVuZGVmaW5lZFwiPT10eXBlb2YgZS5wdGhyZWFkTWFpblByZWZpeFVSTCxcIk1vZHVsZS5wdGhyZWFkTWFpblByZWZpeFVSTCBvcHRpb24gd2FzIHJlbW92ZWQsIHVzZSBNb2R1bGUubG9jYXRlRmlsZSBpbnN0ZWFkXCIpO3UoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGUuY2RJbml0aWFsaXplclByZWZpeFVSTCxcIk1vZHVsZS5jZEluaXRpYWxpemVyUHJlZml4VVJMIG9wdGlvbiB3YXMgcmVtb3ZlZCwgdXNlIE1vZHVsZS5sb2NhdGVGaWxlIGluc3RlYWRcIik7XG4gICAgdShcInVuZGVmaW5lZFwiPT10eXBlb2YgZS5maWxlUGFja2FnZVByZWZpeFVSTCxcIk1vZHVsZS5maWxlUGFja2FnZVByZWZpeFVSTCBvcHRpb24gd2FzIHJlbW92ZWQsIHVzZSBNb2R1bGUubG9jYXRlRmlsZSBpbnN0ZWFkXCIpO3UoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGUucmVhZCxcIk1vZHVsZS5yZWFkIG9wdGlvbiB3YXMgcmVtb3ZlZCAobW9kaWZ5IHJlYWRfIGluIEpTKVwiKTt1KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlLnJlYWRBc3luYyxcIk1vZHVsZS5yZWFkQXN5bmMgb3B0aW9uIHdhcyByZW1vdmVkIChtb2RpZnkgcmVhZEFzeW5jIGluIEpTKVwiKTt1KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlLnJlYWRCaW5hcnksXCJNb2R1bGUucmVhZEJpbmFyeSBvcHRpb24gd2FzIHJlbW92ZWQgKG1vZGlmeSByZWFkQmluYXJ5IGluIEpTKVwiKTt1KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlLnNldFdpbmRvd1RpdGxlLFwiTW9kdWxlLnNldFdpbmRvd1RpdGxlIG9wdGlvbiB3YXMgcmVtb3ZlZCAobW9kaWZ5IGVtc2NyaXB0ZW5fc2V0X3dpbmRvd190aXRsZSBpbiBKUylcIik7XG4gICAgdShcInVuZGVmaW5lZFwiPT10eXBlb2YgZS5UT1RBTF9NRU1PUlksXCJNb2R1bGUuVE9UQUxfTUVNT1JZIGhhcyBiZWVuIHJlbmFtZWQgTW9kdWxlLklOSVRJQUxfTUVNT1JZXCIpO0QoXCJhc21cIixcIndhc21FeHBvcnRzXCIpO0QoXCJyZWFkXCIsXCJyZWFkX1wiKTtEKFwicmVhZEFzeW5jXCIsXCJyZWFkQXN5bmNcIik7RChcInJlYWRCaW5hcnlcIixcInJlYWRCaW5hcnlcIik7RChcInNldFdpbmRvd1RpdGxlXCIsXCJzZXRXaW5kb3dUaXRsZVwiKTt1KCFoYSxcInNoZWxsIGVudmlyb25tZW50IGRldGVjdGVkIGJ1dCBub3QgZW5hYmxlZCBhdCBidWlsZCB0aW1lLiAgQWRkICdzaGVsbCcgdG8gYC1zRU5WSVJPTk1FTlRgIHRvIGVuYWJsZS5cIik7RChcIndhc21CaW5hcnlcIixcIndhc21CaW5hcnlcIik7XCJvYmplY3RcIiE9dHlwZW9mIFdlYkFzc2VtYmx5JiZnKFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKTt2YXIgcmEsc2E9ITE7XG4gICAgZnVuY3Rpb24gdShhLGIpe2F8fGcoXCJBc3NlcnRpb24gZmFpbGVkXCIrKGI/XCI6IFwiK2I6XCJcIikpO312YXIgRSx0YSx1YSxGLEcsdmEsd2EseGE7ZnVuY3Rpb24geWEoKXt2YXIgYT1yYS5idWZmZXI7ZS5IRUFQOD1FPW5ldyBJbnQ4QXJyYXkoYSk7ZS5IRUFQMTY9dWE9bmV3IEludDE2QXJyYXkoYSk7ZS5IRUFQVTg9dGE9bmV3IFVpbnQ4QXJyYXkoYSk7ZS5IRUFQVTE2PW5ldyBVaW50MTZBcnJheShhKTtlLkhFQVAzMj1GPW5ldyBJbnQzMkFycmF5KGEpO2UuSEVBUFUzMj1HPW5ldyBVaW50MzJBcnJheShhKTtlLkhFQVBGMzI9dmE9bmV3IEZsb2F0MzJBcnJheShhKTtlLkhFQVBGNjQ9eGE9bmV3IEZsb2F0NjRBcnJheShhKTtlLkhFQVA2ND13YT1uZXcgQmlnSW50NjRBcnJheShhKTtlLkhFQVBVNjQ9bmV3IEJpZ1VpbnQ2NEFycmF5KGEpO311KCFlLlNUQUNLX1NJWkUsXCJTVEFDS19TSVpFIGNhbiBubyBsb25nZXIgYmUgc2V0IGF0IHJ1bnRpbWUuICBVc2UgLXNTVEFDS19TSVpFIGF0IGxpbmsgdGltZVwiKTtcbiAgICB1KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBJbnQzMkFycmF5JiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIEZsb2F0NjRBcnJheSYmdm9pZCAwIT1JbnQzMkFycmF5LnByb3RvdHlwZS5zdWJhcnJheSYmdm9pZCAwIT1JbnQzMkFycmF5LnByb3RvdHlwZS5zZXQsXCJKUyBlbmdpbmUgZG9lcyBub3QgcHJvdmlkZSBmdWxsIHR5cGVkIGFycmF5IHN1cHBvcnRcIik7dSghZS53YXNtTWVtb3J5LFwiVXNlIG9mIGB3YXNtTWVtb3J5YCBkZXRlY3RlZC4gIFVzZSAtc0lNUE9SVEVEX01FTU9SWSB0byBkZWZpbmUgd2FzbU1lbW9yeSBleHRlcm5hbGx5XCIpO3UoIWUuSU5JVElBTF9NRU1PUlksXCJEZXRlY3RlZCBydW50aW1lIElOSVRJQUxfTUVNT1JZIHNldHRpbmcuICBVc2UgLXNJTVBPUlRFRF9NRU1PUlkgdG8gZGVmaW5lIHdhc21NZW1vcnkgZHluYW1pY2FsbHlcIik7XG4gICAgZnVuY3Rpb24gemEoKXtpZighc2Epe3ZhciBhPUFhKCk7MD09YSYmKGErPTQpO3ZhciBiPUdbYT4+Ml0sYz1HW2ErND4+Ml07MzQ4MjEyMjM9PWImJjIzMTA3MjEwMjI9PWN8fGcoYFN0YWNrIG92ZXJmbG93ISBTdGFjayBjb29raWUgaGFzIGJlZW4gb3ZlcndyaXR0ZW4gYXQgJHtCYShhKX0sIGV4cGVjdGVkIGhleCBkd29yZHMgMHg4OUJBQ0RGRSBhbmQgMHgyMTM1NDY3LCBidXQgcmVjZWl2ZWQgJHtCYShjKX0gJHtCYShiKX1gKTsxNjY4NTA5MDI5IT1HWzBdJiZnKFwiUnVudGltZSBlcnJvcjogVGhlIGFwcGxpY2F0aW9uIGhhcyBjb3JydXB0ZWQgaXRzIGhlYXAgbWVtb3J5IGFyZWEgKGFkZHJlc3MgemVybykhXCIpO319dmFyIENhPW5ldyBJbnQxNkFycmF5KDEpLERhPW5ldyBJbnQ4QXJyYXkoQ2EuYnVmZmVyKTtDYVswXT0yNTQ1OTtcbiAgICBpZigxMTUhPT1EYVswXXx8OTkhPT1EYVsxXSl0aHJvdyBcIlJ1bnRpbWUgZXJyb3I6IGV4cGVjdGVkIHRoZSBzeXN0ZW0gdG8gYmUgbGl0dGxlLWVuZGlhbiEgKFJ1biB3aXRoIC1zU1VQUE9SVF9CSUdfRU5ESUFOIHRvIGJ5cGFzcylcIjt2YXIgRWE9W10sRmE9W10sR2E9W10sSGE9ITE7dShNYXRoLmltdWwsXCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBNYXRoLmltdWwoKSwgYnVpbGQgd2l0aCBMRUdBQ1lfVk1fU1VQUE9SVCBvciBQT0xZRklMTF9PTERfTUFUSF9GVU5DVElPTlMgdG8gYWRkIGluIGEgcG9seWZpbGxcIik7dShNYXRoLmZyb3VuZCxcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IE1hdGguZnJvdW5kKCksIGJ1aWxkIHdpdGggTEVHQUNZX1ZNX1NVUFBPUlQgb3IgUE9MWUZJTExfT0xEX01BVEhfRlVOQ1RJT05TIHRvIGFkZCBpbiBhIHBvbHlmaWxsXCIpO3UoTWF0aC5jbHozMixcIlRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IE1hdGguY2x6MzIoKSwgYnVpbGQgd2l0aCBMRUdBQ1lfVk1fU1VQUE9SVCBvciBQT0xZRklMTF9PTERfTUFUSF9GVU5DVElPTlMgdG8gYWRkIGluIGEgcG9seWZpbGxcIik7XG4gICAgdShNYXRoLnRydW5jLFwiVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgTWF0aC50cnVuYygpLCBidWlsZCB3aXRoIExFR0FDWV9WTV9TVVBQT1JUIG9yIFBPTFlGSUxMX09MRF9NQVRIX0ZVTkNUSU9OUyB0byBhZGQgaW4gYSBwb2x5ZmlsbFwiKTt2YXIgSWE9MCxJPW51bGwsSmE9bnVsbCxLYT17fTtmdW5jdGlvbiBMYShhKXtmb3IodmFyIGI9YTs7KXtpZighS2FbYV0pcmV0dXJuIGE7YT1iK01hdGgucmFuZG9tKCk7fX1cbiAgICBmdW5jdGlvbiBNYShhKXtJYSsrO2E/KHUoIUthW2FdKSxLYVthXT0xLG51bGw9PT1JJiZcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2V0SW50ZXJ2YWwmJihJPXNldEludGVydmFsKCgpPT57aWYoc2EpY2xlYXJJbnRlcnZhbChJKSxJPW51bGw7ZWxzZSB7dmFyIGI9ITEsYztmb3IoYyBpbiBLYSlifHwoYj0hMCx6KFwic3RpbGwgd2FpdGluZyBvbiBydW4gZGVwZW5kZW5jaWVzOlwiKSkseihgZGVwZW5kZW5jeTogJHtjfWApO2ImJnooXCIoZW5kIG9mIGxpc3QpXCIpO319LDFFNCkpKTp6KFwid2FybmluZzogcnVuIGRlcGVuZGVuY3kgYWRkZWQgd2l0aG91dCBJRFwiKTt9ZnVuY3Rpb24gTmEoYSl7SWEtLTthPyh1KEthW2FdKSxkZWxldGUgS2FbYV0pOnooXCJ3YXJuaW5nOiBydW4gZGVwZW5kZW5jeSByZW1vdmVkIHdpdGhvdXQgSURcIik7MD09SWEmJihudWxsIT09SSYmKGNsZWFySW50ZXJ2YWwoSSksST1udWxsKSxKYSYmKGE9SmEsSmE9bnVsbCxhKCkpKTt9XG4gICAgZnVuY3Rpb24gZyhhKXthPVwiQWJvcnRlZChcIithK1wiKVwiO3ooYSk7c2E9ITA7YT1uZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKGEpO2JhKGEpO3Rocm93IGE7fXZhciBPYT1hPT5hLnN0YXJ0c1dpdGgoXCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsXCIpLG9hPWE9PmEuc3RhcnRzV2l0aChcImZpbGU6Ly9cIik7ZnVuY3Rpb24gSihhKXtyZXR1cm4gZnVuY3Rpb24oKXt1KEhhLGBuYXRpdmUgZnVuY3Rpb24gXFxgJHthfVxcYCBjYWxsZWQgYmVmb3JlIHJ1bnRpbWUgaW5pdGlhbGl6YXRpb25gKTt2YXIgYj1MW2FdO3UoYixgZXhwb3J0ZWQgbmF0aXZlIGZ1bmN0aW9uIFxcYCR7YX1cXGAgbm90IGZvdW5kYCk7cmV0dXJuIGIuYXBwbHkobnVsbCxhcmd1bWVudHMpfX12YXIgTTtcbiAgICBpZihlLmxvY2F0ZUZpbGUpe2lmKE09XCJnbHVlLndhc21cIiwhT2EoTSkpe3ZhciBQYT1NO009ZS5sb2NhdGVGaWxlP2UubG9jYXRlRmlsZShQYSxyKTpyK1BhO319ZWxzZSBNPShuZXcgVVJMKFwiZ2x1ZS53YXNtXCIsKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGxvY2F0aW9uID09PSAndW5kZWZpbmVkJyA/IHJlcXVpcmUoJ3UnICsgJ3JsJykucGF0aFRvRmlsZVVSTChfX2ZpbGVuYW1lKS5ocmVmIDogdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyA/IGxvY2F0aW9uLmhyZWYgOiAoX2RvY3VtZW50Q3VycmVudFNjcmlwdCAmJiBfZG9jdW1lbnRDdXJyZW50U2NyaXB0LnNyYyB8fCBuZXcgVVJMKCdpbmRleC5qcycsIGRvY3VtZW50LmJhc2VVUkkpLmhyZWYpKSkpLmhyZWY7ZnVuY3Rpb24gUWEoYSl7aWYoa2EpcmV0dXJuIGthKGEpO3Rocm93IFwiYm90aCBhc3luYyBhbmQgc3luYyBmZXRjaGluZyBvZiB0aGUgd2FzbSBmYWlsZWRcIjt9XG4gICAgZnVuY3Rpb24gUmEoYSl7aWYoZmF8fGspe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGZldGNoJiYhb2EoYSkpcmV0dXJuIGZldGNoKGEse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oYj0+e2lmKCFiLm9rKXRocm93IFwiZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnXCIrYStcIidcIjtyZXR1cm4gYi5hcnJheUJ1ZmZlcigpfSkuY2F0Y2goKCk9PlFhKGEpKTtpZihqYSlyZXR1cm4gbmV3IFByb21pc2UoKGIsYyk9PntqYShhLGQ9PmIobmV3IFVpbnQ4QXJyYXkoZCkpLGMpO30pfXJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT5RYShhKSl9XG4gICAgZnVuY3Rpb24gU2EoYSxiLGMpe3JldHVybiBSYShhKS50aGVuKGQ9PldlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGQsYikpLnRoZW4oZD0+ZCkudGhlbihjLGQ9Pnt6KGBmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiAke2R9YCk7b2EoTSkmJnooYHdhcm5pbmc6IExvYWRpbmcgZnJvbSBhIGZpbGUgVVJJICgke019KSBpcyBub3Qgc3VwcG9ydGVkIGluIG1vc3QgYnJvd3NlcnMuIFNlZSBodHRwczovL2Vtc2NyaXB0ZW4ub3JnL2RvY3MvZ2V0dGluZ19zdGFydGVkL0ZBUS5odG1sI2hvdy1kby1pLXJ1bi1hLWxvY2FsLXdlYnNlcnZlci1mb3ItdGVzdGluZy13aHktZG9lcy1teS1wcm9ncmFtLXN0YWxsLWluLWRvd25sb2FkaW5nLW9yLXByZXBhcmluZ2ApO2coZCk7fSl9XG4gICAgZnVuY3Rpb24gVGEoYSxiKXt2YXIgYz1NO3JldHVybiBcImZ1bmN0aW9uXCIhPXR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZ3x8T2EoYyl8fG9hKGMpfHxufHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBmZXRjaD9TYShjLGEsYik6ZmV0Y2goYyx7Y3JlZGVudGlhbHM6XCJzYW1lLW9yaWdpblwifSkudGhlbihkPT5XZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyhkLGEpLnRoZW4oYixmdW5jdGlvbihmKXt6KGB3YXNtIHN0cmVhbWluZyBjb21waWxlIGZhaWxlZDogJHtmfWApO3ooXCJmYWxsaW5nIGJhY2sgdG8gQXJyYXlCdWZmZXIgaW5zdGFudGlhdGlvblwiKTtyZXR1cm4gU2EoYyxhLGIpfSkpfVxuICAgIGZ1bmN0aW9uIEQoYSxiKXtPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsYSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLGEse2NvbmZpZ3VyYWJsZTohMCxnZXQoKXtnKGBcXGBNb2R1bGUuJHthfVxcYCBoYXMgYmVlbiByZXBsYWNlZCBieSBcXGAke2J9XFxgYCtcIiAodGhlIGluaXRpYWwgdmFsdWUgY2FuIGJlIHByb3ZpZGVkIG9uIE1vZHVsZSwgYnV0IGFmdGVyIHN0YXJ0dXAgdGhlIHZhbHVlIGlzIG9ubHkgbG9va2VkIGZvciBvbiBhIGxvY2FsIHZhcmlhYmxlIG9mIHRoYXQgbmFtZSlcIik7fX0pO31mdW5jdGlvbiBDKGEpe09iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxhKSYmZyhgXFxgTW9kdWxlLiR7YX1cXGAgd2FzIHN1cHBsaWVkIGJ1dCBcXGAke2F9XFxgIG5vdCBpbmNsdWRlZCBpbiBJTkNPTUlOR19NT0RVTEVfSlNfQVBJYCk7fVxuICAgIGZ1bmN0aW9uIFVhKGEpe3JldHVybiBcIkZTX2NyZWF0ZVBhdGhcIj09PWF8fFwiRlNfY3JlYXRlRGF0YUZpbGVcIj09PWF8fFwiRlNfY3JlYXRlUHJlbG9hZGVkRmlsZVwiPT09YXx8XCJGU191bmxpbmtcIj09PWF8fFwiYWRkUnVuRGVwZW5kZW5jeVwiPT09YXx8XCJGU19jcmVhdGVMYXp5RmlsZVwiPT09YXx8XCJGU19jcmVhdGVEZXZpY2VcIj09PWF8fFwicmVtb3ZlUnVuRGVwZW5kZW5jeVwiPT09YX1mdW5jdGlvbiBWYShhLGIpe1widW5kZWZpbmVkXCIhPT10eXBlb2YgZ2xvYmFsVGhpcyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbFRoaXMsYSx7Y29uZmlndXJhYmxlOiEwLGdldCgpe1dhKGBcXGAke2F9XFxgIGlzIG5vdCBsb25nZXIgZGVmaW5lZCBieSBlbXNjcmlwdGVuLiAke2J9YCk7fX0pO31WYShcImJ1ZmZlclwiLFwiUGxlYXNlIHVzZSBIRUFQOC5idWZmZXIgb3Igd2FzbU1lbW9yeS5idWZmZXJcIik7VmEoXCJhc21cIixcIlBsZWFzZSB1c2Ugd2FzbUV4cG9ydHMgaW5zdGVhZFwiKTtcbiAgICBmdW5jdGlvbiBYYShhKXtPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsYSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLGEse2NvbmZpZ3VyYWJsZTohMCxnZXQoKXt2YXIgYj1gJyR7YX0nIHdhcyBub3QgZXhwb3J0ZWQuIGFkZCBpdCB0byBFWFBPUlRFRF9SVU5USU1FX01FVEhPRFMgKHNlZSB0aGUgRW1zY3JpcHRlbiBGQVEpYDtVYShhKSYmKGIrPVwiLiBBbHRlcm5hdGl2ZWx5LCBmb3JjaW5nIGZpbGVzeXN0ZW0gc3VwcG9ydCAoLXNGT1JDRV9GSUxFU1lTVEVNKSBjYW4gZXhwb3J0IHRoaXMgZm9yIHlvdVwiKTtnKGIpO319KTt9ZnVuY3Rpb24gcGEoYSl7dGhpcy5uYW1lPVwiRXhpdFN0YXR1c1wiO3RoaXMubWVzc2FnZT1gUHJvZ3JhbSB0ZXJtaW5hdGVkIHdpdGggZXhpdCgke2F9KWA7dGhpcy5zdGF0dXM9YTt9XG4gICAgdmFyIEJhPWE9Pnt1KFwibnVtYmVyXCI9PT10eXBlb2YgYSk7cmV0dXJuIFwiMHhcIisoYT4+PjApLnRvU3RyaW5nKDE2KS5wYWRTdGFydCg4LFwiMFwiKX0sV2E9YT0+e1lhfHw9e307WWFbYV18fChZYVthXT0xLG4mJihhPVwid2FybmluZzogXCIrYSkseihhKSk7fSxZYSxaYT0oYSxiKT0+e2Zvcih2YXIgYz0wLGQ9YS5sZW5ndGgtMTswPD1kO2QtLSl7dmFyIGY9YVtkXTtcIi5cIj09PWY/YS5zcGxpY2UoZCwxKTpcIi4uXCI9PT1mPyhhLnNwbGljZShkLDEpLGMrKyk6YyYmKGEuc3BsaWNlKGQsMSksYy0tKTt9aWYoYilmb3IoO2M7Yy0tKWEudW5zaGlmdChcIi4uXCIpO3JldHVybiBhfSxQPWE9Pnt2YXIgYj1cIi9cIj09PWEuY2hhckF0KDApLGM9XCIvXCI9PT1hLnN1YnN0cigtMSk7KGE9WmEoYS5zcGxpdChcIi9cIikuZmlsdGVyKGQ9PiEhZCksIWIpLmpvaW4oXCIvXCIpKXx8Ynx8KGE9XCIuXCIpO2EmJmMmJihhKz1cIi9cIik7cmV0dXJuIChiP1wiL1wiOlwiXCIpK2F9LCRhPWE9Pnt2YXIgYj0vXihcXC8/fCkoW1xcc1xcU10qPykoKD86XFwuezEsMn18W15cXC9dKz98KShcXC5bXi5cXC9dKnwpKSg/OltcXC9dKikkLy5leGVjKGEpLnNsaWNlKDEpO1xuICAgIGE9YlswXTtiPWJbMV07aWYoIWEmJiFiKXJldHVybiBcIi5cIjtiJiY9Yi5zdWJzdHIoMCxiLmxlbmd0aC0xKTtyZXR1cm4gYStifSxRPWE9PntpZihcIi9cIj09PWEpcmV0dXJuIFwiL1wiO2E9UChhKTthPWEucmVwbGFjZSgvXFwvJC8sXCJcIik7dmFyIGI9YS5sYXN0SW5kZXhPZihcIi9cIik7cmV0dXJuIC0xPT09Yj9hOmEuc3Vic3RyKGIrMSl9LGFiPShhLGIpPT5QKGErXCIvXCIrYiksYmI9KCk9PntpZihcIm9iamVjdFwiPT10eXBlb2YgY3J5cHRvJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKXJldHVybiBjPT5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGMpO2lmKG4pdHJ5e3ZhciBhPXJlcXVpcmUkMShcImNyeXB0b1wiKTtpZihhLnJhbmRvbUZpbGxTeW5jKXJldHVybiBjPT5hLnJhbmRvbUZpbGxTeW5jKGMpO3ZhciBiPWEucmFuZG9tQnl0ZXM7cmV0dXJuIGM9PihjLnNldChiKGMuYnl0ZUxlbmd0aCkpLGMpfWNhdGNoKGMpe31nKFwibm8gY3J5cHRvZ3JhcGhpYyBzdXBwb3J0IGZvdW5kIGZvciByYW5kb21EZXZpY2UuIGNvbnNpZGVyIHBvbHlmaWxsaW5nIGl0IGlmIHlvdSB3YW50IHRvIHVzZSBzb21ldGhpbmcgaW5zZWN1cmUgbGlrZSBNYXRoLnJhbmRvbSgpLCBlLmcuIHB1dCB0aGlzIGluIGEgLS1wcmUtanM6IHZhciBjcnlwdG8gPSB7IGdldFJhbmRvbVZhbHVlczogKGFycmF5KSA9PiB7IGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIGFycmF5W2ldID0gKE1hdGgucmFuZG9tKCkqMjU2KXwwIH0gfTtcIik7fSxcbiAgICBjYj1hPT4oY2I9YmIoKSkoYSk7ZnVuY3Rpb24gZGIoKXtmb3IodmFyIGE9XCJcIixiPSExLGM9YXJndW1lbnRzLmxlbmd0aC0xOy0xPD1jJiYhYjtjLS0pe2I9MDw9Yz9hcmd1bWVudHNbY106Ui5jd2QoKTtpZihcInN0cmluZ1wiIT10eXBlb2YgYil0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3NcIik7aWYoIWIpcmV0dXJuIFwiXCI7YT1iK1wiL1wiK2E7Yj1cIi9cIj09PWIuY2hhckF0KDApO31hPVphKGEuc3BsaXQoXCIvXCIpLmZpbHRlcihkPT4hIWQpLCFiKS5qb2luKFwiL1wiKTtyZXR1cm4gKGI/XCIvXCI6XCJcIikrYXx8XCIuXCJ9XG4gICAgdmFyIGViPShhLGIpPT57ZnVuY3Rpb24gYyhtKXtmb3IodmFyIHA9MDtwPG0ubGVuZ3RoJiZcIlwiPT09bVtwXTtwKyspO2Zvcih2YXIgeT1tLmxlbmd0aC0xOzA8PXkmJlwiXCI9PT1tW3ldO3ktLSk7cmV0dXJuIHA+eT9bXTptLnNsaWNlKHAseS1wKzEpfWE9ZGIoYSkuc3Vic3RyKDEpO2I9ZGIoYikuc3Vic3RyKDEpO2E9YyhhLnNwbGl0KFwiL1wiKSk7Yj1jKGIuc3BsaXQoXCIvXCIpKTtmb3IodmFyIGQ9TWF0aC5taW4oYS5sZW5ndGgsYi5sZW5ndGgpLGY9ZCxoPTA7aDxkO2grKylpZihhW2hdIT09YltoXSl7Zj1oO2JyZWFrfWQ9W107Zm9yKGg9ZjtoPGEubGVuZ3RoO2grKylkLnB1c2goXCIuLlwiKTtkPWQuY29uY2F0KGIuc2xpY2UoZikpO3JldHVybiBkLmpvaW4oXCIvXCIpfSxnYj1cInVuZGVmaW5lZFwiIT10eXBlb2YgVGV4dERlY29kZXI/bmV3IFRleHREZWNvZGVyKFwidXRmOFwiKTp2b2lkIDAsaGI9KGEsYik9Pntmb3IodmFyIGM9YitOYU4sZD1iO2FbZF0mJiEoZD49Yyk7KSsrZDtpZigxNjxkLVxuICAgIGImJmEuYnVmZmVyJiZnYilyZXR1cm4gZ2IuZGVjb2RlKGEuc3ViYXJyYXkoYixkKSk7Zm9yKGM9XCJcIjtiPGQ7KXt2YXIgZj1hW2IrK107aWYoZiYxMjgpe3ZhciBoPWFbYisrXSY2MztpZigxOTI9PShmJjIyNCkpYys9U3RyaW5nLmZyb21DaGFyQ29kZSgoZiYzMSk8PDZ8aCk7ZWxzZSB7dmFyIG09YVtiKytdJjYzOzIyND09KGYmMjQwKT9mPShmJjE1KTw8MTJ8aDw8NnxtOigyNDAhPShmJjI0OCkmJldhKFwiSW52YWxpZCBVVEYtOCBsZWFkaW5nIGJ5dGUgXCIrQmEoZikrXCIgZW5jb3VudGVyZWQgd2hlbiBkZXNlcmlhbGl6aW5nIGEgVVRGLTggc3RyaW5nIGluIHdhc20gbWVtb3J5IHRvIGEgSlMgc3RyaW5nIVwiKSxmPShmJjcpPDwxOHxoPDwxMnxtPDw2fGFbYisrXSY2Myk7NjU1MzY+Zj9jKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGYpOihmLT02NTUzNixjKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fGY+PjEwLDU2MzIwfGYmMTAyMykpO319ZWxzZSBjKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGYpO31yZXR1cm4gY30sXG4gICAgaWI9W10samI9YT0+e2Zvcih2YXIgYj0wLGM9MDtjPGEubGVuZ3RoOysrYyl7dmFyIGQ9YS5jaGFyQ29kZUF0KGMpOzEyNz49ZD9iKys6MjA0Nz49ZD9iKz0yOjU1Mjk2PD1kJiY1NzM0Mz49ZD8oYis9NCwrK2MpOmIrPTM7fXJldHVybiBifSxrYj0oYSxiLGMsZCk9Pnt1KFwic3RyaW5nXCI9PT10eXBlb2YgYSxgc3RyaW5nVG9VVEY4QXJyYXkgZXhwZWN0cyBhIHN0cmluZyAoZ290ICR7dHlwZW9mIGF9KWApO2lmKCEoMDxkKSlyZXR1cm4gMDt2YXIgZj1jO2Q9YytkLTE7Zm9yKHZhciBoPTA7aDxhLmxlbmd0aDsrK2gpe3ZhciBtPWEuY2hhckNvZGVBdChoKTtpZig1NTI5Njw9bSYmNTczNDM+PW0pe3ZhciBwPWEuY2hhckNvZGVBdCgrK2gpO209NjU1MzYrKChtJjEwMjMpPDwxMCl8cCYxMDIzO31pZigxMjc+PW0pe2lmKGM+PWQpYnJlYWs7YltjKytdPW07fWVsc2Uge2lmKDIwNDc+PW0pe2lmKGMrMT49ZClicmVhaztiW2MrK109MTkyfG0+PjY7fWVsc2Uge2lmKDY1NTM1Pj1tKXtpZihjKzI+PWQpYnJlYWs7XG4gICAgYltjKytdPTIyNHxtPj4xMjt9ZWxzZSB7aWYoYyszPj1kKWJyZWFrOzExMTQxMTE8bSYmV2EoXCJJbnZhbGlkIFVuaWNvZGUgY29kZSBwb2ludCBcIitCYShtKStcIiBlbmNvdW50ZXJlZCB3aGVuIHNlcmlhbGl6aW5nIGEgSlMgc3RyaW5nIHRvIGEgVVRGLTggc3RyaW5nIGluIHdhc20gbWVtb3J5ISAoVmFsaWQgdW5pY29kZSBjb2RlIHBvaW50cyBzaG91bGQgYmUgaW4gcmFuZ2UgMC0weDEwRkZGRikuXCIpO2JbYysrXT0yNDB8bT4+MTg7YltjKytdPTEyOHxtPj4xMiY2Mzt9YltjKytdPTEyOHxtPj42JjYzO31iW2MrK109MTI4fG0mNjM7fX1iW2NdPTA7cmV0dXJuIGMtZn07ZnVuY3Rpb24gbGIoYSxiKXt2YXIgYz1BcnJheShqYihhKSsxKTthPWtiKGEsYywwLGMubGVuZ3RoKTtiJiYoYy5sZW5ndGg9YSk7cmV0dXJuIGN9dmFyIG1iPVtdO2Z1bmN0aW9uIG5iKGEsYil7bWJbYV09e2lucHV0OltdLG91dHB1dDpbXSxLOmJ9O29iKGEscGIpO31cbiAgICB2YXIgcGI9e29wZW4oYSl7dmFyIGI9bWJbYS5ub2RlLnJkZXZdO2lmKCFiKXRocm93IG5ldyBSLmcoNDMpO2EudHR5PWI7YS5zZWVrYWJsZT0hMTt9LGNsb3NlKGEpe2EudHR5LksuZnN5bmMoYS50dHkpO30sZnN5bmMoYSl7YS50dHkuSy5mc3luYyhhLnR0eSk7fSxyZWFkKGEsYixjLGQpe2lmKCFhLnR0eXx8IWEudHR5LksucmEpdGhyb3cgbmV3IFIuZyg2MCk7Zm9yKHZhciBmPTAsaD0wO2g8ZDtoKyspe3RyeXt2YXIgbT1hLnR0eS5LLnJhKGEudHR5KTt9Y2F0Y2gocCl7dGhyb3cgbmV3IFIuZygyOSk7fWlmKHZvaWQgMD09PW0mJjA9PT1mKXRocm93IG5ldyBSLmcoNik7aWYobnVsbD09PW18fHZvaWQgMD09PW0pYnJlYWs7ZisrO2JbYytoXT1tO31mJiYoYS5ub2RlLnRpbWVzdGFtcD1EYXRlLm5vdygpKTtyZXR1cm4gZn0sd3JpdGUoYSxiLGMsZCl7aWYoIWEudHR5fHwhYS50dHkuSy5pYSl0aHJvdyBuZXcgUi5nKDYwKTt0cnl7Zm9yKHZhciBmPTA7ZjxkO2YrKylhLnR0eS5LLmlhKGEudHR5LFxuICAgIGJbYytmXSk7fWNhdGNoKGgpe3Rocm93IG5ldyBSLmcoMjkpO31kJiYoYS5ub2RlLnRpbWVzdGFtcD1EYXRlLm5vdygpKTtyZXR1cm4gZn19LHFiPXtyYSgpe2E6e2lmKCFpYi5sZW5ndGgpe3ZhciBhPW51bGw7aWYobil7dmFyIGI9QnVmZmVyLmFsbG9jKDI1NiksYz0wLGQ9cHJvY2Vzcy5zdGRpbi5mZDt0cnl7Yz1mcy5yZWFkU3luYyhkLGIpO31jYXRjaChmKXtpZihmLnRvU3RyaW5nKCkuaW5jbHVkZXMoXCJFT0ZcIikpYz0wO2Vsc2UgdGhyb3cgZjt9MDxjP2E9Yi5zbGljZSgwLGMpLnRvU3RyaW5nKFwidXRmLThcIik6YT1udWxsO31lbHNlIFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHdpbmRvdy5wcm9tcHQ/KGE9d2luZG93LnByb21wdChcIklucHV0OiBcIiksbnVsbCE9PWEmJihhKz1cIlxcblwiKSk6XCJmdW5jdGlvblwiPT10eXBlb2YgcmVhZGxpbmUmJihhPXJlYWRsaW5lKCksbnVsbCE9PWEmJihhKz1cIlxcblwiKSk7aWYoIWEpe2E9bnVsbDticmVhayBhfWliPWxiKGEsXG4gICAgITApO31hPWliLnNoaWZ0KCk7fXJldHVybiBhfSxpYShhLGIpe251bGw9PT1ifHwxMD09PWI/KHFhKGhiKGEub3V0cHV0LDApKSxhLm91dHB1dD1bXSk6MCE9YiYmYS5vdXRwdXQucHVzaChiKTt9LGZzeW5jKGEpe2Eub3V0cHV0JiYwPGEub3V0cHV0Lmxlbmd0aCYmKHFhKGhiKGEub3V0cHV0LDApKSxhLm91dHB1dD1bXSk7fSxJYSgpe3JldHVybiB7YWI6MjU4NTYsY2I6NSwkYToxOTEsYmI6MzUzODcsWmE6WzMsMjgsMTI3LDIxLDQsMCwxLDAsMTcsMTksMjYsMCwxOCwxNSwyMywyMiwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXX19LEphKCl7cmV0dXJuIDB9LEthKCl7cmV0dXJuIFsyNCw4MF19fSxyYj17aWEoYSxiKXtudWxsPT09Ynx8MTA9PT1iPyh6KGhiKGEub3V0cHV0LDApKSxhLm91dHB1dD1bXSk6MCE9YiYmYS5vdXRwdXQucHVzaChiKTt9LGZzeW5jKGEpe2Eub3V0cHV0JiYwPGEub3V0cHV0Lmxlbmd0aCYmKHooaGIoYS5vdXRwdXQsMCkpLGEub3V0cHV0PVtdKTt9fSxzYj1cbiAgICAoKT0+e2coXCJpbnRlcm5hbCBlcnJvcjogbW1hcEFsbG9jIGNhbGxlZCBidXQgYGVtc2NyaXB0ZW5fYnVpbHRpbl9tZW1hbGlnbmAgbmF0aXZlIHN5bWJvbCBub3QgZXhwb3J0ZWRcIik7fTtmdW5jdGlvbiB0YihhLGIpe3ZhciBjPWEubT9hLm0ubGVuZ3RoOjA7Yz49Ynx8KGI9TWF0aC5tYXgoYixjKigxMDQ4NTc2PmM/MjoxLjEyNSk+Pj4wKSwwIT1jJiYoYj1NYXRoLm1heChiLDI1NikpLGM9YS5tLGEubT1uZXcgVWludDhBcnJheShiKSwwPGEubyYmYS5tLnNldChjLnN1YmFycmF5KDAsYS5vKSwwKSk7fVxuICAgIHZhciBTPXtHOm51bGwscygpe3JldHVybiBTLmNyZWF0ZU5vZGUobnVsbCxcIi9cIiwxNjg5NSwwKX0sY3JlYXRlTm9kZShhLGIsYyxkKXtpZigyNDU3Nj09PShjJjYxNDQwKXx8Ui5pc0ZJRk8oYykpdGhyb3cgbmV3IFIuZyg2Myk7Uy5HfHwoUy5HPXtkaXI6e25vZGU6e0M6Uy5oLkMsdjpTLmgudixsb29rdXA6Uy5oLmxvb2t1cCxKOlMuaC5KLHJlbmFtZTpTLmgucmVuYW1lLHVubGluazpTLmgudW5saW5rLHJtZGlyOlMuaC5ybWRpcixyZWFkZGlyOlMuaC5yZWFkZGlyLHN5bWxpbms6Uy5oLnN5bWxpbmt9LHN0cmVhbTp7RDpTLmwuRH19LGZpbGU6e25vZGU6e0M6Uy5oLkMsdjpTLmgudn0sc3RyZWFtOntEOlMubC5ELHJlYWQ6Uy5sLnJlYWQsd3JpdGU6Uy5sLndyaXRlLFQ6Uy5sLlQsUzpTLmwuUyxWOlMubC5WfX0sbGluazp7bm9kZTp7QzpTLmguQyx2OlMuaC52LHJlYWRsaW5rOlMuaC5yZWFkbGlua30sc3RyZWFtOnt9fSxuYTp7bm9kZTp7QzpTLmguQyx2OlMuaC52fSxzdHJlYW06Ui5EYX19KTtcbiAgICBjPVIuY3JlYXRlTm9kZShhLGIsYyxkKTtUKGMubW9kZSk/KGMuaD1TLkcuZGlyLm5vZGUsYy5sPVMuRy5kaXIuc3RyZWFtLGMubT17fSk6Ui5pc0ZpbGUoYy5tb2RlKT8oYy5oPVMuRy5maWxlLm5vZGUsYy5sPVMuRy5maWxlLnN0cmVhbSxjLm89MCxjLm09bnVsbCk6NDA5NjA9PT0oYy5tb2RlJjYxNDQwKT8oYy5oPVMuRy5saW5rLm5vZGUsYy5sPVMuRy5saW5rLnN0cmVhbSk6ODE5Mj09PShjLm1vZGUmNjE0NDApJiYoYy5oPVMuRy5uYS5ub2RlLGMubD1TLkcubmEuc3RyZWFtKTtjLnRpbWVzdGFtcD1EYXRlLm5vdygpO2EmJihhLm1bYl09YyxhLnRpbWVzdGFtcD1jLnRpbWVzdGFtcCk7cmV0dXJuIGN9LGxiKGEpe3JldHVybiBhLm0/YS5tLnN1YmFycmF5P2EubS5zdWJhcnJheSgwLGEubyk6bmV3IFVpbnQ4QXJyYXkoYS5tKTpuZXcgVWludDhBcnJheSgwKX0saDp7QyhhKXt2YXIgYj17fTtiLmRldj04MTkyPT09KGEubW9kZSY2MTQ0MCk/YS5pZDoxO2IuaW5vPWEuaWQ7Yi5tb2RlPVxuICAgIGEubW9kZTtiLm5saW5rPTE7Yi51aWQ9MDtiLmdpZD0wO2IucmRldj1hLnJkZXY7VChhLm1vZGUpP2Iuc2l6ZT00MDk2OlIuaXNGaWxlKGEubW9kZSk/Yi5zaXplPWEubzo0MDk2MD09PShhLm1vZGUmNjE0NDApP2Iuc2l6ZT1hLmxpbmsubGVuZ3RoOmIuc2l6ZT0wO2IuYXRpbWU9bmV3IERhdGUoYS50aW1lc3RhbXApO2IubXRpbWU9bmV3IERhdGUoYS50aW1lc3RhbXApO2IuY3RpbWU9bmV3IERhdGUoYS50aW1lc3RhbXApO2IuQmE9NDA5NjtiLmJsb2Nrcz1NYXRoLmNlaWwoYi5zaXplL2IuQmEpO3JldHVybiBifSx2KGEsYil7dm9pZCAwIT09Yi5tb2RlJiYoYS5tb2RlPWIubW9kZSk7dm9pZCAwIT09Yi50aW1lc3RhbXAmJihhLnRpbWVzdGFtcD1iLnRpbWVzdGFtcCk7aWYodm9pZCAwIT09Yi5zaXplJiYoYj1iLnNpemUsYS5vIT1iKSlpZigwPT1iKWEubT1udWxsLGEubz0wO2Vsc2Uge3ZhciBjPWEubTthLm09bmV3IFVpbnQ4QXJyYXkoYik7YyYmYS5tLnNldChjLnN1YmFycmF5KDAsXG4gICAgTWF0aC5taW4oYixhLm8pKSk7YS5vPWI7fX0sbG9va3VwKCl7dGhyb3cgUi5kYVs0NF07fSxKKGEsYixjLGQpe3JldHVybiBTLmNyZWF0ZU5vZGUoYSxiLGMsZCl9LHJlbmFtZShhLGIsYyl7aWYoVChhLm1vZGUpKXt0cnl7dmFyIGQ9VShiLGMpO31jYXRjaChoKXt9aWYoZClmb3IodmFyIGYgaW4gZC5tKXRocm93IG5ldyBSLmcoNTUpO31kZWxldGUgYS5wYXJlbnQubVthLm5hbWVdO2EucGFyZW50LnRpbWVzdGFtcD1EYXRlLm5vdygpO2EubmFtZT1jO2IubVtjXT1hO2IudGltZXN0YW1wPWEucGFyZW50LnRpbWVzdGFtcDthLnBhcmVudD1iO30sdW5saW5rKGEsYil7ZGVsZXRlIGEubVtiXTthLnRpbWVzdGFtcD1EYXRlLm5vdygpO30scm1kaXIoYSxiKXt2YXIgYz1VKGEsYiksZDtmb3IoZCBpbiBjLm0pdGhyb3cgbmV3IFIuZyg1NSk7ZGVsZXRlIGEubVtiXTthLnRpbWVzdGFtcD1EYXRlLm5vdygpO30scmVhZGRpcihhKXt2YXIgYj1bXCIuXCIsXCIuLlwiXSxjO2ZvcihjIGluIGEubSlhLm0uaGFzT3duUHJvcGVydHkoYykmJlxuICAgIGIucHVzaChjKTtyZXR1cm4gYn0sc3ltbGluayhhLGIsYyl7YT1TLmNyZWF0ZU5vZGUoYSxiLDQxNDcxLDApO2EubGluaz1jO3JldHVybiBhfSxyZWFkbGluayhhKXtpZig0MDk2MCE9PShhLm1vZGUmNjE0NDApKXRocm93IG5ldyBSLmcoMjgpO3JldHVybiBhLmxpbmt9fSxsOntyZWFkKGEsYixjLGQsZil7dmFyIGg9YS5ub2RlLm07aWYoZj49YS5ub2RlLm8pcmV0dXJuIDA7YT1NYXRoLm1pbihhLm5vZGUuby1mLGQpO3UoMDw9YSk7aWYoODxhJiZoLnN1YmFycmF5KWIuc2V0KGguc3ViYXJyYXkoZixmK2EpLGMpO2Vsc2UgZm9yKGQ9MDtkPGE7ZCsrKWJbYytkXT1oW2YrZF07cmV0dXJuIGF9LHdyaXRlKGEsYixjLGQsZixoKXt1KCEoYiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSk7Yi5idWZmZXI9PT1FLmJ1ZmZlciYmKGg9ITEpO2lmKCFkKXJldHVybiAwO2E9YS5ub2RlO2EudGltZXN0YW1wPURhdGUubm93KCk7aWYoYi5zdWJhcnJheSYmKCFhLm18fGEubS5zdWJhcnJheSkpe2lmKGgpcmV0dXJuIHUoMD09PVxuICAgIGYsXCJjYW5Pd24gbXVzdCBpbXBseSBubyB3ZWlyZCBwb3NpdGlvbiBpbnNpZGUgdGhlIGZpbGVcIiksYS5tPWIuc3ViYXJyYXkoYyxjK2QpLGEubz1kO2lmKDA9PT1hLm8mJjA9PT1mKXJldHVybiBhLm09Yi5zbGljZShjLGMrZCksYS5vPWQ7aWYoZitkPD1hLm8pcmV0dXJuIGEubS5zZXQoYi5zdWJhcnJheShjLGMrZCksZiksZH10YihhLGYrZCk7aWYoYS5tLnN1YmFycmF5JiZiLnN1YmFycmF5KWEubS5zZXQoYi5zdWJhcnJheShjLGMrZCksZik7ZWxzZSBmb3IoaD0wO2g8ZDtoKyspYS5tW2YraF09YltjK2hdO2Eubz1NYXRoLm1heChhLm8sZitkKTtyZXR1cm4gZH0sRChhLGIsYyl7MT09PWM/Yis9YS5wb3NpdGlvbjoyPT09YyYmUi5pc0ZpbGUoYS5ub2RlLm1vZGUpJiYoYis9YS5ub2RlLm8pO2lmKDA+Yil0aHJvdyBuZXcgUi5nKDI4KTtyZXR1cm4gYn0sVChhLGIsYyl7dGIoYS5ub2RlLGIrYyk7YS5ub2RlLm89TWF0aC5tYXgoYS5ub2RlLm8sYitjKTt9LFMoYSxiLGMsZCxmKXtpZighUi5pc0ZpbGUoYS5ub2RlLm1vZGUpKXRocm93IG5ldyBSLmcoNDMpO1xuICAgIGE9YS5ub2RlLm07aWYoZiYyfHxhLmJ1ZmZlciE9PUUuYnVmZmVyKXtpZigwPGN8fGMrYjxhLmxlbmd0aClhLnN1YmFycmF5P2E9YS5zdWJhcnJheShjLGMrYik6YT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhLGMsYytiKTtjPSEwO2I9c2IoKTtpZighYil0aHJvdyBuZXcgUi5nKDQ4KTtFLnNldChhLGIpO31lbHNlIGM9ITEsYj1hLmJ5dGVPZmZzZXQ7cmV0dXJuIHtSYTpiLEFhOmN9fSxWKGEsYixjLGQpe1MubC53cml0ZShhLGIsMCxkLGMsITEpO3JldHVybiAwfX19LHViPShhLGIsYyk9Pnt2YXIgZD1MYShgYWwgJHthfWApO2phKGEsZj0+e3UoZixgTG9hZGluZyBkYXRhIGZpbGUgXCIke2F9XCIgZmFpbGVkIChubyBhcnJheUJ1ZmZlcikuYCk7YihuZXcgVWludDhBcnJheShmKSk7ZCYmTmEoZCk7fSwoKT0+e2lmKGMpYygpO2Vsc2UgdGhyb3cgYExvYWRpbmcgZGF0YSBmaWxlIFwiJHthfVwiIGZhaWxlZC5gO30pO2QmJk1hKGQpO30sdmI9W10sd2I9KGEsYixjLGQpPT57XCJ1bmRlZmluZWRcIiE9XG4gICAgdHlwZW9mIEJyb3dzZXImJkJyb3dzZXIuUigpO3ZhciBmPSExO3ZiLmZvckVhY2goaD0+eyFmJiZoLmNhbkhhbmRsZShiKSYmKGguaGFuZGxlKGEsYixjLGQpLGY9ITApO30pO3JldHVybiBmfSx4Yj0oYSxiKT0+e3ZhciBjPTA7YSYmKGN8PTM2NSk7YiYmKGN8PTE0Nik7cmV0dXJuIGN9LHliPXswOlwiU3VjY2Vzc1wiLDE6XCJBcmcgbGlzdCB0b28gbG9uZ1wiLDI6XCJQZXJtaXNzaW9uIGRlbmllZFwiLDM6XCJBZGRyZXNzIGFscmVhZHkgaW4gdXNlXCIsNDpcIkFkZHJlc3Mgbm90IGF2YWlsYWJsZVwiLDU6XCJBZGRyZXNzIGZhbWlseSBub3Qgc3VwcG9ydGVkIGJ5IHByb3RvY29sIGZhbWlseVwiLDY6XCJObyBtb3JlIHByb2Nlc3Nlc1wiLDc6XCJTb2NrZXQgYWxyZWFkeSBjb25uZWN0ZWRcIiw4OlwiQmFkIGZpbGUgbnVtYmVyXCIsOTpcIlRyeWluZyB0byByZWFkIHVucmVhZGFibGUgbWVzc2FnZVwiLDEwOlwiTW91bnQgZGV2aWNlIGJ1c3lcIiwxMTpcIk9wZXJhdGlvbiBjYW5jZWxlZFwiLDEyOlwiTm8gY2hpbGRyZW5cIiwxMzpcIkNvbm5lY3Rpb24gYWJvcnRlZFwiLFxuICAgIDE0OlwiQ29ubmVjdGlvbiByZWZ1c2VkXCIsMTU6XCJDb25uZWN0aW9uIHJlc2V0IGJ5IHBlZXJcIiwxNjpcIkZpbGUgbG9ja2luZyBkZWFkbG9jayBlcnJvclwiLDE3OlwiRGVzdGluYXRpb24gYWRkcmVzcyByZXF1aXJlZFwiLDE4OlwiTWF0aCBhcmcgb3V0IG9mIGRvbWFpbiBvZiBmdW5jXCIsMTk6XCJRdW90YSBleGNlZWRlZFwiLDIwOlwiRmlsZSBleGlzdHNcIiwyMTpcIkJhZCBhZGRyZXNzXCIsMjI6XCJGaWxlIHRvbyBsYXJnZVwiLDIzOlwiSG9zdCBpcyB1bnJlYWNoYWJsZVwiLDI0OlwiSWRlbnRpZmllciByZW1vdmVkXCIsMjU6XCJJbGxlZ2FsIGJ5dGUgc2VxdWVuY2VcIiwyNjpcIkNvbm5lY3Rpb24gYWxyZWFkeSBpbiBwcm9ncmVzc1wiLDI3OlwiSW50ZXJydXB0ZWQgc3lzdGVtIGNhbGxcIiwyODpcIkludmFsaWQgYXJndW1lbnRcIiwyOTpcIkkvTyBlcnJvclwiLDMwOlwiU29ja2V0IGlzIGFscmVhZHkgY29ubmVjdGVkXCIsMzE6XCJJcyBhIGRpcmVjdG9yeVwiLDMyOlwiVG9vIG1hbnkgc3ltYm9saWMgbGlua3NcIiwzMzpcIlRvbyBtYW55IG9wZW4gZmlsZXNcIixcbiAgICAzNDpcIlRvbyBtYW55IGxpbmtzXCIsMzU6XCJNZXNzYWdlIHRvbyBsb25nXCIsMzY6XCJNdWx0aWhvcCBhdHRlbXB0ZWRcIiwzNzpcIkZpbGUgb3IgcGF0aCBuYW1lIHRvbyBsb25nXCIsMzg6XCJOZXR3b3JrIGludGVyZmFjZSBpcyBub3QgY29uZmlndXJlZFwiLDM5OlwiQ29ubmVjdGlvbiByZXNldCBieSBuZXR3b3JrXCIsNDA6XCJOZXR3b3JrIGlzIHVucmVhY2hhYmxlXCIsNDE6XCJUb28gbWFueSBvcGVuIGZpbGVzIGluIHN5c3RlbVwiLDQyOlwiTm8gYnVmZmVyIHNwYWNlIGF2YWlsYWJsZVwiLDQzOlwiTm8gc3VjaCBkZXZpY2VcIiw0NDpcIk5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnlcIiw0NTpcIkV4ZWMgZm9ybWF0IGVycm9yXCIsNDY6XCJObyByZWNvcmQgbG9ja3MgYXZhaWxhYmxlXCIsNDc6XCJUaGUgbGluayBoYXMgYmVlbiBzZXZlcmVkXCIsNDg6XCJOb3QgZW5vdWdoIGNvcmVcIiw0OTpcIk5vIG1lc3NhZ2Ugb2YgZGVzaXJlZCB0eXBlXCIsNTA6XCJQcm90b2NvbCBub3QgYXZhaWxhYmxlXCIsNTE6XCJObyBzcGFjZSBsZWZ0IG9uIGRldmljZVwiLFxuICAgIDUyOlwiRnVuY3Rpb24gbm90IGltcGxlbWVudGVkXCIsNTM6XCJTb2NrZXQgaXMgbm90IGNvbm5lY3RlZFwiLDU0OlwiTm90IGEgZGlyZWN0b3J5XCIsNTU6XCJEaXJlY3Rvcnkgbm90IGVtcHR5XCIsNTY6XCJTdGF0ZSBub3QgcmVjb3ZlcmFibGVcIiw1NzpcIlNvY2tldCBvcGVyYXRpb24gb24gbm9uLXNvY2tldFwiLDU5OlwiTm90IGEgdHlwZXdyaXRlclwiLDYwOlwiTm8gc3VjaCBkZXZpY2Ugb3IgYWRkcmVzc1wiLDYxOlwiVmFsdWUgdG9vIGxhcmdlIGZvciBkZWZpbmVkIGRhdGEgdHlwZVwiLDYyOlwiUHJldmlvdXMgb3duZXIgZGllZFwiLDYzOlwiTm90IHN1cGVyLXVzZXJcIiw2NDpcIkJyb2tlbiBwaXBlXCIsNjU6XCJQcm90b2NvbCBlcnJvclwiLDY2OlwiVW5rbm93biBwcm90b2NvbFwiLDY3OlwiUHJvdG9jb2wgd3JvbmcgdHlwZSBmb3Igc29ja2V0XCIsNjg6XCJNYXRoIHJlc3VsdCBub3QgcmVwcmVzZW50YWJsZVwiLDY5OlwiUmVhZCBvbmx5IGZpbGUgc3lzdGVtXCIsNzA6XCJJbGxlZ2FsIHNlZWtcIiw3MTpcIk5vIHN1Y2ggcHJvY2Vzc1wiLFxuICAgIDcyOlwiU3RhbGUgZmlsZSBoYW5kbGVcIiw3MzpcIkNvbm5lY3Rpb24gdGltZWQgb3V0XCIsNzQ6XCJUZXh0IGZpbGUgYnVzeVwiLDc1OlwiQ3Jvc3MtZGV2aWNlIGxpbmtcIiwxMDA6XCJEZXZpY2Ugbm90IGEgc3RyZWFtXCIsMTAxOlwiQmFkIGZvbnQgZmlsZSBmbXRcIiwxMDI6XCJJbnZhbGlkIHNsb3RcIiwxMDM6XCJJbnZhbGlkIHJlcXVlc3QgY29kZVwiLDEwNDpcIk5vIGFub2RlXCIsMTA1OlwiQmxvY2sgZGV2aWNlIHJlcXVpcmVkXCIsMTA2OlwiQ2hhbm5lbCBudW1iZXIgb3V0IG9mIHJhbmdlXCIsMTA3OlwiTGV2ZWwgMyBoYWx0ZWRcIiwxMDg6XCJMZXZlbCAzIHJlc2V0XCIsMTA5OlwiTGluayBudW1iZXIgb3V0IG9mIHJhbmdlXCIsMTEwOlwiUHJvdG9jb2wgZHJpdmVyIG5vdCBhdHRhY2hlZFwiLDExMTpcIk5vIENTSSBzdHJ1Y3R1cmUgYXZhaWxhYmxlXCIsMTEyOlwiTGV2ZWwgMiBoYWx0ZWRcIiwxMTM6XCJJbnZhbGlkIGV4Y2hhbmdlXCIsMTE0OlwiSW52YWxpZCByZXF1ZXN0IGRlc2NyaXB0b3JcIiwxMTU6XCJFeGNoYW5nZSBmdWxsXCIsXG4gICAgMTE2OlwiTm8gZGF0YSAoZm9yIG5vIGRlbGF5IGlvKVwiLDExNzpcIlRpbWVyIGV4cGlyZWRcIiwxMTg6XCJPdXQgb2Ygc3RyZWFtcyByZXNvdXJjZXNcIiwxMTk6XCJNYWNoaW5lIGlzIG5vdCBvbiB0aGUgbmV0d29ya1wiLDEyMDpcIlBhY2thZ2Ugbm90IGluc3RhbGxlZFwiLDEyMTpcIlRoZSBvYmplY3QgaXMgcmVtb3RlXCIsMTIyOlwiQWR2ZXJ0aXNlIGVycm9yXCIsMTIzOlwiU3Jtb3VudCBlcnJvclwiLDEyNDpcIkNvbW11bmljYXRpb24gZXJyb3Igb24gc2VuZFwiLDEyNTpcIkNyb3NzIG1vdW50IHBvaW50IChub3QgcmVhbGx5IGVycm9yKVwiLDEyNjpcIkdpdmVuIGxvZy4gbmFtZSBub3QgdW5pcXVlXCIsMTI3OlwiZi5kLiBpbnZhbGlkIGZvciB0aGlzIG9wZXJhdGlvblwiLDEyODpcIlJlbW90ZSBhZGRyZXNzIGNoYW5nZWRcIiwxMjk6XCJDYW4gICBhY2Nlc3MgYSBuZWVkZWQgc2hhcmVkIGxpYlwiLDEzMDpcIkFjY2Vzc2luZyBhIGNvcnJ1cHRlZCBzaGFyZWQgbGliXCIsMTMxOlwiLmxpYiBzZWN0aW9uIGluIGEub3V0IGNvcnJ1cHRlZFwiLFxuICAgIDEzMjpcIkF0dGVtcHRpbmcgdG8gbGluayBpbiB0b28gbWFueSBsaWJzXCIsMTMzOlwiQXR0ZW1wdGluZyB0byBleGVjIGEgc2hhcmVkIGxpYnJhcnlcIiwxMzU6XCJTdHJlYW1zIHBpcGUgZXJyb3JcIiwxMzY6XCJUb28gbWFueSB1c2Vyc1wiLDEzNzpcIlNvY2tldCB0eXBlIG5vdCBzdXBwb3J0ZWRcIiwxMzg6XCJOb3Qgc3VwcG9ydGVkXCIsMTM5OlwiUHJvdG9jb2wgZmFtaWx5IG5vdCBzdXBwb3J0ZWRcIiwxNDA6XCJDYW4ndCBzZW5kIGFmdGVyIHNvY2tldCBzaHV0ZG93blwiLDE0MTpcIlRvbyBtYW55IHJlZmVyZW5jZXNcIiwxNDI6XCJIb3N0IGlzIGRvd25cIiwxNDg6XCJObyBtZWRpdW0gKGluIHRhcGUgZHJpdmUpXCIsMTU2OlwiTGV2ZWwgMiBub3Qgc3luY2hyb25pemVkXCJ9LHpiPXtFUEVSTTo2MyxFTk9FTlQ6NDQsRVNSQ0g6NzEsRUlOVFI6MjcsRUlPOjI5LEVOWElPOjYwLEUyQklHOjEsRU5PRVhFQzo0NSxFQkFERjo4LEVDSElMRDoxMixFQUdBSU46NixFV09VTERCTE9DSzo2LEVOT01FTTo0OCxFQUNDRVM6MixcbiAgICBFRkFVTFQ6MjEsRU5PVEJMSzoxMDUsRUJVU1k6MTAsRUVYSVNUOjIwLEVYREVWOjc1LEVOT0RFVjo0MyxFTk9URElSOjU0LEVJU0RJUjozMSxFSU5WQUw6MjgsRU5GSUxFOjQxLEVNRklMRTozMyxFTk9UVFk6NTksRVRYVEJTWTo3NCxFRkJJRzoyMixFTk9TUEM6NTEsRVNQSVBFOjcwLEVST0ZTOjY5LEVNTElOSzozNCxFUElQRTo2NCxFRE9NOjE4LEVSQU5HRTo2OCxFTk9NU0c6NDksRUlEUk06MjQsRUNIUk5HOjEwNixFTDJOU1lOQzoxNTYsRUwzSExUOjEwNyxFTDNSU1Q6MTA4LEVMTlJORzoxMDksRVVOQVRDSDoxMTAsRU5PQ1NJOjExMSxFTDJITFQ6MTEyLEVERUFETEs6MTYsRU5PTENLOjQ2LEVCQURFOjExMyxFQkFEUjoxMTQsRVhGVUxMOjExNSxFTk9BTk86MTA0LEVCQURSUUM6MTAzLEVCQURTTFQ6MTAyLEVERUFETE9DSzoxNixFQkZPTlQ6MTAxLEVOT1NUUjoxMDAsRU5PREFUQToxMTYsRVRJTUU6MTE3LEVOT1NSOjExOCxFTk9ORVQ6MTE5LEVOT1BLRzoxMjAsRVJFTU9URToxMjEsXG4gICAgRU5PTElOSzo0NyxFQURWOjEyMixFU1JNTlQ6MTIzLEVDT01NOjEyNCxFUFJPVE86NjUsRU1VTFRJSE9QOjM2LEVET1RET1Q6MTI1LEVCQURNU0c6OSxFTk9UVU5JUToxMjYsRUJBREZEOjEyNyxFUkVNQ0hHOjEyOCxFTElCQUNDOjEyOSxFTElCQkFEOjEzMCxFTElCU0NOOjEzMSxFTElCTUFYOjEzMixFTElCRVhFQzoxMzMsRU5PU1lTOjUyLEVOT1RFTVBUWTo1NSxFTkFNRVRPT0xPTkc6MzcsRUxPT1A6MzIsRU9QTk9UU1VQUDoxMzgsRVBGTk9TVVBQT1JUOjEzOSxFQ09OTlJFU0VUOjE1LEVOT0JVRlM6NDIsRUFGTk9TVVBQT1JUOjUsRVBST1RPVFlQRTo2NyxFTk9UU09DSzo1NyxFTk9QUk9UT09QVDo1MCxFU0hVVERPV046MTQwLEVDT05OUkVGVVNFRDoxNCxFQUREUklOVVNFOjMsRUNPTk5BQk9SVEVEOjEzLEVORVRVTlJFQUNIOjQwLEVORVRET1dOOjM4LEVUSU1FRE9VVDo3MyxFSE9TVERPV046MTQyLEVIT1NUVU5SRUFDSDoyMyxFSU5QUk9HUkVTUzoyNixFQUxSRUFEWTo3LEVERVNUQUREUlJFUToxNyxcbiAgICBFTVNHU0laRTozNSxFUFJPVE9OT1NVUFBPUlQ6NjYsRVNPQ0tUTk9TVVBQT1JUOjEzNyxFQUREUk5PVEFWQUlMOjQsRU5FVFJFU0VUOjM5LEVJU0NPTk46MzAsRU5PVENPTk46NTMsRVRPT01BTllSRUZTOjE0MSxFVVNFUlM6MTM2LEVEUVVPVDoxOSxFU1RBTEU6NzIsRU5PVFNVUDoxMzgsRU5PTUVESVVNOjE0OCxFSUxTRVE6MjUsRU9WRVJGTE9XOjYxLEVDQU5DRUxFRDoxMSxFTk9UUkVDT1ZFUkFCTEU6NTYsRU9XTkVSREVBRDo2MixFU1RSUElQRToxMzV9LEFiPWE9PmEucmVwbGFjZSgvXFxiX1pbXFx3XFxkX10rL2csZnVuY3Rpb24oYil7V2EoXCJ3YXJuaW5nOiBidWlsZCB3aXRoIC1zREVNQU5HTEVfU1VQUE9SVCB0byBsaW5rIGluIGxpYmN4eGFiaSBkZW1hbmdsaW5nXCIpO3JldHVybiBiPT09Yj9iOmIrXCIgW1wiK2IrXCJdXCJ9KTtmdW5jdGlvbiBvYihhLGIpe1IucGFbYV09e2w6Yn07fWZ1bmN0aW9uIFQoYSl7cmV0dXJuIDE2Mzg0PT09KGEmNjE0NDApfVxuICAgIGZ1bmN0aW9uIFUoYSxiKXt2YXIgYztpZihjPShjPUJiKGEsXCJ4XCIpKT9jOmEuaC5sb29rdXA/MDoyKXRocm93IG5ldyBSLmcoYyxhKTtmb3IoYz1SLkZbQ2IoYS5pZCxiKV07YztjPWMuTil7dmFyIGQ9Yy5uYW1lO2lmKGMucGFyZW50LmlkPT09YS5pZCYmZD09PWIpcmV0dXJuIGN9cmV0dXJuIFIubG9va3VwKGEsYil9XG4gICAgZnVuY3Rpb24gVihhLGI9e30pe2E9ZGIoYSk7aWYoIWEpcmV0dXJuIHtwYXRoOlwiXCIsbm9kZTpudWxsfTtiPU9iamVjdC5hc3NpZ24oe2JhOiEwLGthOjB9LGIpO2lmKDg8Yi5rYSl0aHJvdyBuZXcgUi5nKDMyKTthPWEuc3BsaXQoXCIvXCIpLmZpbHRlcihtPT4hIW0pO2Zvcih2YXIgYz1SLnJvb3QsZD1cIi9cIixmPTA7ZjxhLmxlbmd0aDtmKyspe3ZhciBoPWY9PT1hLmxlbmd0aC0xO2lmKGgmJmIucGFyZW50KWJyZWFrO2M9VShjLGFbZl0pO2Q9UChkK1wiL1wiK2FbZl0pO2MuQSYmKCFofHxoJiZiLmJhKSYmKGM9Yy5BLnJvb3QpO2lmKCFofHxiLkIpZm9yKGg9MDs0MDk2MD09PShjLm1vZGUmNjE0NDApOylpZihjPVIucmVhZGxpbmsoZCksZD1kYigkYShkKSxjKSxjPVYoZCx7a2E6Yi5rYSsxfSkubm9kZSw0MDxoKyspdGhyb3cgbmV3IFIuZygzMik7fXJldHVybiB7cGF0aDpkLG5vZGU6Y319XG4gICAgZnVuY3Rpb24gRGIoYSl7Zm9yKHZhciBiOzspe2lmKFIuWihhKSlyZXR1cm4gYT1hLnMudWEsYj9cIi9cIiE9PWFbYS5sZW5ndGgtMV0/YCR7YX0vJHtifWA6YStiOmE7Yj1iP2Ake2EubmFtZX0vJHtifWA6YS5uYW1lO2E9YS5wYXJlbnQ7fX1mdW5jdGlvbiBDYihhLGIpe2Zvcih2YXIgYz0wLGQ9MDtkPGIubGVuZ3RoO2QrKyljPShjPDw1KS1jK2IuY2hhckNvZGVBdChkKXwwO3JldHVybiAoYStjPj4+MCklUi5GLmxlbmd0aH1mdW5jdGlvbiBFYihhKXt2YXIgYj1DYihhLnBhcmVudC5pZCxhLm5hbWUpO2EuTj1SLkZbYl07Ui5GW2JdPWE7fWZ1bmN0aW9uIEZiKGEpe3ZhciBiPUNiKGEucGFyZW50LmlkLGEubmFtZSk7aWYoUi5GW2JdPT09YSlSLkZbYl09YS5OO2Vsc2UgZm9yKGI9Ui5GW2JdO2I7KXtpZihiLk49PT1hKXtiLk49YS5OO2JyZWFrfWI9Yi5OO319ZnVuY3Rpb24gR2IoYSl7dmFyIGI9W1wiclwiLFwid1wiLFwicndcIl1bYSYzXTthJjUxMiYmKGIrPVwid1wiKTtyZXR1cm4gYn1cbiAgICBmdW5jdGlvbiBCYihhLGIpe2lmKFIudGEpcmV0dXJuIDA7aWYoIWIuaW5jbHVkZXMoXCJyXCIpfHxhLm1vZGUmMjkyKXtpZihiLmluY2x1ZGVzKFwid1wiKSYmIShhLm1vZGUmMTQ2KXx8Yi5pbmNsdWRlcyhcInhcIikmJiEoYS5tb2RlJjczKSlyZXR1cm4gMn1lbHNlIHJldHVybiAyO3JldHVybiAwfWZ1bmN0aW9uIEhiKGEsYil7dHJ5e3JldHVybiBVKGEsYiksMjB9Y2F0Y2goYyl7fXJldHVybiBCYihhLFwid3hcIil9ZnVuY3Rpb24gSWIoYSxiLGMpe3RyeXt2YXIgZD1VKGEsYik7fWNhdGNoKGYpe3JldHVybiBmLnV9aWYoYT1CYihhLFwid3hcIikpcmV0dXJuIGE7aWYoYyl7aWYoIVQoZC5tb2RlKSlyZXR1cm4gNTQ7aWYoUi5aKGQpfHxEYihkKT09PVIuY3dkKCkpcmV0dXJuIDEwfWVsc2UgaWYoVChkLm1vZGUpKXJldHVybiAzMTtyZXR1cm4gMH1mdW5jdGlvbiBKYigpe2Zvcih2YXIgYT0wO2E8PVIueGE7YSsrKWlmKCFSLnN0cmVhbXNbYV0pcmV0dXJuIGE7dGhyb3cgbmV3IFIuZygzMyk7fVxuICAgIGZ1bmN0aW9uIFcoYSl7YT1SLnFhKGEpO2lmKCFhKXRocm93IG5ldyBSLmcoOCk7cmV0dXJuIGF9ZnVuY3Rpb24gS2IoYSxiPS0xKXtSLlh8fChSLlg9ZnVuY3Rpb24oKXt0aGlzLkk9e307fSxSLlgucHJvdG90eXBlPXt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFIuWC5wcm90b3R5cGUse29iamVjdDp7Z2V0KCl7cmV0dXJuIHRoaXMubm9kZX0sc2V0KGMpe3RoaXMubm9kZT1jO319LGZsYWdzOntnZXQoKXtyZXR1cm4gdGhpcy5JLmZsYWdzfSxzZXQoYyl7dGhpcy5JLmZsYWdzPWM7fX0scG9zaXRpb246e2dldCgpe3JldHVybiB0aGlzLkkucG9zaXRpb259LHNldChjKXt0aGlzLkkucG9zaXRpb249Yzt9fX0pKTthPU9iamVjdC5hc3NpZ24obmV3IFIuWCxhKTstMT09YiYmKGI9SmIoKSk7YS5mZD1iO3JldHVybiBSLnN0cmVhbXNbYl09YX1cbiAgICBmdW5jdGlvbiBMYihhKXt2YXIgYj1bXTtmb3IoYT1bYV07YS5sZW5ndGg7KXt2YXIgYz1hLnBvcCgpO2IucHVzaChjKTthLnB1c2guYXBwbHkoYSxjLlUpO31yZXR1cm4gYn1mdW5jdGlvbiBNYihhLGIsYyl7XCJ1bmRlZmluZWRcIj09dHlwZW9mIGMmJihjPWIsYj00MzgpO3JldHVybiBSLkooYSxifDgxOTIsYyl9XG4gICAgZnVuY3Rpb24gTmIoKXtSLmd8fChSLmc9ZnVuY3Rpb24oYSxiKXt0aGlzLm5hbWU9XCJFcnJub0Vycm9yXCI7dGhpcy5ub2RlPWI7dGhpcy5TYT1mdW5jdGlvbihjKXt0aGlzLnU9Yztmb3IodmFyIGQgaW4gemIpaWYoemJbZF09PT1jKXt0aGlzLmNvZGU9ZDticmVha319O3RoaXMuU2EoYSk7dGhpcy5tZXNzYWdlPXliW2FdO3RoaXMuc3RhY2smJihPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInN0YWNrXCIse3ZhbHVlOkVycm9yKCkuc3RhY2ssd3JpdGFibGU6ITB9KSx0aGlzLnN0YWNrPUFiKHRoaXMuc3RhY2spKTt9LFIuZy5wcm90b3R5cGU9RXJyb3IoKSxSLmcucHJvdG90eXBlLmNvbnN0cnVjdG9yPVIuZyxbNDRdLmZvckVhY2goYT0+e1IuZGFbYV09bmV3IFIuZyhhKTtSLmRhW2FdLnN0YWNrPVwiPGdlbmVyaWMgZXJyb3IsIG5vIHN0YWNrPlwiO30pKTt9XG4gICAgZnVuY3Rpb24gT2IoYSxiKXt0cnl7dmFyIGM9VihhLHtCOiFifSk7YT1jLnBhdGg7fWNhdGNoKGYpe312YXIgZD17WjohMSxleGlzdHM6ITEsZXJyb3I6MCxuYW1lOm51bGwscGF0aDpudWxsLG9iamVjdDpudWxsLE9hOiExLFFhOm51bGwsUGE6bnVsbH07dHJ5e2M9VihhLHtwYXJlbnQ6ITB9KSxkLk9hPSEwLGQuUWE9Yy5wYXRoLGQuUGE9Yy5ub2RlLGQubmFtZT1RKGEpLGM9VihhLHtCOiFifSksZC5leGlzdHM9ITAsZC5wYXRoPWMucGF0aCxkLm9iamVjdD1jLm5vZGUsZC5uYW1lPWMubm9kZS5uYW1lLGQuWj1cIi9cIj09PWMucGF0aDt9Y2F0Y2goZil7ZC5lcnJvcj1mLnU7fXJldHVybiBkfWZ1bmN0aW9uIFBiKGEsYixjLGQpe2E9XCJzdHJpbmdcIj09dHlwZW9mIGE/YTpEYihhKTtiPVAoYStcIi9cIitiKTtyZXR1cm4gUi5jcmVhdGUoYix4YihjLGQpKX1cbiAgICBmdW5jdGlvbiBRYihhKXtpZighKGEuTGF8fGEuTWF8fGEubGlua3x8YS5tKSl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFhNTEh0dHBSZXF1ZXN0KXRocm93IEVycm9yKFwiTGF6eSBsb2FkaW5nIHNob3VsZCBoYXZlIGJlZW4gcGVyZm9ybWVkIChjb250ZW50cyBzZXQpIGluIGNyZWF0ZUxhenlGaWxlLCBidXQgaXQgd2FzIG5vdC4gTGF6eSBsb2FkaW5nIG9ubHkgd29ya3MgaW4gd2ViIHdvcmtlcnMuIFVzZSAtLWVtYmVkLWZpbGUgb3IgLS1wcmVsb2FkLWZpbGUgaW4gZW1jYyBvbiB0aGUgbWFpbiB0aHJlYWQuXCIpO2lmKGlhKXRyeXthLm09bGIoaWEoYS51cmwpLCEwKSxhLm89YS5tLmxlbmd0aDt9Y2F0Y2goYil7dGhyb3cgbmV3IFIuZygyOSk7fWVsc2UgdGhyb3cgRXJyb3IoXCJDYW5ub3QgbG9hZCB3aXRob3V0IHJlYWQoKSBvciBYTUxIdHRwUmVxdWVzdC5cIik7fX1cbiAgICB2YXIgUj17cm9vdDpudWxsLFU6W10scGE6e30sc3RyZWFtczpbXSxOYToxLEY6bnVsbCxvYTpcIi9cIixZOiExLHRhOiEwLGc6bnVsbCxkYTp7fSxGYTpudWxsLFc6MCxjcmVhdGVOb2RlKGEsYixjLGQpe3UoXCJvYmplY3RcIj09dHlwZW9mIGEpO2E9bmV3IFIud2EoYSxiLGMsZCk7RWIoYSk7cmV0dXJuIGF9LFooYSl7cmV0dXJuIGE9PT1hLnBhcmVudH0saXNGaWxlKGEpe3JldHVybiAzMjc2OD09PShhJjYxNDQwKX0saXNGSUZPKGEpe3JldHVybiA0MDk2PT09KGEmNjE0NDApfSxpc1NvY2tldChhKXtyZXR1cm4gNDkxNTI9PT0oYSY0OTE1Mil9LHhhOjQwOTYscWE6YT0+Ui5zdHJlYW1zW2FdLERhOntvcGVuKGEpe2EubD1SLkdhKGEubm9kZS5yZGV2KS5sO2EubC5vcGVuJiZhLmwub3BlbihhKTt9LEQoKXt0aHJvdyBuZXcgUi5nKDcwKTt9fSxoYTphPT5hPj44LG5iOmE9PmEmMjU1LE06KGEsYik9PmE8PDh8YixHYTphPT5SLnBhW2FdLHZhKGEsYil7ZnVuY3Rpb24gYyhtKXt1KDA8Ui5XKTtcbiAgICBSLlctLTtyZXR1cm4gYihtKX1mdW5jdGlvbiBkKG0pe2lmKG0pe2lmKCFkLkVhKXJldHVybiBkLkVhPSEwLGMobSl9ZWxzZSArK2g+PWYubGVuZ3RoJiZjKG51bGwpO31cImZ1bmN0aW9uXCI9PXR5cGVvZiBhJiYoYj1hLGE9ITEpO1IuVysrOzE8Ui5XJiZ6KGB3YXJuaW5nOiAke1IuV30gRlMuc3luY2ZzIG9wZXJhdGlvbnMgaW4gZmxpZ2h0IGF0IG9uY2UsIHByb2JhYmx5IGp1c3QgZG9pbmcgZXh0cmEgd29ya2ApO3ZhciBmPUxiKFIucm9vdC5zKSxoPTA7Zi5mb3JFYWNoKG09PntpZighbS50eXBlLnZhKXJldHVybiBkKG51bGwpO20udHlwZS52YShtLGEsZCk7fSk7fSxzKGEsYixjKXtpZihcInN0cmluZ1wiPT10eXBlb2YgYSl0aHJvdyBhO3ZhciBkPVwiL1wiPT09YyxmPSFjO2lmKGQmJlIucm9vdCl0aHJvdyBuZXcgUi5nKDEwKTtpZighZCYmIWYpe3ZhciBoPVYoYyx7YmE6ITF9KTtjPWgucGF0aDtoPWgubm9kZTtpZihoLkEpdGhyb3cgbmV3IFIuZygxMCk7aWYoIVQoaC5tb2RlKSl0aHJvdyBuZXcgUi5nKDU0KTtcbiAgICB9Yj17dHlwZTphLHJiOmIsdWE6YyxVOltdfTthPWEucyhiKTthLnM9YjtiLnJvb3Q9YTtkP1Iucm9vdD1hOmgmJihoLkE9YixoLnMmJmgucy5VLnB1c2goYikpO3JldHVybiBhfSx4YihhKXthPVYoYSx7YmE6ITF9KTtpZighYS5ub2RlLkEpdGhyb3cgbmV3IFIuZygyOCk7YT1hLm5vZGU7dmFyIGI9YS5BLGM9TGIoYik7T2JqZWN0LmtleXMoUi5GKS5mb3JFYWNoKGQ9Pntmb3IoZD1SLkZbZF07ZDspe3ZhciBmPWQuTjtjLmluY2x1ZGVzKGQucykmJkZiKGQpO2Q9Zjt9fSk7YS5BPW51bGw7Yj1hLnMuVS5pbmRleE9mKGIpO3UoLTEhPT1iKTthLnMuVS5zcGxpY2UoYiwxKTt9LGxvb2t1cChhLGIpe3JldHVybiBhLmgubG9va3VwKGEsYil9LEooYSxiLGMpe3ZhciBkPVYoYSx7cGFyZW50OiEwfSkubm9kZTthPVEoYSk7aWYoIWF8fFwiLlwiPT09YXx8XCIuLlwiPT09YSl0aHJvdyBuZXcgUi5nKDI4KTt2YXIgZj1IYihkLGEpO2lmKGYpdGhyb3cgbmV3IFIuZyhmKTtpZighZC5oLkopdGhyb3cgbmV3IFIuZyg2Myk7XG4gICAgcmV0dXJuIGQuaC5KKGQsYSxiLGMpfSxjcmVhdGUoYSxiKXtyZXR1cm4gUi5KKGEsKHZvaWQgMCE9PWI/Yjo0MzgpJjQwOTV8MzI3NjgsMCl9LG1rZGlyKGEsYil7cmV0dXJuIFIuSihhLCh2b2lkIDAhPT1iP2I6NTExKSYxMDIzfDE2Mzg0LDApfSxvYihhLGIpe2E9YS5zcGxpdChcIi9cIik7Zm9yKHZhciBjPVwiXCIsZD0wO2Q8YS5sZW5ndGg7KytkKWlmKGFbZF0pe2MrPVwiL1wiK2FbZF07dHJ5e1IubWtkaXIoYyxiKTt9Y2F0Y2goZil7aWYoMjAhPWYudSl0aHJvdyBmO319fSxzeW1saW5rKGEsYil7aWYoIWRiKGEpKXRocm93IG5ldyBSLmcoNDQpO3ZhciBjPVYoYix7cGFyZW50OiEwfSkubm9kZTtpZighYyl0aHJvdyBuZXcgUi5nKDQ0KTtiPVEoYik7dmFyIGQ9SGIoYyxiKTtpZihkKXRocm93IG5ldyBSLmcoZCk7aWYoIWMuaC5zeW1saW5rKXRocm93IG5ldyBSLmcoNjMpO3JldHVybiBjLmguc3ltbGluayhjLGIsYSl9LHJlbmFtZShhLGIpe3ZhciBjPSRhKGEpLGQ9JGEoYiksZj1RKGEpLFxuICAgIGg9UShiKTt2YXIgbT1WKGEse3BhcmVudDohMH0pO3ZhciBwPW0ubm9kZTttPVYoYix7cGFyZW50OiEwfSk7bT1tLm5vZGU7aWYoIXB8fCFtKXRocm93IG5ldyBSLmcoNDQpO2lmKHAucyE9PW0ucyl0aHJvdyBuZXcgUi5nKDc1KTt2YXIgeT1VKHAsZik7YT1lYihhLGQpO2lmKFwiLlwiIT09YS5jaGFyQXQoMCkpdGhyb3cgbmV3IFIuZygyOCk7YT1lYihiLGMpO2lmKFwiLlwiIT09YS5jaGFyQXQoMCkpdGhyb3cgbmV3IFIuZyg1NSk7dHJ5e3ZhciBxPVUobSxoKTt9Y2F0Y2goeCl7fWlmKHkhPT1xKXtiPVQoeS5tb2RlKTtpZihmPUliKHAsZixiKSl0aHJvdyBuZXcgUi5nKGYpO2lmKGY9cT9JYihtLGgsYik6SGIobSxoKSl0aHJvdyBuZXcgUi5nKGYpO2lmKCFwLmgucmVuYW1lKXRocm93IG5ldyBSLmcoNjMpO2lmKHkuQXx8cSYmcS5BKXRocm93IG5ldyBSLmcoMTApO2lmKG0hPT1wJiYoZj1CYihwLFwid1wiKSkpdGhyb3cgbmV3IFIuZyhmKTtGYih5KTt0cnl7cC5oLnJlbmFtZSh5LG0saCk7fWNhdGNoKHgpe3Rocm93IHg7XG4gICAgfWZpbmFsbHl7RWIoeSk7fX19LHJtZGlyKGEpe3ZhciBiPVYoYSx7cGFyZW50OiEwfSkubm9kZTthPVEoYSk7dmFyIGM9VShiLGEpLGQ9SWIoYixhLCEwKTtpZihkKXRocm93IG5ldyBSLmcoZCk7aWYoIWIuaC5ybWRpcil0aHJvdyBuZXcgUi5nKDYzKTtpZihjLkEpdGhyb3cgbmV3IFIuZygxMCk7Yi5oLnJtZGlyKGIsYSk7RmIoYyk7fSxyZWFkZGlyKGEpe2E9VihhLHtCOiEwfSkubm9kZTtpZighYS5oLnJlYWRkaXIpdGhyb3cgbmV3IFIuZyg1NCk7cmV0dXJuIGEuaC5yZWFkZGlyKGEpfSx1bmxpbmsoYSl7dmFyIGI9VihhLHtwYXJlbnQ6ITB9KS5ub2RlO2lmKCFiKXRocm93IG5ldyBSLmcoNDQpO2E9UShhKTt2YXIgYz1VKGIsYSksZD1JYihiLGEsITEpO2lmKGQpdGhyb3cgbmV3IFIuZyhkKTtpZighYi5oLnVubGluayl0aHJvdyBuZXcgUi5nKDYzKTtpZihjLkEpdGhyb3cgbmV3IFIuZygxMCk7Yi5oLnVubGluayhiLGEpO0ZiKGMpO30scmVhZGxpbmsoYSl7YT1WKGEpLm5vZGU7aWYoIWEpdGhyb3cgbmV3IFIuZyg0NCk7XG4gICAgaWYoIWEuaC5yZWFkbGluayl0aHJvdyBuZXcgUi5nKDI4KTtyZXR1cm4gZGIoRGIoYS5wYXJlbnQpLGEuaC5yZWFkbGluayhhKSl9LHN0YXQoYSxiKXthPVYoYSx7QjohYn0pLm5vZGU7aWYoIWEpdGhyb3cgbmV3IFIuZyg0NCk7aWYoIWEuaC5DKXRocm93IG5ldyBSLmcoNjMpO3JldHVybiBhLmguQyhhKX0sbHN0YXQoYSl7cmV0dXJuIFIuc3RhdChhLCEwKX0sY2htb2QoYSxiLGMpe2E9XCJzdHJpbmdcIj09dHlwZW9mIGE/VihhLHtCOiFjfSkubm9kZTphO2lmKCFhLmgudil0aHJvdyBuZXcgUi5nKDYzKTthLmgudihhLHttb2RlOmImNDA5NXxhLm1vZGUmLTQwOTYsdGltZXN0YW1wOkRhdGUubm93KCl9KTt9LGxjaG1vZChhLGIpe1IuY2htb2QoYSxiLCEwKTt9LGZjaG1vZChhLGIpe2E9VyhhKTtSLmNobW9kKGEubm9kZSxiKTt9LGNob3duKGEsYixjLGQpe2E9XCJzdHJpbmdcIj09dHlwZW9mIGE/VihhLHtCOiFkfSkubm9kZTphO2lmKCFhLmgudil0aHJvdyBuZXcgUi5nKDYzKTthLmgudihhLFxuICAgIHt0aW1lc3RhbXA6RGF0ZS5ub3coKX0pO30sbGNob3duKGEsYixjKXtSLmNob3duKGEsYixjLCEwKTt9LGZjaG93bihhLGIsYyl7YT1XKGEpO1IuY2hvd24oYS5ub2RlLGIsYyk7fSx0cnVuY2F0ZShhLGIpe2lmKDA+Yil0aHJvdyBuZXcgUi5nKDI4KTthPVwic3RyaW5nXCI9PXR5cGVvZiBhP1YoYSx7QjohMH0pLm5vZGU6YTtpZighYS5oLnYpdGhyb3cgbmV3IFIuZyg2Myk7aWYoVChhLm1vZGUpKXRocm93IG5ldyBSLmcoMzEpO2lmKCFSLmlzRmlsZShhLm1vZGUpKXRocm93IG5ldyBSLmcoMjgpO3ZhciBjPUJiKGEsXCJ3XCIpO2lmKGMpdGhyb3cgbmV3IFIuZyhjKTthLmgudihhLHtzaXplOmIsdGltZXN0YW1wOkRhdGUubm93KCl9KTt9LGtiKGEsYil7YT1XKGEpO2lmKDA9PT0oYS5mbGFncyYyMDk3MTU1KSl0aHJvdyBuZXcgUi5nKDI4KTtSLnRydW5jYXRlKGEubm9kZSxiKTt9LHliKGEsYixjKXthPVYoYSx7QjohMH0pLm5vZGU7YS5oLnYoYSx7dGltZXN0YW1wOk1hdGgubWF4KGIsYyl9KTt9LG9wZW4oYSxcbiAgICBiLGMpe2lmKFwiXCI9PT1hKXRocm93IG5ldyBSLmcoNDQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBiKXt2YXIgZD17cjowLFwicitcIjoyLHc6NTc3LFwidytcIjo1NzgsYToxMDg5LFwiYStcIjoxMDkwfVtiXTtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgZCl0aHJvdyBFcnJvcihgVW5rbm93biBmaWxlIG9wZW4gbW9kZTogJHtifWApO2I9ZDt9Yz1iJjY0PyhcInVuZGVmaW5lZFwiPT10eXBlb2YgYz80Mzg6YykmNDA5NXwzMjc2ODowO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBhKXZhciBmPWE7ZWxzZSB7YT1QKGEpO3RyeXtmPVYoYSx7QjohKGImMTMxMDcyKX0pLm5vZGU7fWNhdGNoKGgpe319ZD0hMTtpZihiJjY0KWlmKGYpe2lmKGImMTI4KXRocm93IG5ldyBSLmcoMjApO31lbHNlIGY9Ui5KKGEsYywwKSxkPSEwO2lmKCFmKXRocm93IG5ldyBSLmcoNDQpOzgxOTI9PT0oZi5tb2RlJjYxNDQwKSYmKGImPS01MTMpO2lmKGImNjU1MzYmJiFUKGYubW9kZSkpdGhyb3cgbmV3IFIuZyg1NCk7aWYoIWQmJihjPWY/NDA5NjA9PT1cbiAgICAoZi5tb2RlJjYxNDQwKT8zMjpUKGYubW9kZSkmJihcInJcIiE9PUdiKGIpfHxiJjUxMik/MzE6QmIoZixHYihiKSk6NDQpKXRocm93IG5ldyBSLmcoYyk7YiY1MTImJiFkJiZSLnRydW5jYXRlKGYsMCk7YiY9LTEzMTcxMztmPUtiKHtub2RlOmYscGF0aDpEYihmKSxmbGFnczpiLHNlZWthYmxlOiEwLHBvc2l0aW9uOjAsbDpmLmwsWGE6W10sZXJyb3I6ITF9KTtmLmwub3BlbiYmZi5sLm9wZW4oZik7IWUubG9nUmVhZEZpbGVzfHxiJjF8fChSLmphfHwoUi5qYT17fSksYSBpbiBSLmphfHwoUi5qYVthXT0xKSk7cmV0dXJuIGZ9LGNsb3NlKGEpe2lmKG51bGw9PT1hLmZkKXRocm93IG5ldyBSLmcoOCk7YS5lYSYmKGEuZWE9bnVsbCk7dHJ5e2EubC5jbG9zZSYmYS5sLmNsb3NlKGEpO31jYXRjaChiKXt0aHJvdyBiO31maW5hbGx5e1Iuc3RyZWFtc1thLmZkXT1udWxsO31hLmZkPW51bGw7fSxEKGEsYixjKXtpZihudWxsPT09YS5mZCl0aHJvdyBuZXcgUi5nKDgpO2lmKCFhLnNlZWthYmxlfHwhYS5sLkQpdGhyb3cgbmV3IFIuZyg3MCk7XG4gICAgaWYoMCE9YyYmMSE9YyYmMiE9Yyl0aHJvdyBuZXcgUi5nKDI4KTthLnBvc2l0aW9uPWEubC5EKGEsYixjKTthLlhhPVtdO3JldHVybiBhLnBvc2l0aW9ufSxyZWFkKGEsYixjLGQsZil7dSgwPD1jKTtpZigwPmR8fDA+Zil0aHJvdyBuZXcgUi5nKDI4KTtpZihudWxsPT09YS5mZCl0aHJvdyBuZXcgUi5nKDgpO2lmKDE9PT0oYS5mbGFncyYyMDk3MTU1KSl0aHJvdyBuZXcgUi5nKDgpO2lmKFQoYS5ub2RlLm1vZGUpKXRocm93IG5ldyBSLmcoMzEpO2lmKCFhLmwucmVhZCl0aHJvdyBuZXcgUi5nKDI4KTt2YXIgaD1cInVuZGVmaW5lZFwiIT10eXBlb2YgZjtpZighaClmPWEucG9zaXRpb247ZWxzZSBpZighYS5zZWVrYWJsZSl0aHJvdyBuZXcgUi5nKDcwKTtiPWEubC5yZWFkKGEsYixjLGQsZik7aHx8KGEucG9zaXRpb24rPWIpO3JldHVybiBifSx3cml0ZShhLGIsYyxkLGYsaCl7dSgwPD1jKTtpZigwPmR8fDA+Zil0aHJvdyBuZXcgUi5nKDI4KTtpZihudWxsPT09YS5mZCl0aHJvdyBuZXcgUi5nKDgpO1xuICAgIGlmKDA9PT0oYS5mbGFncyYyMDk3MTU1KSl0aHJvdyBuZXcgUi5nKDgpO2lmKFQoYS5ub2RlLm1vZGUpKXRocm93IG5ldyBSLmcoMzEpO2lmKCFhLmwud3JpdGUpdGhyb3cgbmV3IFIuZygyOCk7YS5zZWVrYWJsZSYmYS5mbGFncyYxMDI0JiZSLkQoYSwwLDIpO3ZhciBtPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBmO2lmKCFtKWY9YS5wb3NpdGlvbjtlbHNlIGlmKCFhLnNlZWthYmxlKXRocm93IG5ldyBSLmcoNzApO2I9YS5sLndyaXRlKGEsYixjLGQsZixoKTttfHwoYS5wb3NpdGlvbis9Yik7cmV0dXJuIGJ9LFQoYSxiLGMpe2lmKG51bGw9PT1hLmZkKXRocm93IG5ldyBSLmcoOCk7aWYoMD5ifHwwPj1jKXRocm93IG5ldyBSLmcoMjgpO2lmKDA9PT0oYS5mbGFncyYyMDk3MTU1KSl0aHJvdyBuZXcgUi5nKDgpO2lmKCFSLmlzRmlsZShhLm5vZGUubW9kZSkmJiFUKGEubm9kZS5tb2RlKSl0aHJvdyBuZXcgUi5nKDQzKTtpZighYS5sLlQpdGhyb3cgbmV3IFIuZygxMzgpO2EubC5UKGEsYixjKTt9LFxuICAgIFMoYSxiLGMsZCxmKXtpZigwIT09KGQmMikmJjA9PT0oZiYyKSYmMiE9PShhLmZsYWdzJjIwOTcxNTUpKXRocm93IG5ldyBSLmcoMik7aWYoMT09PShhLmZsYWdzJjIwOTcxNTUpKXRocm93IG5ldyBSLmcoMik7aWYoIWEubC5TKXRocm93IG5ldyBSLmcoNDMpO3JldHVybiBhLmwuUyhhLGIsYyxkLGYpfSxWKGEsYixjLGQsZil7dSgwPD1jKTtyZXR1cm4gYS5sLlY/YS5sLlYoYSxiLGMsZCxmKTowfSxxYjooKT0+MCxmYShhLGIsYyl7aWYoIWEubC5mYSl0aHJvdyBuZXcgUi5nKDU5KTtyZXR1cm4gYS5sLmZhKGEsYixjKX0scmVhZEZpbGUoYSxiPXt9KXtiLmZsYWdzPWIuZmxhZ3N8fDA7Yi5lbmNvZGluZz1iLmVuY29kaW5nfHxcImJpbmFyeVwiO2lmKFwidXRmOFwiIT09Yi5lbmNvZGluZyYmXCJiaW5hcnlcIiE9PWIuZW5jb2RpbmcpdGhyb3cgRXJyb3IoYEludmFsaWQgZW5jb2RpbmcgdHlwZSBcIiR7Yi5lbmNvZGluZ31cImApO3ZhciBjLGQ9Ui5vcGVuKGEsYi5mbGFncyk7YT1SLnN0YXQoYSkuc2l6ZTtcbiAgICB2YXIgZj1uZXcgVWludDhBcnJheShhKTtSLnJlYWQoZCxmLDAsYSwwKTtcInV0ZjhcIj09PWIuZW5jb2Rpbmc/Yz1oYihmLDApOlwiYmluYXJ5XCI9PT1iLmVuY29kaW5nJiYoYz1mKTtSLmNsb3NlKGQpO3JldHVybiBjfSx3cml0ZUZpbGUoYSxiLGM9e30pe2MuZmxhZ3M9Yy5mbGFnc3x8NTc3O2E9Ui5vcGVuKGEsYy5mbGFncyxjLm1vZGUpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBiKXt2YXIgZD1uZXcgVWludDhBcnJheShqYihiKSsxKTtiPWtiKGIsZCwwLGQubGVuZ3RoKTtSLndyaXRlKGEsZCwwLGIsdm9pZCAwLGMuQ2EpO31lbHNlIGlmKEFycmF5QnVmZmVyLmlzVmlldyhiKSlSLndyaXRlKGEsYiwwLGIuYnl0ZUxlbmd0aCx2b2lkIDAsYy5DYSk7ZWxzZSB0aHJvdyBFcnJvcihcIlVuc3VwcG9ydGVkIGRhdGEgdHlwZVwiKTtSLmNsb3NlKGEpO30sY3dkOigpPT5SLm9hLGNoZGlyKGEpe2E9VihhLHtCOiEwfSk7aWYobnVsbD09PWEubm9kZSl0aHJvdyBuZXcgUi5nKDQ0KTtpZighVChhLm5vZGUubW9kZSkpdGhyb3cgbmV3IFIuZyg1NCk7XG4gICAgdmFyIGI9QmIoYS5ub2RlLFwieFwiKTtpZihiKXRocm93IG5ldyBSLmcoYik7Ui5vYT1hLnBhdGg7fSxSKGEsYixjKXt1KCFSLlIuWSxcIkZTLmluaXQgd2FzIHByZXZpb3VzbHkgY2FsbGVkLiBJZiB5b3Ugd2FudCB0byBpbml0aWFsaXplIGxhdGVyIHdpdGggY3VzdG9tIHBhcmFtZXRlcnMsIHJlbW92ZSBhbnkgZWFybGllciBjYWxscyAobm90ZSB0aGF0IG9uZSBpcyBhdXRvbWF0aWNhbGx5IGFkZGVkIHRvIHRoZSBnZW5lcmF0ZWQgY29kZSlcIik7Ui5SLlk9ITA7TmIoKTtlLnN0ZGluPWF8fGUuc3RkaW47ZS5zdGRvdXQ9Ynx8ZS5zdGRvdXQ7ZS5zdGRlcnI9Y3x8ZS5zdGRlcnI7ZS5zdGRpbj9SLkwoXCIvZGV2XCIsXCJzdGRpblwiLGUuc3RkaW4pOlIuc3ltbGluayhcIi9kZXYvdHR5XCIsXCIvZGV2L3N0ZGluXCIpO2Uuc3Rkb3V0P1IuTChcIi9kZXZcIixcInN0ZG91dFwiLG51bGwsZS5zdGRvdXQpOlIuc3ltbGluayhcIi9kZXYvdHR5XCIsXCIvZGV2L3N0ZG91dFwiKTtlLnN0ZGVycj9SLkwoXCIvZGV2XCIsXCJzdGRlcnJcIixcbiAgICBudWxsLGUuc3RkZXJyKTpSLnN5bWxpbmsoXCIvZGV2L3R0eTFcIixcIi9kZXYvc3RkZXJyXCIpO2E9Ui5vcGVuKFwiL2Rldi9zdGRpblwiLDApO2I9Ui5vcGVuKFwiL2Rldi9zdGRvdXRcIiwxKTtjPVIub3BlbihcIi9kZXYvc3RkZXJyXCIsMSk7dSgwPT09YS5mZCxgaW52YWxpZCBoYW5kbGUgZm9yIHN0ZGluICgke2EuZmR9KWApO3UoMT09PWIuZmQsYGludmFsaWQgaGFuZGxlIGZvciBzdGRvdXQgKCR7Yi5mZH0pYCk7dSgyPT09Yy5mZCxgaW52YWxpZCBoYW5kbGUgZm9yIHN0ZGVyciAoJHtjLmZkfSlgKTt9LHNiKCl7Ui5SLlk9ITE7UmIoMCk7Zm9yKHZhciBhPTA7YTxSLnN0cmVhbXMubGVuZ3RoO2ErKyl7dmFyIGI9Ui5zdHJlYW1zW2FdO2ImJlIuY2xvc2UoYik7fX0samIoYSxiKXthPU9iKGEsYik7cmV0dXJuIGEuZXhpc3RzP2Eub2JqZWN0Om51bGx9LGhiKGEsYil7YT1cInN0cmluZ1wiPT10eXBlb2YgYT9hOkRiKGEpO2ZvcihiPWIuc3BsaXQoXCIvXCIpLnJldmVyc2UoKTtiLmxlbmd0aDspe3ZhciBjPVxuICAgIGIucG9wKCk7aWYoYyl7dmFyIGQ9UChhK1wiL1wiK2MpO3RyeXtSLm1rZGlyKGQpO31jYXRjaChmKXt9YT1kO319cmV0dXJuIGR9LEwoYSxiLGMsZCl7YT1hYihcInN0cmluZ1wiPT10eXBlb2YgYT9hOkRiKGEpLGIpO2I9eGIoISFjLCEhZCk7Ui5MLmhhfHwoUi5MLmhhPTY0KTt2YXIgZj1SLk0oUi5MLmhhKyssMCk7b2IoZix7b3BlbihoKXtoLnNlZWthYmxlPSExO30sY2xvc2UoKXtkJiZkLmJ1ZmZlciYmZC5idWZmZXIubGVuZ3RoJiZkKDEwKTt9LHJlYWQoaCxtLHAseSl7Zm9yKHZhciBxPTAseD0wO3g8eTt4Kyspe3RyeXt2YXIgdD1jKCk7fWNhdGNoKEIpe3Rocm93IG5ldyBSLmcoMjkpO31pZih2b2lkIDA9PT10JiYwPT09cSl0aHJvdyBuZXcgUi5nKDYpO2lmKG51bGw9PT10fHx2b2lkIDA9PT10KWJyZWFrO3ErKzttW3AreF09dDt9cSYmKGgubm9kZS50aW1lc3RhbXA9RGF0ZS5ub3coKSk7cmV0dXJuIHF9LHdyaXRlKGgsbSxwLHkpe2Zvcih2YXIgcT0wO3E8eTtxKyspdHJ5e2QobVtwK3FdKTt9Y2F0Y2goeCl7dGhyb3cgbmV3IFIuZygyOSk7XG4gICAgfXkmJihoLm5vZGUudGltZXN0YW1wPURhdGUubm93KCkpO3JldHVybiBxfX0pO3JldHVybiBNYihhLGIsZil9LGZiKGEsYixjLGQsZil7ZnVuY3Rpb24gaCgpe3RoaXMuZ2E9ITE7dGhpcy5JPVtdO31mdW5jdGlvbiBtKHQsQixsLHcsdil7dD10Lm5vZGUubTtpZih2Pj10Lmxlbmd0aClyZXR1cm4gMDt3PU1hdGgubWluKHQubGVuZ3RoLXYsdyk7dSgwPD13KTtpZih0LnNsaWNlKWZvcih2YXIgQT0wO0E8dztBKyspQltsK0FdPXRbditBXTtlbHNlIGZvcihBPTA7QTx3O0ErKylCW2wrQV09dC5nZXQoditBKTtyZXR1cm4gd31oLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7aWYoISh0PnRoaXMubGVuZ3RoLTF8fDA+dCkpe3ZhciBCPXQldGhpcy5jaHVua1NpemU7cmV0dXJuIHRoaXMuc2EodC90aGlzLmNodW5rU2l6ZXwwKVtCXX19O2gucHJvdG90eXBlLkhhPWZ1bmN0aW9uKHQpe3RoaXMuc2E9dDt9O2gucHJvdG90eXBlLm1hPWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IFhNTEh0dHBSZXF1ZXN0O1xuICAgIHQub3BlbihcIkhFQURcIixjLCExKTt0LnNlbmQobnVsbCk7aWYoISgyMDA8PXQuc3RhdHVzJiYzMDA+dC5zdGF0dXN8fDMwND09PXQuc3RhdHVzKSl0aHJvdyBFcnJvcihcIkNvdWxkbid0IGxvYWQgXCIrYytcIi4gU3RhdHVzOiBcIit0LnN0YXR1cyk7dmFyIEI9TnVtYmVyKHQuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LWxlbmd0aFwiKSksbCx3PShsPXQuZ2V0UmVzcG9uc2VIZWFkZXIoXCJBY2NlcHQtUmFuZ2VzXCIpKSYmXCJieXRlc1wiPT09bDt0PShsPXQuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LUVuY29kaW5nXCIpKSYmXCJnemlwXCI9PT1sO3ZhciB2PTEwNDg1NzY7d3x8KHY9Qik7dmFyIEE9dGhpcztBLkhhKEg9Pnt2YXIgTj1IKnYsTz0oSCsxKSp2LTE7Tz1NYXRoLm1pbihPLEItMSk7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIEEuSVtIXSl7dmFyIGZiPUEuSTtpZihOPk8pdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHJhbmdlIChcIitOK1wiLCBcIitPK1wiKSBvciBubyBieXRlcyByZXF1ZXN0ZWQhXCIpO1xuICAgIGlmKE8+Qi0xKXRocm93IEVycm9yKFwib25seSBcIitCK1wiIGJ5dGVzIGF2YWlsYWJsZSEgcHJvZ3JhbW1lciBlcnJvciFcIik7dmFyIEs9bmV3IFhNTEh0dHBSZXF1ZXN0O0sub3BlbihcIkdFVFwiLGMsITEpO0IhPT12JiZLLnNldFJlcXVlc3RIZWFkZXIoXCJSYW5nZVwiLFwiYnl0ZXM9XCIrTitcIi1cIitPKTtLLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7Sy5vdmVycmlkZU1pbWVUeXBlJiZLLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkXCIpO0suc2VuZChudWxsKTtpZighKDIwMDw9Sy5zdGF0dXMmJjMwMD5LLnN0YXR1c3x8MzA0PT09Sy5zdGF0dXMpKXRocm93IEVycm9yKFwiQ291bGRuJ3QgbG9hZCBcIitjK1wiLiBTdGF0dXM6IFwiK0suc3RhdHVzKTtOPXZvaWQgMCE9PUsucmVzcG9uc2U/bmV3IFVpbnQ4QXJyYXkoSy5yZXNwb25zZXx8W10pOmxiKEsucmVzcG9uc2VUZXh0fHxcIlwiLCEwKTtmYltIXT1OO31pZihcInVuZGVmaW5lZFwiPT10eXBlb2YgQS5JW0hdKXRocm93IEVycm9yKFwiZG9YSFIgZmFpbGVkIVwiKTtcbiAgICByZXR1cm4gQS5JW0hdfSk7aWYodHx8IUIpdj1CPTEsdj1CPXRoaXMuc2EoMCkubGVuZ3RoLHFhKFwiTGF6eUZpbGVzIG9uIGd6aXAgZm9yY2VzIGRvd25sb2FkIG9mIHRoZSB3aG9sZSBmaWxlIHdoZW4gbGVuZ3RoIGlzIGFjY2Vzc2VkXCIpO3RoaXMuemE9Qjt0aGlzLnlhPXY7dGhpcy5nYT0hMDt9O2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBYTUxIdHRwUmVxdWVzdCl7aWYoIWspdGhyb3cgXCJDYW5ub3QgZG8gc3luY2hyb25vdXMgYmluYXJ5IFhIUnMgb3V0c2lkZSB3ZWJ3b3JrZXJzIGluIG1vZGVybiBicm93c2Vycy4gVXNlIC0tZW1iZWQtZmlsZSBvciAtLXByZWxvYWQtZmlsZSBpbiBlbWNjXCI7dmFyIHA9bmV3IGg7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMocCx7bGVuZ3RoOntnZXQ6ZnVuY3Rpb24oKXt0aGlzLmdhfHx0aGlzLm1hKCk7cmV0dXJuIHRoaXMuemF9fSxjaHVua1NpemU6e2dldDpmdW5jdGlvbigpe3RoaXMuZ2F8fHRoaXMubWEoKTtyZXR1cm4gdGhpcy55YX19fSk7dmFyIHk9XG4gICAgdm9pZCAwO31lbHNlIHk9YyxwPXZvaWQgMDt2YXIgcT1QYihhLGIsZCxmKTtwP3EubT1wOnkmJihxLm09bnVsbCxxLnVybD15KTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhxLHtvOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tLmxlbmd0aH19fSk7dmFyIHg9e307T2JqZWN0LmtleXMocS5sKS5mb3JFYWNoKHQ9Pnt2YXIgQj1xLmxbdF07eFt0XT1mdW5jdGlvbigpe1FiKHEpO3JldHVybiBCLmFwcGx5KG51bGwsYXJndW1lbnRzKX07fSk7eC5yZWFkPSh0LEIsbCx3LHYpPT57UWIocSk7cmV0dXJuIG0odCxCLGwsdyx2KX07eC5TPSh0LEIsbCk9PntRYihxKTt2YXIgdz1zYigpO2lmKCF3KXRocm93IG5ldyBSLmcoNDgpO20odCxFLHcsQixsKTtyZXR1cm4ge1JhOncsQWE6ITB9fTtxLmw9eDtyZXR1cm4gcX0sWWEoKXtnKFwiRlMuYWJzb2x1dGVQYXRoIGhhcyBiZWVuIHJlbW92ZWQ7IHVzZSBQQVRIX0ZTLnJlc29sdmUgaW5zdGVhZFwiKTt9LGViKCl7ZyhcIkZTLmNyZWF0ZUZvbGRlciBoYXMgYmVlbiByZW1vdmVkOyB1c2UgRlMubWtkaXIgaW5zdGVhZFwiKTt9LFxuICAgIGdiKCl7ZyhcIkZTLmNyZWF0ZUxpbmsgaGFzIGJlZW4gcmVtb3ZlZDsgdXNlIEZTLnN5bWxpbmsgaW5zdGVhZFwiKTt9LG1iKCl7ZyhcIkZTLmpvaW5QYXRoIGhhcyBiZWVuIHJlbW92ZWQ7IHVzZSBQQVRILmpvaW4gaW5zdGVhZFwiKTt9LHBiKCl7ZyhcIkZTLm1tYXBBbGxvYyBoYXMgYmVlbiByZXBsYWNlZCBieSB0aGUgdG9wIGxldmVsIGZ1bmN0aW9uIG1tYXBBbGxvY1wiKTt9LHZiKCl7ZyhcIkZTLnN0YW5kYXJkaXplUGF0aCBoYXMgYmVlbiByZW1vdmVkOyB1c2UgUEFUSC5ub3JtYWxpemUgaW5zdGVhZFwiKTt9fSxYPWE9Pnt1KFwibnVtYmVyXCI9PXR5cGVvZiBhLGBVVEY4VG9TdHJpbmcgZXhwZWN0cyBhIG51bWJlciAoZ290ICR7dHlwZW9mIGF9KWApO3JldHVybiBhP2hiKHRhLGEpOlwiXCJ9O1xuICAgIGZ1bmN0aW9uIFNiKGEsYil7aWYoXCIvXCI9PT1iLmNoYXJBdCgwKSlyZXR1cm4gYjthPS0xMDA9PT1hP1IuY3dkKCk6VyhhKS5wYXRoO2lmKDA9PWIubGVuZ3RoKXRocm93IG5ldyBSLmcoNDQpO3JldHVybiBQKGErXCIvXCIrYil9dmFyIFRiPXZvaWQgMDtmdW5jdGlvbiBZKCl7dSh2b2lkIDAhPVRiKTt2YXIgYT1GWytUYj4+Ml07VGIrPTQ7cmV0dXJuIGF9XG4gICAgdmFyIFViPShhLGIsYyk9Pnt1KFwibnVtYmVyXCI9PXR5cGVvZiBjLFwic3RyaW5nVG9VVEY4KHN0ciwgb3V0UHRyLCBtYXhCeXRlc1RvV3JpdGUpIGlzIG1pc3NpbmcgdGhlIHRoaXJkIHBhcmFtZXRlciB0aGF0IHNwZWNpZmllcyB0aGUgbGVuZ3RoIG9mIHRoZSBvdXRwdXQgYnVmZmVyIVwiKTtyZXR1cm4ga2IoYSx0YSxiLGMpfSxWYj1hPT4wPT09YSU0JiYoMCE9PWElMTAwfHwwPT09YSU0MDApLFdiPVswLDMxLDYwLDkxLDEyMSwxNTIsMTgyLDIxMywyNDQsMjc0LDMwNSwzMzVdLFhiPVswLDMxLDU5LDkwLDEyMCwxNTEsMTgxLDIxMiwyNDMsMjczLDMwNCwzMzRdLFpiPWE9Pnt2YXIgYj1qYihhKSsxLGM9WWIoYik7YyYmVWIoYSxjLGIpO3JldHVybiBjfSwkYj17fSxiYz0oKT0+e2lmKCFhYyl7dmFyIGE9e1VTRVI6XCJ3ZWJfdXNlclwiLExPR05BTUU6XCJ3ZWJfdXNlclwiLFBBVEg6XCIvXCIsUFdEOlwiL1wiLEhPTUU6XCIvaG9tZS93ZWJfdXNlclwiLExBTkc6KFwib2JqZWN0XCI9PXR5cGVvZiBuYXZpZ2F0b3ImJlxuICAgIG5hdmlnYXRvci5sYW5ndWFnZXMmJm5hdmlnYXRvci5sYW5ndWFnZXNbMF18fFwiQ1wiKS5yZXBsYWNlKFwiLVwiLFwiX1wiKStcIi5VVEYtOFwiLF86ZGF8fFwiLi90aGlzLnByb2dyYW1cIn0sYjtmb3IoYiBpbiAkYil2b2lkIDA9PT0kYltiXT9kZWxldGUgYVtiXTphW2JdPSRiW2JdO3ZhciBjPVtdO2ZvcihiIGluIGEpYy5wdXNoKGAke2J9PSR7YVtiXX1gKTthYz1jO31yZXR1cm4gYWN9LGFjLGNjPVszMSwyOSwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV0sZGM9WzMxLDI4LDMxLDMwLDMxLDMwLDMxLDMxLDMwLDMxLDMwLDMxXSxlYz0oYSxiKT0+e3UoMDw9YS5sZW5ndGgsXCJ3cml0ZUFycmF5VG9NZW1vcnkgYXJyYXkgbXVzdCBoYXZlIGEgbGVuZ3RoIChzaG91bGQgYmUgYW4gYXJyYXkgb3IgdHlwZWQgYXJyYXkpXCIpO0Uuc2V0KGEsYik7fSxmYz1bXSxaLGdjPWE9Pnt2YXIgYj1mY1thXTtifHwoYT49ZmMubGVuZ3RoJiYoZmMubGVuZ3RoPWErMSksZmNbYV09Yj1aLmdldChhKSk7dShaLmdldChhKT09XG4gICAgYixcIkphdmFTY3JpcHQtc2lkZSBXYXNtIGZ1bmN0aW9uIHRhYmxlIG1pcnJvciBpcyBvdXQgb2YgZGF0ZSFcIik7cmV0dXJuIGJ9LGhjPWE9Pnt2YXIgYj1lW1wiX1wiK2FdO3UoYixcIkNhbm5vdCBjYWxsIHVua25vd24gZnVuY3Rpb24gXCIrYStcIiwgbWFrZSBzdXJlIGl0IGlzIGV4cG9ydGVkXCIpO3JldHVybiBifSxpYyxqYz1bXTtmdW5jdGlvbiBrYyhhLGIsYyxkKXthfHw9dGhpczt0aGlzLnBhcmVudD1hO3RoaXMucz1hLnM7dGhpcy5BPW51bGw7dGhpcy5pZD1SLk5hKys7dGhpcy5uYW1lPWI7dGhpcy5tb2RlPWM7dGhpcy5oPXt9O3RoaXMubD17fTt0aGlzLnJkZXY9ZDt9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoa2MucHJvdG90eXBlLHtyZWFkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gMzY1PT09KHRoaXMubW9kZSYzNjUpfSxzZXQ6ZnVuY3Rpb24oYSl7YT90aGlzLm1vZGV8PTM2NTp0aGlzLm1vZGUmPS0zNjY7fX0sd3JpdGU6e2dldDpmdW5jdGlvbigpe3JldHVybiAxNDY9PT0odGhpcy5tb2RlJjE0Nil9LHNldDpmdW5jdGlvbihhKXthP3RoaXMubW9kZXw9MTQ2OnRoaXMubW9kZSY9LTE0Nzt9fSxNYTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFQodGhpcy5tb2RlKX19LExhOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gODE5Mj09PSh0aGlzLm1vZGUmNjE0NDApfX19KTtSLndhPWtjO1xuICAgIFIuaWI9KGEsYixjLGQsZixoLG0scCx5LHEpPT57ZnVuY3Rpb24geChsKXtmdW5jdGlvbiB3KHYpe3EmJnEoKTtpZighcCl7dmFyIEE9YSxIPWI7QSYmKEE9XCJzdHJpbmdcIj09dHlwZW9mIEE/QTpEYihBKSxIPWI/UChBK1wiL1wiK2IpOkEpO0E9eGIoZCxmKTtIPVIuY3JlYXRlKEgsQSk7aWYodil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHYpe2Zvcih2YXIgTj1BcnJheSh2Lmxlbmd0aCksTz0wLGZiPXYubGVuZ3RoO088ZmI7KytPKU5bT109di5jaGFyQ29kZUF0KE8pO3Y9Tjt9Ui5jaG1vZChILEF8MTQ2KTtOPVIub3BlbihILDU3Nyk7Ui53cml0ZShOLHYsMCx2Lmxlbmd0aCwwLHkpO1IuY2xvc2UoTik7Ui5jaG1vZChILEEpO319aCYmaCgpO05hKEIpO313YihsLHQsdywoKT0+e20mJm0oKTtOYShCKTt9KXx8dyhsKTt9dmFyIHQ9Yj9kYihQKGErXCIvXCIrYikpOmEsQj1MYShgY3AgJHt0fWApO01hKEIpO1wic3RyaW5nXCI9PXR5cGVvZiBjP3ViKGMsbD0+eChsKSxtKTp4KGMpO307TmIoKTtSLkY9QXJyYXkoNDA5Nik7XG4gICAgUi5zKFMse30sXCIvXCIpO1IubWtkaXIoXCIvdG1wXCIpO1IubWtkaXIoXCIvaG9tZVwiKTtSLm1rZGlyKFwiL2hvbWUvd2ViX3VzZXJcIik7KGZ1bmN0aW9uKCl7Ui5ta2RpcihcIi9kZXZcIik7b2IoUi5NKDEsMykse3JlYWQ6KCk9PjAsd3JpdGU6KGQsZixoLG0pPT5tfSk7TWIoXCIvZGV2L251bGxcIixSLk0oMSwzKSk7bmIoUi5NKDUsMCkscWIpO25iKFIuTSg2LDApLHJiKTtNYihcIi9kZXYvdHR5XCIsUi5NKDUsMCkpO01iKFwiL2Rldi90dHkxXCIsUi5NKDYsMCkpO3ZhciBhPW5ldyBVaW50OEFycmF5KDEwMjQpLGI9MCxjPSgpPT57MD09PWImJihiPWNiKGEpLmJ5dGVMZW5ndGgpO3JldHVybiBhWy0tYl19O1IuTChcIi9kZXZcIixcInJhbmRvbVwiLGMpO1IuTChcIi9kZXZcIixcInVyYW5kb21cIixjKTtSLm1rZGlyKFwiL2Rldi9zaG1cIik7Ui5ta2RpcihcIi9kZXYvc2htL3RtcFwiKTt9KSgpO1xuICAgIChmdW5jdGlvbigpe1IubWtkaXIoXCIvcHJvY1wiKTt2YXIgYT1SLm1rZGlyKFwiL3Byb2Mvc2VsZlwiKTtSLm1rZGlyKFwiL3Byb2Mvc2VsZi9mZFwiKTtSLnMoe3MoKXt2YXIgYj1SLmNyZWF0ZU5vZGUoYSxcImZkXCIsMTY4OTUsNzMpO2IuaD17bG9va3VwKGMsZCl7dmFyIGY9VygrZCk7Yz17cGFyZW50Om51bGwsczp7dWE6XCJmYWtlXCJ9LGg6e3JlYWRsaW5rOigpPT5mLnBhdGh9fTtyZXR1cm4gYy5wYXJlbnQ9Y319O3JldHVybiBifX0se30sXCIvcHJvYy9zZWxmL2ZkXCIpO30pKCk7Ui5GYT17TUVNRlM6U307XG4gICAgdmFyIG9jPXtfX3N5c2NhbGxfZHVwMzpmdW5jdGlvbihhLGIsYyl7dHJ5e3ZhciBkPVcoYSk7dSghYyk7aWYoZC5mZD09PWIpcmV0dXJuIC0yODt2YXIgZj1SLnFhKGIpO2YmJlIuY2xvc2UoZik7cmV0dXJuIEtiKGQsYikuZmR9Y2F0Y2goaCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJ8fFwiRXJybm9FcnJvclwiIT09aC5uYW1lKXRocm93IGg7cmV0dXJuIC1oLnV9fSxfX3N5c2NhbGxfZmNudGw2NDpmdW5jdGlvbihhLGIsYyl7VGI9Yzt0cnl7dmFyIGQ9VyhhKTtzd2l0Y2goYil7Y2FzZSAwOnZhciBmPVkoKTtpZigwPmYpcmV0dXJuIC0yODtmb3IoO1Iuc3RyZWFtc1tmXTspZisrO3JldHVybiBLYihkLGYpLmZkO2Nhc2UgMTpjYXNlIDI6cmV0dXJuIDA7Y2FzZSAzOnJldHVybiBkLmZsYWdzO2Nhc2UgNDpyZXR1cm4gZj1ZKCksZC5mbGFnc3w9ZiwwO2Nhc2UgNTpyZXR1cm4gZj1ZKCksdWFbZiswPj4xXT0yLDA7Y2FzZSA2OmNhc2UgNzpyZXR1cm4gMDtjYXNlIDE2OmNhc2UgODpyZXR1cm4gLTI4O1xuICAgIGNhc2UgOTpyZXR1cm4gRltsYygpPj4yXT0yOCwtMTtkZWZhdWx0OnJldHVybiAtMjh9fWNhdGNoKGgpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSfHxcIkVycm5vRXJyb3JcIiE9PWgubmFtZSl0aHJvdyBoO3JldHVybiAtaC51fX0sX19zeXNjYWxsX2lvY3RsOmZ1bmN0aW9uKGEsYixjKXtUYj1jO3RyeXt2YXIgZD1XKGEpO3N3aXRjaChiKXtjYXNlIDIxNTA5OnJldHVybiBkLnR0eT8wOi01OTtjYXNlIDIxNTA1OmlmKCFkLnR0eSlyZXR1cm4gLTU5O2lmKGQudHR5LksuSWEpe2E9WzMsMjgsMTI3LDIxLDQsMCwxLDAsMTcsMTksMjYsMCwxOCwxNSwyMywyMiwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXTt2YXIgZj1ZKCk7RltmPj4yXT0yNTg1NjtGW2YrND4+Ml09NTtGW2YrOD4+Ml09MTkxO0ZbZisxMj4+Ml09MzUzODc7Zm9yKHZhciBoPTA7MzI+aDtoKyspRVtmK2grMTc+PjBdPWFbaF18fDA7fXJldHVybiAwO2Nhc2UgMjE1MTA6Y2FzZSAyMTUxMTpjYXNlIDIxNTEyOnJldHVybiBkLnR0eT9cbiAgICAwOi01OTtjYXNlIDIxNTA2OmNhc2UgMjE1MDc6Y2FzZSAyMTUwODppZighZC50dHkpcmV0dXJuIC01OTtpZihkLnR0eS5LLkphKWZvcihmPVkoKSxhPVtdLGg9MDszMj5oO2grKylhLnB1c2goRVtmK2grMTc+PjBdKTtyZXR1cm4gMDtjYXNlIDIxNTE5OmlmKCFkLnR0eSlyZXR1cm4gLTU5O2Y9WSgpO3JldHVybiBGW2Y+PjJdPTA7Y2FzZSAyMTUyMDpyZXR1cm4gZC50dHk/LTI4Oi01OTtjYXNlIDIxNTMxOnJldHVybiBmPVkoKSxSLmZhKGQsYixmKTtjYXNlIDIxNTIzOmlmKCFkLnR0eSlyZXR1cm4gLTU5O2QudHR5LksuS2EmJihoPVsyNCw4MF0sZj1ZKCksdWFbZj4+MV09aFswXSx1YVtmKzI+PjFdPWhbMV0pO3JldHVybiAwO2Nhc2UgMjE1MjQ6cmV0dXJuIGQudHR5PzA6LTU5O2Nhc2UgMjE1MTU6cmV0dXJuIGQudHR5PzA6LTU5O2RlZmF1bHQ6cmV0dXJuIC0yOH19Y2F0Y2gobSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJ8fFwiRXJybm9FcnJvclwiIT09bS5uYW1lKXRocm93IG07cmV0dXJuIC1tLnV9fSxcbiAgICBfX3N5c2NhbGxfb3BlbmF0OmZ1bmN0aW9uKGEsYixjLGQpe1RiPWQ7dHJ5e2I9WChiKTtiPVNiKGEsYik7dmFyIGY9ZD9ZKCk6MDtyZXR1cm4gUi5vcGVuKGIsYyxmKS5mZH1jYXRjaChoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUnx8XCJFcnJub0Vycm9yXCIhPT1oLm5hbWUpdGhyb3cgaDtyZXR1cm4gLWgudX19LF9fc3lzY2FsbF9yZWFkbGlua2F0OmZ1bmN0aW9uKGEsYixjLGQpe3RyeXtiPVgoYik7Yj1TYihhLGIpO2lmKDA+PWQpcmV0dXJuIC0yODt2YXIgZj1SLnJlYWRsaW5rKGIpLGg9TWF0aC5taW4oZCxqYihmKSksbT1FW2MraF07VWIoZixjLGQrMSk7RVtjK2hdPW07cmV0dXJuIGh9Y2F0Y2gocCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJ8fFwiRXJybm9FcnJvclwiIT09cC5uYW1lKXRocm93IHA7cmV0dXJuIC1wLnV9fSxfX3N5c2NhbGxfcmVuYW1lYXQ6ZnVuY3Rpb24oYSxiLGMsZCl7dHJ5e3JldHVybiBiPVgoYiksZD1YKGQpLGI9U2IoYSxiKSxkPVNiKGMsZCksUi5yZW5hbWUoYixcbiAgICBkKSwwfWNhdGNoKGYpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSfHxcIkVycm5vRXJyb3JcIiE9PWYubmFtZSl0aHJvdyBmO3JldHVybiAtZi51fX0sX19zeXNjYWxsX3JtZGlyOmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gYT1YKGEpLFIucm1kaXIoYSksMH1jYXRjaChiKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUnx8XCJFcnJub0Vycm9yXCIhPT1iLm5hbWUpdGhyb3cgYjtyZXR1cm4gLWIudX19LF9fc3lzY2FsbF91bmxpbmthdDpmdW5jdGlvbihhLGIsYyl7dHJ5e3JldHVybiBiPVgoYiksYj1TYihhLGIpLDA9PT1jP1IudW5saW5rKGIpOjUxMj09PWM/Ui5ybWRpcihiKTpnKFwiSW52YWxpZCBmbGFncyBwYXNzZWQgdG8gdW5saW5rYXRcIiksMH1jYXRjaChkKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUnx8XCJFcnJub0Vycm9yXCIhPT1kLm5hbWUpdGhyb3cgZDtyZXR1cm4gLWQudX19LF9lbXNjcmlwdGVuX2dldF9ub3dfaXNfbW9ub3RvbmljOigpPT4xLF9lbXNjcmlwdGVuX3Rocm93X2xvbmdqbXA6KCk9PlxuICAgIHt0aHJvdyBJbmZpbml0eTt9LF9nbXRpbWVfanM6ZnVuY3Rpb24oYSxiKXthPS05MDA3MTk5MjU0NzQwOTkyPmF8fDkwMDcxOTkyNTQ3NDA5OTI8YT9OYU46TnVtYmVyKGEpO2E9bmV3IERhdGUoMUUzKmEpO0ZbYj4+Ml09YS5nZXRVVENTZWNvbmRzKCk7RltiKzQ+PjJdPWEuZ2V0VVRDTWludXRlcygpO0ZbYis4Pj4yXT1hLmdldFVUQ0hvdXJzKCk7RltiKzEyPj4yXT1hLmdldFVUQ0RhdGUoKTtGW2IrMTY+PjJdPWEuZ2V0VVRDTW9udGgoKTtGW2IrMjA+PjJdPWEuZ2V0VVRDRnVsbFllYXIoKS0xOTAwO0ZbYisyND4+Ml09YS5nZXRVVENEYXkoKTtGW2IrMjg+PjJdPShhLmdldFRpbWUoKS1EYXRlLlVUQyhhLmdldFVUQ0Z1bGxZZWFyKCksMCwxLDAsMCwwLDApKS84NjRFNXwwO30sX2xvY2FsdGltZV9qczpmdW5jdGlvbihhLGIpe2E9LTkwMDcxOTkyNTQ3NDA5OTI+YXx8OTAwNzE5OTI1NDc0MDk5MjxhP05hTjpOdW1iZXIoYSk7YT1uZXcgRGF0ZSgxRTMqYSk7RltiPj4yXT1hLmdldFNlY29uZHMoKTtcbiAgICBGW2IrND4+Ml09YS5nZXRNaW51dGVzKCk7RltiKzg+PjJdPWEuZ2V0SG91cnMoKTtGW2IrMTI+PjJdPWEuZ2V0RGF0ZSgpO0ZbYisxNj4+Ml09YS5nZXRNb250aCgpO0ZbYisyMD4+Ml09YS5nZXRGdWxsWWVhcigpLTE5MDA7RltiKzI0Pj4yXT1hLmdldERheSgpO0ZbYisyOD4+Ml09KFZiKGEuZ2V0RnVsbFllYXIoKSk/V2I6WGIpW2EuZ2V0TW9udGgoKV0rYS5nZXREYXRlKCktMXwwO0ZbYiszNj4+Ml09LSg2MCphLmdldFRpbWV6b25lT2Zmc2V0KCkpO3ZhciBjPShuZXcgRGF0ZShhLmdldEZ1bGxZZWFyKCksNiwxKSkuZ2V0VGltZXpvbmVPZmZzZXQoKSxkPShuZXcgRGF0ZShhLmdldEZ1bGxZZWFyKCksMCwxKSkuZ2V0VGltZXpvbmVPZmZzZXQoKTtGW2IrMzI+PjJdPShjIT1kJiZhLmdldFRpbWV6b25lT2Zmc2V0KCk9PU1hdGgubWluKGQsYykpfDA7fSxfbWt0aW1lX2pzOmZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBEYXRlKEZbYSsyMD4+Ml0rMTkwMCxGW2ErMTY+PjJdLEZbYSsxMj4+XG4gICAgMl0sRlthKzg+PjJdLEZbYSs0Pj4yXSxGW2E+PjJdLDApLGM9RlthKzMyPj4yXSxkPWIuZ2V0VGltZXpvbmVPZmZzZXQoKSxmPShuZXcgRGF0ZShiLmdldEZ1bGxZZWFyKCksNiwxKSkuZ2V0VGltZXpvbmVPZmZzZXQoKSxoPShuZXcgRGF0ZShiLmdldEZ1bGxZZWFyKCksMCwxKSkuZ2V0VGltZXpvbmVPZmZzZXQoKSxtPU1hdGgubWluKGgsZik7MD5jP0ZbYSszMj4+Ml09TnVtYmVyKGYhPWgmJm09PWQpOjA8YyE9KG09PWQpJiYoZj1NYXRoLm1heChoLGYpLGIuc2V0VGltZShiLmdldFRpbWUoKSs2RTQqKCgwPGM/bTpmKS1kKSkpO0ZbYSsyND4+Ml09Yi5nZXREYXkoKTtGW2ErMjg+PjJdPShWYihiLmdldEZ1bGxZZWFyKCkpP1diOlhiKVtiLmdldE1vbnRoKCldK2IuZ2V0RGF0ZSgpLTF8MDtGW2E+PjJdPWIuZ2V0U2Vjb25kcygpO0ZbYSs0Pj4yXT1iLmdldE1pbnV0ZXMoKTtGW2ErOD4+Ml09Yi5nZXRIb3VycygpO0ZbYSsxMj4+Ml09Yi5nZXREYXRlKCk7RlthKzE2Pj4yXT1iLmdldE1vbnRoKCk7XG4gICAgRlthKzIwPj4yXT1iLmdldFllYXIoKTthPWIuZ2V0VGltZSgpO2lzTmFOKGEpPyhGW2xjKCk+PjJdPTYxLGE9LTEpOmEvPTFFMztyZXR1cm4gQmlnSW50KGEpfSxfdHpzZXRfanM6KGEsYixjKT0+e2Z1bmN0aW9uIGQoeSl7cmV0dXJuICh5PXkudG9UaW1lU3RyaW5nKCkubWF0Y2goL1xcKChbQS1aYS16IF0rKVxcKSQvKSk/eVsxXTpcIkdNVFwifXZhciBmPShuZXcgRGF0ZSkuZ2V0RnVsbFllYXIoKSxoPW5ldyBEYXRlKGYsMCwxKSxtPW5ldyBEYXRlKGYsNiwxKTtmPWguZ2V0VGltZXpvbmVPZmZzZXQoKTt2YXIgcD1tLmdldFRpbWV6b25lT2Zmc2V0KCk7R1thPj4yXT02MCpNYXRoLm1heChmLHApO0ZbYj4+Ml09TnVtYmVyKGYhPXApO2E9ZChoKTtiPWQobSk7YT1aYihhKTtiPVpiKGIpO3A8Zj8oR1tjPj4yXT1hLEdbYys0Pj4yXT1iKTooR1tjPj4yXT1iLEdbYys0Pj4yXT1hKTt9LGFib3J0OigpPT57ZyhcIm5hdGl2ZSBjb2RlIGNhbGxlZCBhYm9ydCgpXCIpO30sZW1zY3JpcHRlbl9kYXRlX25vdzooKT0+XG4gICAgRGF0ZS5ub3coKSxlbXNjcmlwdGVuX2dldF9ub3c6KCk9PnBlcmZvcm1hbmNlLm5vdygpLGVtc2NyaXB0ZW5fcmVzaXplX2hlYXA6YT0+e3ZhciBiPXRhLmxlbmd0aDthPj4+PTA7dShhPmIpO2lmKDIxNDc0ODM2NDg8YSlyZXR1cm4geihgQ2Fubm90IGVubGFyZ2UgbWVtb3J5LCByZXF1ZXN0ZWQgJHthfSBieXRlcywgYnV0IHRoZSBsaW1pdCBpcyAkezIxNDc0ODM2NDh9IGJ5dGVzIWApLCExO2Zvcih2YXIgYz0xOzQ+PWM7Yyo9Mil7dmFyIGQ9YiooMSsuMi9jKTtkPU1hdGgubWluKGQsYSsxMDA2NjMyOTYpO3ZhciBmPU1hdGg7ZD1NYXRoLm1heChhLGQpO2Y9Zi5taW4uY2FsbChmLDIxNDc0ODM2NDgsZCsoNjU1MzYtZCU2NTUzNiklNjU1MzYpO2E6e2Q9Zjt2YXIgaD1yYS5idWZmZXIsbT0oZC1oLmJ5dGVMZW5ndGgrNjU1MzUpLzY1NTM2O3RyeXtyYS5ncm93KG0pO3lhKCk7dmFyIHA9MTticmVhayBhfWNhdGNoKHkpe3ooYGdyb3dNZW1vcnk6IEF0dGVtcHRlZCB0byBncm93IGhlYXAgZnJvbSAke2guYnl0ZUxlbmd0aH0gYnl0ZXMgdG8gJHtkfSBieXRlcywgYnV0IGdvdCBlcnJvcjogJHt5fWApO31wPVxuICAgIHZvaWQgMDt9aWYocClyZXR1cm4gITB9eihgRmFpbGVkIHRvIGdyb3cgdGhlIGhlYXAgZnJvbSAke2J9IGJ5dGVzIHRvICR7Zn0gYnl0ZXMsIG5vdCBlbm91Z2ggbWVtb3J5IWApO3JldHVybiAhMX0sZW52aXJvbl9nZXQ6KGEsYik9Pnt2YXIgYz0wO2JjKCkuZm9yRWFjaCgoZCxmKT0+e3ZhciBoPWIrYztmPUdbYSs0KmY+PjJdPWg7Zm9yKGg9MDtoPGQubGVuZ3RoOysraCl1KGQuY2hhckNvZGVBdChoKT09PShkLmNoYXJDb2RlQXQoaCkmMjU1KSksRVtmKys+PjBdPWQuY2hhckNvZGVBdChoKTtFW2Y+PjBdPTA7Yys9ZC5sZW5ndGgrMTt9KTtyZXR1cm4gMH0sZW52aXJvbl9zaXplc19nZXQ6KGEsYik9Pnt2YXIgYz1iYygpO0dbYT4+Ml09Yy5sZW5ndGg7dmFyIGQ9MDtjLmZvckVhY2goZj0+ZCs9Zi5sZW5ndGgrMSk7R1tiPj4yXT1kO3JldHVybiAwfSxleGl0OmE9PnttYygpO3NhPSEwO2VhKGEsbmV3IHBhKGEpKTt9LGZkX2Nsb3NlOmZ1bmN0aW9uKGEpe3RyeXt2YXIgYj1XKGEpO1IuY2xvc2UoYik7XG4gICAgcmV0dXJuIDB9Y2F0Y2goYyl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJ8fFwiRXJybm9FcnJvclwiIT09Yy5uYW1lKXRocm93IGM7cmV0dXJuIGMudX19LGZkX3JlYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dHJ5e2E6e3ZhciBmPVcoYSk7YT1iO2Zvcih2YXIgaCxtPWI9MDttPGM7bSsrKXt2YXIgcD1HW2E+PjJdLHk9R1thKzQ+PjJdO2ErPTg7dmFyIHE9Ui5yZWFkKGYsRSxwLHksaCk7aWYoMD5xKXt2YXIgeD0tMTticmVhayBhfWIrPXE7aWYocTx5KWJyZWFrO1widW5kZWZpbmVkXCIhPT10eXBlb2YgaCYmKGgrPXEpO314PWI7fUdbZD4+Ml09eDtyZXR1cm4gMH1jYXRjaCh0KXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUnx8XCJFcnJub0Vycm9yXCIhPT10Lm5hbWUpdGhyb3cgdDtyZXR1cm4gdC51fX0sZmRfc2VlazpmdW5jdGlvbihhLGIsYyxkKXtiPS05MDA3MTk5MjU0NzQwOTkyPmJ8fDkwMDcxOTkyNTQ3NDA5OTI8Yj9OYU46TnVtYmVyKGIpO3RyeXtpZihpc05hTihiKSlyZXR1cm4gNjE7dmFyIGY9XG4gICAgVyhhKTtSLkQoZixiLGMpO3dhW2Q+PjNdPUJpZ0ludChmLnBvc2l0aW9uKTtmLmVhJiYwPT09YiYmMD09PWMmJihmLmVhPW51bGwpO3JldHVybiAwfWNhdGNoKGgpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSfHxcIkVycm5vRXJyb3JcIiE9PWgubmFtZSl0aHJvdyBoO3JldHVybiBoLnV9fSxmZF93cml0ZTpmdW5jdGlvbihhLGIsYyxkKXt0cnl7YTp7dmFyIGY9VyhhKTthPWI7Zm9yKHZhciBoLG09Yj0wO208YzttKyspe3ZhciBwPUdbYT4+Ml0seT1HW2ErND4+Ml07YSs9ODt2YXIgcT1SLndyaXRlKGYsRSxwLHksaCk7aWYoMD5xKXt2YXIgeD0tMTticmVhayBhfWIrPXE7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBoJiYoaCs9cSk7fXg9Yjt9R1tkPj4yXT14O3JldHVybiAwfWNhdGNoKHQpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSfHxcIkVycm5vRXJyb3JcIiE9PXQubmFtZSl0aHJvdyB0O3JldHVybiB0LnV9fSxpbnZva2VfdmlpOm5jLHN0cmZ0aW1lOihhLGIsYyxkKT0+e2Z1bmN0aW9uIGYobCxcbiAgICB3LHYpe2ZvcihsPVwibnVtYmVyXCI9PXR5cGVvZiBsP2wudG9TdHJpbmcoKTpsfHxcIlwiO2wubGVuZ3RoPHc7KWw9dlswXStsO3JldHVybiBsfWZ1bmN0aW9uIGgobCx3KXtyZXR1cm4gZihsLHcsXCIwXCIpfWZ1bmN0aW9uIG0obCx3KXtmdW5jdGlvbiB2KEgpe3JldHVybiAwPkg/LTE6MDxIPzE6MH12YXIgQTswPT09KEE9dihsLmdldEZ1bGxZZWFyKCktdy5nZXRGdWxsWWVhcigpKSkmJjA9PT0oQT12KGwuZ2V0TW9udGgoKS13LmdldE1vbnRoKCkpKSYmKEE9dihsLmdldERhdGUoKS13LmdldERhdGUoKSkpO3JldHVybiBBfWZ1bmN0aW9uIHAobCl7c3dpdGNoKGwuZ2V0RGF5KCkpe2Nhc2UgMDpyZXR1cm4gbmV3IERhdGUobC5nZXRGdWxsWWVhcigpLTEsMTEsMjkpO2Nhc2UgMTpyZXR1cm4gbDtjYXNlIDI6cmV0dXJuIG5ldyBEYXRlKGwuZ2V0RnVsbFllYXIoKSwwLDMpO2Nhc2UgMzpyZXR1cm4gbmV3IERhdGUobC5nZXRGdWxsWWVhcigpLDAsMik7Y2FzZSA0OnJldHVybiBuZXcgRGF0ZShsLmdldEZ1bGxZZWFyKCksXG4gICAgMCwxKTtjYXNlIDU6cmV0dXJuIG5ldyBEYXRlKGwuZ2V0RnVsbFllYXIoKS0xLDExLDMxKTtjYXNlIDY6cmV0dXJuIG5ldyBEYXRlKGwuZ2V0RnVsbFllYXIoKS0xLDExLDMwKX19ZnVuY3Rpb24geShsKXt2YXIgdz1sLk87Zm9yKGw9bmV3IERhdGUoKG5ldyBEYXRlKGwuUCsxOTAwLDAsMSkpLmdldFRpbWUoKSk7MDx3Oyl7dmFyIHY9bC5nZXRNb250aCgpLEE9KFZiKGwuZ2V0RnVsbFllYXIoKSk/Y2M6ZGMpW3ZdO2lmKHc+QS1sLmdldERhdGUoKSl3LT1BLWwuZ2V0RGF0ZSgpKzEsbC5zZXREYXRlKDEpLDExPnY/bC5zZXRNb250aCh2KzEpOihsLnNldE1vbnRoKDApLGwuc2V0RnVsbFllYXIobC5nZXRGdWxsWWVhcigpKzEpKTtlbHNlIHtsLnNldERhdGUobC5nZXREYXRlKCkrdyk7YnJlYWt9fXY9bmV3IERhdGUobC5nZXRGdWxsWWVhcigpKzEsMCw0KTt3PXAobmV3IERhdGUobC5nZXRGdWxsWWVhcigpLDAsNCkpO3Y9cCh2KTtyZXR1cm4gMD49bSh3LGwpPzA+PW0odixsKT9sLmdldEZ1bGxZZWFyKCkrXG4gICAgMTpsLmdldEZ1bGxZZWFyKCk6bC5nZXRGdWxsWWVhcigpLTF9dmFyIHE9R1tkKzQwPj4yXTtkPXtWYTpGW2Q+PjJdLFVhOkZbZCs0Pj4yXSwkOkZbZCs4Pj4yXSxsYTpGW2QrMTI+PjJdLGFhOkZbZCsxNj4+Ml0sUDpGW2QrMjA+PjJdLEg6RltkKzI0Pj4yXSxPOkZbZCsyOD4+Ml0sd2I6RltkKzMyPj4yXSxUYTpGW2QrMzY+PjJdLFdhOnE/WChxKTpcIlwifTtjPVgoYyk7cT17XCIlY1wiOlwiJWEgJWIgJWQgJUg6JU06JVMgJVlcIixcIiVEXCI6XCIlbS8lZC8leVwiLFwiJUZcIjpcIiVZLSVtLSVkXCIsXCIlaFwiOlwiJWJcIixcIiVyXCI6XCIlSTolTTolUyAlcFwiLFwiJVJcIjpcIiVIOiVNXCIsXCIlVFwiOlwiJUg6JU06JVNcIixcIiV4XCI6XCIlbS8lZC8leVwiLFwiJVhcIjpcIiVIOiVNOiVTXCIsXCIlRWNcIjpcIiVjXCIsXCIlRUNcIjpcIiVDXCIsXCIlRXhcIjpcIiVtLyVkLyV5XCIsXCIlRVhcIjpcIiVIOiVNOiVTXCIsXCIlRXlcIjpcIiV5XCIsXCIlRVlcIjpcIiVZXCIsXCIlT2RcIjpcIiVkXCIsXCIlT2VcIjpcIiVlXCIsXCIlT0hcIjpcIiVIXCIsXCIlT0lcIjpcIiVJXCIsXCIlT21cIjpcIiVtXCIsXCIlT01cIjpcIiVNXCIsXG4gICAgXCIlT1NcIjpcIiVTXCIsXCIlT3VcIjpcIiV1XCIsXCIlT1VcIjpcIiVVXCIsXCIlT1ZcIjpcIiVWXCIsXCIlT3dcIjpcIiV3XCIsXCIlT1dcIjpcIiVXXCIsXCIlT3lcIjpcIiV5XCJ9O2Zvcih2YXIgeCBpbiBxKWM9Yy5yZXBsYWNlKG5ldyBSZWdFeHAoeCxcImdcIikscVt4XSk7dmFyIHQ9XCJTdW5kYXkgTW9uZGF5IFR1ZXNkYXkgV2VkbmVzZGF5IFRodXJzZGF5IEZyaWRheSBTYXR1cmRheVwiLnNwbGl0KFwiIFwiKSxCPVwiSmFudWFyeSBGZWJydWFyeSBNYXJjaCBBcHJpbCBNYXkgSnVuZSBKdWx5IEF1Z3VzdCBTZXB0ZW1iZXIgT2N0b2JlciBOb3ZlbWJlciBEZWNlbWJlclwiLnNwbGl0KFwiIFwiKTtxPXtcIiVhXCI6bD0+dFtsLkhdLnN1YnN0cmluZygwLDMpLFwiJUFcIjpsPT50W2wuSF0sXCIlYlwiOmw9PkJbbC5hYV0uc3Vic3RyaW5nKDAsMyksXCIlQlwiOmw9PkJbbC5hYV0sXCIlQ1wiOmw9PmgoKGwuUCsxOTAwKS8xMDB8MCwyKSxcIiVkXCI6bD0+aChsLmxhLDIpLFwiJWVcIjpsPT5mKGwubGEsMixcIiBcIiksXCIlZ1wiOmw9PnkobCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXG4gICAgXCIlR1wiOmw9PnkobCksXCIlSFwiOmw9PmgobC4kLDIpLFwiJUlcIjpsPT57bD1sLiQ7MD09bD9sPTEyOjEyPGwmJihsLT0xMik7cmV0dXJuIGgobCwyKX0sXCIlalwiOmw9Pntmb3IodmFyIHc9MCx2PTA7djw9bC5hYS0xO3crPShWYihsLlArMTkwMCk/Y2M6ZGMpW3YrK10pO3JldHVybiBoKGwubGErdywzKX0sXCIlbVwiOmw9PmgobC5hYSsxLDIpLFwiJU1cIjpsPT5oKGwuVWEsMiksXCIlblwiOigpPT5cIlxcblwiLFwiJXBcIjpsPT4wPD1sLiQmJjEyPmwuJD9cIkFNXCI6XCJQTVwiLFwiJVNcIjpsPT5oKGwuVmEsMiksXCIldFwiOigpPT5cIlxcdFwiLFwiJXVcIjpsPT5sLkh8fDcsXCIlVVwiOmw9PmgoTWF0aC5mbG9vcigobC5PKzctbC5IKS83KSwyKSxcIiVWXCI6bD0+e3ZhciB3PU1hdGguZmxvb3IoKGwuTys3LShsLkgrNiklNykvNyk7Mj49KGwuSCszNzEtbC5PLTIpJTcmJncrKztpZih3KTUzPT13JiYodj0obC5IKzM3MS1sLk8pJTcsND09dnx8Mz09diYmVmIobC5QKXx8KHc9MSkpO2Vsc2Uge3c9NTI7dmFyIHY9KGwuSCs3LWwuTy0xKSVcbiAgICA3Oyg0PT12fHw1PT12JiZWYihsLlAlNDAwLTEpKSYmdysrO31yZXR1cm4gaCh3LDIpfSxcIiV3XCI6bD0+bC5ILFwiJVdcIjpsPT5oKE1hdGguZmxvb3IoKGwuTys3LShsLkgrNiklNykvNyksMiksXCIleVwiOmw9PihsLlArMTkwMCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXCIlWVwiOmw9PmwuUCsxOTAwLFwiJXpcIjpsPT57bD1sLlRhO3ZhciB3PTA8PWw7bD1NYXRoLmFicyhsKS82MDtyZXR1cm4gKHc/XCIrXCI6XCItXCIpK1N0cmluZyhcIjAwMDBcIisobC82MCoxMDArbCU2MCkpLnNsaWNlKC00KX0sXCIlWlwiOmw9PmwuV2EsXCIlJVwiOigpPT5cIiVcIn07Yz1jLnJlcGxhY2UoLyUlL2csXCJcXHgwMFxceDAwXCIpO2Zvcih4IGluIHEpYy5pbmNsdWRlcyh4KSYmKGM9Yy5yZXBsYWNlKG5ldyBSZWdFeHAoeCxcImdcIikscVt4XShkKSkpO2M9Yy5yZXBsYWNlKC9cXDBcXDAvZyxcIiVcIik7eD1sYihjLCExKTtpZih4Lmxlbmd0aD5iKXJldHVybiAwO2VjKHgsYSk7cmV0dXJuIHgubGVuZ3RoLTF9LHN5c3RlbTphPT57aWYobil7aWYoIWEpcmV0dXJuIDE7XG4gICAgYT1YKGEpO2lmKCFhLmxlbmd0aClyZXR1cm4gMDthPXJlcXVpcmUkMShcImNoaWxkX3Byb2Nlc3NcIikudWIoYSxbXSx7dGI6ITAsc3RkaW86XCJpbmhlcml0XCJ9KTt2YXIgYj0oYyxkKT0+Yzw8OHxkO3JldHVybiBudWxsPT09YS5zdGF0dXM/YigwLChjPT57c3dpdGNoKGMpe2Nhc2UgXCJTSUdIVVBcIjpyZXR1cm4gMTtjYXNlIFwiU0lHUVVJVFwiOnJldHVybiAzO2Nhc2UgXCJTSUdGUEVcIjpyZXR1cm4gODtjYXNlIFwiU0lHS0lMTFwiOnJldHVybiA5O2Nhc2UgXCJTSUdBTFJNXCI6cmV0dXJuIDE0O2Nhc2UgXCJTSUdURVJNXCI6cmV0dXJuIDE1fXJldHVybiAyfSkoYS5zaWduYWwpKTphLnN0YXR1czw8OHwwfWlmKCFhKXJldHVybiAwO0ZbbGMoKT4+Ml09NTI7cmV0dXJuIC0xfX0sTD1mdW5jdGlvbigpe3ZhciBhPXtlbnY6b2Msd2FzaV9zbmFwc2hvdF9wcmV2aWV3MTpvY307TWEoXCJ3YXNtLWluc3RhbnRpYXRlXCIpO3ZhciBiPWU7VGEoYSxmdW5jdGlvbihjKXt1KGU9PT1iLFwidGhlIE1vZHVsZSBvYmplY3Qgc2hvdWxkIG5vdCBiZSByZXBsYWNlZCBkdXJpbmcgYXN5bmMgY29tcGlsYXRpb24gLSBwZXJoYXBzIHRoZSBvcmRlciBvZiBIVE1MIGVsZW1lbnRzIGlzIHdyb25nP1wiKTtcbiAgICBiPW51bGw7TD1jLmluc3RhbmNlLmV4cG9ydHM7cmE9TC5tZW1vcnk7dShyYSxcIm1lbW9yeSBub3QgZm91bmQgaW4gd2FzbSBleHBvcnRzXCIpO3lhKCk7Wj1MLl9faW5kaXJlY3RfZnVuY3Rpb25fdGFibGU7dShaLFwidGFibGUgbm90IGZvdW5kIGluIHdhc20gZXhwb3J0c1wiKTtGYS51bnNoaWZ0KEwuX193YXNtX2NhbGxfY3RvcnMpO05hKFwid2FzbS1pbnN0YW50aWF0ZVwiKTt9KS5jYXRjaChiYSk7cmV0dXJuIHt9fSgpO2UuX2x1YV9jaGVja3N0YWNrPUooXCJsdWFfY2hlY2tzdGFja1wiKTtlLl9sdWFfeG1vdmU9SihcImx1YV94bW92ZVwiKTtlLl9sdWFfYXRwYW5pYz1KKFwibHVhX2F0cGFuaWNcIik7ZS5fbHVhX3ZlcnNpb249SihcImx1YV92ZXJzaW9uXCIpO2UuX2x1YV9hYnNpbmRleD1KKFwibHVhX2Fic2luZGV4XCIpO2UuX2x1YV9nZXR0b3A9SihcImx1YV9nZXR0b3BcIik7ZS5fbHVhX3NldHRvcD1KKFwibHVhX3NldHRvcFwiKTtlLl9sdWFfY2xvc2VzbG90PUooXCJsdWFfY2xvc2VzbG90XCIpO1xuICAgIGUuX2x1YV9yb3RhdGU9SihcImx1YV9yb3RhdGVcIik7ZS5fbHVhX2NvcHk9SihcImx1YV9jb3B5XCIpO2UuX2x1YV9wdXNodmFsdWU9SihcImx1YV9wdXNodmFsdWVcIik7ZS5fbHVhX3R5cGU9SihcImx1YV90eXBlXCIpO2UuX2x1YV90eXBlbmFtZT1KKFwibHVhX3R5cGVuYW1lXCIpO2UuX2x1YV9pc2NmdW5jdGlvbj1KKFwibHVhX2lzY2Z1bmN0aW9uXCIpO2UuX2x1YV9pc2ludGVnZXI9SihcImx1YV9pc2ludGVnZXJcIik7ZS5fbHVhX2lzbnVtYmVyPUooXCJsdWFfaXNudW1iZXJcIik7ZS5fbHVhX2lzc3RyaW5nPUooXCJsdWFfaXNzdHJpbmdcIik7ZS5fbHVhX2lzdXNlcmRhdGE9SihcImx1YV9pc3VzZXJkYXRhXCIpO2UuX2x1YV9yYXdlcXVhbD1KKFwibHVhX3Jhd2VxdWFsXCIpO2UuX2x1YV9hcml0aD1KKFwibHVhX2FyaXRoXCIpO2UuX2x1YV9jb21wYXJlPUooXCJsdWFfY29tcGFyZVwiKTtlLl9sdWFfc3RyaW5ndG9udW1iZXI9SihcImx1YV9zdHJpbmd0b251bWJlclwiKTtlLl9sdWFfdG9udW1iZXJ4PUooXCJsdWFfdG9udW1iZXJ4XCIpO1xuICAgIGUuX2x1YV90b2ludGVnZXJ4PUooXCJsdWFfdG9pbnRlZ2VyeFwiKTtlLl9sdWFfdG9ib29sZWFuPUooXCJsdWFfdG9ib29sZWFuXCIpO2UuX2x1YV90b2xzdHJpbmc9SihcImx1YV90b2xzdHJpbmdcIik7ZS5fbHVhX3Jhd2xlbj1KKFwibHVhX3Jhd2xlblwiKTtlLl9sdWFfdG9jZnVuY3Rpb249SihcImx1YV90b2NmdW5jdGlvblwiKTtlLl9sdWFfdG91c2VyZGF0YT1KKFwibHVhX3RvdXNlcmRhdGFcIik7ZS5fbHVhX3RvdGhyZWFkPUooXCJsdWFfdG90aHJlYWRcIik7ZS5fbHVhX3RvcG9pbnRlcj1KKFwibHVhX3RvcG9pbnRlclwiKTtlLl9sdWFfcHVzaG5pbD1KKFwibHVhX3B1c2huaWxcIik7ZS5fbHVhX3B1c2hudW1iZXI9SihcImx1YV9wdXNobnVtYmVyXCIpO2UuX2x1YV9wdXNoaW50ZWdlcj1KKFwibHVhX3B1c2hpbnRlZ2VyXCIpO2UuX2x1YV9wdXNobHN0cmluZz1KKFwibHVhX3B1c2hsc3RyaW5nXCIpO2UuX2x1YV9wdXNoc3RyaW5nPUooXCJsdWFfcHVzaHN0cmluZ1wiKTtlLl9sdWFfcHVzaGNjbG9zdXJlPUooXCJsdWFfcHVzaGNjbG9zdXJlXCIpO1xuICAgIGUuX2x1YV9wdXNoYm9vbGVhbj1KKFwibHVhX3B1c2hib29sZWFuXCIpO2UuX2x1YV9wdXNobGlnaHR1c2VyZGF0YT1KKFwibHVhX3B1c2hsaWdodHVzZXJkYXRhXCIpO2UuX2x1YV9wdXNodGhyZWFkPUooXCJsdWFfcHVzaHRocmVhZFwiKTtlLl9sdWFfZ2V0Z2xvYmFsPUooXCJsdWFfZ2V0Z2xvYmFsXCIpO2UuX2x1YV9nZXR0YWJsZT1KKFwibHVhX2dldHRhYmxlXCIpO2UuX2x1YV9nZXRmaWVsZD1KKFwibHVhX2dldGZpZWxkXCIpO2UuX2x1YV9nZXRpPUooXCJsdWFfZ2V0aVwiKTtlLl9sdWFfcmF3Z2V0PUooXCJsdWFfcmF3Z2V0XCIpO2UuX2x1YV9yYXdnZXRpPUooXCJsdWFfcmF3Z2V0aVwiKTtlLl9sdWFfcmF3Z2V0cD1KKFwibHVhX3Jhd2dldHBcIik7ZS5fbHVhX2NyZWF0ZXRhYmxlPUooXCJsdWFfY3JlYXRldGFibGVcIik7ZS5fbHVhX2dldG1ldGF0YWJsZT1KKFwibHVhX2dldG1ldGF0YWJsZVwiKTtlLl9sdWFfZ2V0aXVzZXJ2YWx1ZT1KKFwibHVhX2dldGl1c2VydmFsdWVcIik7ZS5fbHVhX3NldGdsb2JhbD1KKFwibHVhX3NldGdsb2JhbFwiKTtcbiAgICBlLl9sdWFfc2V0dGFibGU9SihcImx1YV9zZXR0YWJsZVwiKTtlLl9sdWFfc2V0ZmllbGQ9SihcImx1YV9zZXRmaWVsZFwiKTtlLl9sdWFfc2V0aT1KKFwibHVhX3NldGlcIik7ZS5fbHVhX3Jhd3NldD1KKFwibHVhX3Jhd3NldFwiKTtlLl9sdWFfcmF3c2V0cD1KKFwibHVhX3Jhd3NldHBcIik7ZS5fbHVhX3Jhd3NldGk9SihcImx1YV9yYXdzZXRpXCIpO2UuX2x1YV9zZXRtZXRhdGFibGU9SihcImx1YV9zZXRtZXRhdGFibGVcIik7ZS5fbHVhX3NldGl1c2VydmFsdWU9SihcImx1YV9zZXRpdXNlcnZhbHVlXCIpO2UuX2x1YV9jYWxsaz1KKFwibHVhX2NhbGxrXCIpO2UuX2x1YV9wY2FsbGs9SihcImx1YV9wY2FsbGtcIik7ZS5fbHVhX2xvYWQ9SihcImx1YV9sb2FkXCIpO2UuX2x1YV9kdW1wPUooXCJsdWFfZHVtcFwiKTtlLl9sdWFfc3RhdHVzPUooXCJsdWFfc3RhdHVzXCIpO2UuX2x1YV9lcnJvcj1KKFwibHVhX2Vycm9yXCIpO2UuX2x1YV9uZXh0PUooXCJsdWFfbmV4dFwiKTtlLl9sdWFfdG9jbG9zZT1KKFwibHVhX3RvY2xvc2VcIik7XG4gICAgZS5fbHVhX2NvbmNhdD1KKFwibHVhX2NvbmNhdFwiKTtlLl9sdWFfbGVuPUooXCJsdWFfbGVuXCIpO2UuX2x1YV9nZXRhbGxvY2Y9SihcImx1YV9nZXRhbGxvY2ZcIik7ZS5fbHVhX3NldGFsbG9jZj1KKFwibHVhX3NldGFsbG9jZlwiKTtlLl9sdWFfc2V0d2FybmY9SihcImx1YV9zZXR3YXJuZlwiKTtlLl9sdWFfd2FybmluZz1KKFwibHVhX3dhcm5pbmdcIik7ZS5fbHVhX25ld3VzZXJkYXRhdXY9SihcImx1YV9uZXd1c2VyZGF0YXV2XCIpO2UuX2x1YV9nZXR1cHZhbHVlPUooXCJsdWFfZ2V0dXB2YWx1ZVwiKTtlLl9sdWFfc2V0dXB2YWx1ZT1KKFwibHVhX3NldHVwdmFsdWVcIik7ZS5fbHVhX3VwdmFsdWVpZD1KKFwibHVhX3VwdmFsdWVpZFwiKTtlLl9sdWFfdXB2YWx1ZWpvaW49SihcImx1YV91cHZhbHVlam9pblwiKTtlLl9sdWFMX3RyYWNlYmFjaz1KKFwibHVhTF90cmFjZWJhY2tcIik7ZS5fbHVhX2dldHN0YWNrPUooXCJsdWFfZ2V0c3RhY2tcIik7ZS5fbHVhX2dldGluZm89SihcImx1YV9nZXRpbmZvXCIpO1xuICAgIGUuX2x1YUxfYnVmZmluaXQ9SihcImx1YUxfYnVmZmluaXRcIik7ZS5fbHVhTF9hZGRzdHJpbmc9SihcImx1YUxfYWRkc3RyaW5nXCIpO2UuX2x1YUxfcHJlcGJ1ZmZzaXplPUooXCJsdWFMX3ByZXBidWZmc2l6ZVwiKTtlLl9sdWFMX2FkZHZhbHVlPUooXCJsdWFMX2FkZHZhbHVlXCIpO2UuX2x1YUxfcHVzaHJlc3VsdD1KKFwibHVhTF9wdXNocmVzdWx0XCIpO2UuX2x1YUxfYXJnZXJyb3I9SihcImx1YUxfYXJnZXJyb3JcIik7ZS5fbHVhTF90eXBlZXJyb3I9SihcImx1YUxfdHlwZWVycm9yXCIpO2UuX2x1YUxfZ2V0bWV0YWZpZWxkPUooXCJsdWFMX2dldG1ldGFmaWVsZFwiKTtlLl9sdWFMX3doZXJlPUooXCJsdWFMX3doZXJlXCIpO2UuX2x1YUxfZmlsZXJlc3VsdD1KKFwibHVhTF9maWxlcmVzdWx0XCIpO3ZhciBsYz1KKFwiX19lcnJub19sb2NhdGlvblwiKTtlLl9sdWFMX2V4ZWNyZXN1bHQ9SihcImx1YUxfZXhlY3Jlc3VsdFwiKTtlLl9sdWFMX25ld21ldGF0YWJsZT1KKFwibHVhTF9uZXdtZXRhdGFibGVcIik7XG4gICAgZS5fbHVhTF9zZXRtZXRhdGFibGU9SihcImx1YUxfc2V0bWV0YXRhYmxlXCIpO2UuX2x1YUxfdGVzdHVkYXRhPUooXCJsdWFMX3Rlc3R1ZGF0YVwiKTtlLl9sdWFMX2NoZWNrdWRhdGE9SihcImx1YUxfY2hlY2t1ZGF0YVwiKTtlLl9sdWFMX29wdGxzdHJpbmc9SihcImx1YUxfb3B0bHN0cmluZ1wiKTtlLl9sdWFMX2NoZWNrbHN0cmluZz1KKFwibHVhTF9jaGVja2xzdHJpbmdcIik7ZS5fbHVhTF9jaGVja3N0YWNrPUooXCJsdWFMX2NoZWNrc3RhY2tcIik7ZS5fbHVhTF9jaGVja3R5cGU9SihcImx1YUxfY2hlY2t0eXBlXCIpO2UuX2x1YUxfY2hlY2thbnk9SihcImx1YUxfY2hlY2thbnlcIik7ZS5fbHVhTF9jaGVja251bWJlcj1KKFwibHVhTF9jaGVja251bWJlclwiKTtlLl9sdWFMX29wdG51bWJlcj1KKFwibHVhTF9vcHRudW1iZXJcIik7ZS5fbHVhTF9jaGVja2ludGVnZXI9SihcImx1YUxfY2hlY2tpbnRlZ2VyXCIpO2UuX2x1YUxfb3B0aW50ZWdlcj1KKFwibHVhTF9vcHRpbnRlZ2VyXCIpO1xuICAgIGUuX2x1YUxfc2V0ZnVuY3M9SihcImx1YUxfc2V0ZnVuY3NcIik7ZS5fbHVhTF9hZGRsc3RyaW5nPUooXCJsdWFMX2FkZGxzdHJpbmdcIik7ZS5fbHVhTF9wdXNocmVzdWx0c2l6ZT1KKFwibHVhTF9wdXNocmVzdWx0c2l6ZVwiKTtlLl9sdWFMX2J1ZmZpbml0c2l6ZT1KKFwibHVhTF9idWZmaW5pdHNpemVcIik7ZS5fbHVhTF9yZWY9SihcImx1YUxfcmVmXCIpO2UuX2x1YUxfdW5yZWY9SihcImx1YUxfdW5yZWZcIik7ZS5fbHVhTF9sb2FkZmlsZXg9SihcImx1YUxfbG9hZGZpbGV4XCIpO2UuX2x1YUxfbG9hZGJ1ZmZlcng9SihcImx1YUxfbG9hZGJ1ZmZlcnhcIik7ZS5fbHVhTF9sb2Fkc3RyaW5nPUooXCJsdWFMX2xvYWRzdHJpbmdcIik7ZS5fbHVhTF9jYWxsbWV0YT1KKFwibHVhTF9jYWxsbWV0YVwiKTtlLl9sdWFMX2xlbj1KKFwibHVhTF9sZW5cIik7ZS5fbHVhTF90b2xzdHJpbmc9SihcImx1YUxfdG9sc3RyaW5nXCIpO2UuX2x1YUxfZ2V0c3VidGFibGU9SihcImx1YUxfZ2V0c3VidGFibGVcIik7XG4gICAgZS5fbHVhTF9yZXF1aXJlZj1KKFwibHVhTF9yZXF1aXJlZlwiKTtlLl9sdWFMX2FkZGdzdWI9SihcImx1YUxfYWRkZ3N1YlwiKTtlLl9sdWFMX2dzdWI9SihcImx1YUxfZ3N1YlwiKTtlLl9sdWFMX25ld3N0YXRlPUooXCJsdWFMX25ld3N0YXRlXCIpO2UuX2x1YV9uZXdzdGF0ZT1KKFwibHVhX25ld3N0YXRlXCIpO2UuX2ZyZWU9SihcImZyZWVcIik7ZS5fcmVhbGxvYz1KKFwicmVhbGxvY1wiKTt2YXIgUmI9ZS5fZmZsdXNoPUooXCJmZmx1c2hcIik7ZS5fbHVhTF9jaGVja3ZlcnNpb25fPUooXCJsdWFMX2NoZWNrdmVyc2lvbl9cIik7ZS5fbHVhb3Blbl9iYXNlPUooXCJsdWFvcGVuX2Jhc2VcIik7ZS5fbHVhb3Blbl9jb3JvdXRpbmU9SihcImx1YW9wZW5fY29yb3V0aW5lXCIpO2UuX2x1YV9uZXd0aHJlYWQ9SihcImx1YV9uZXd0aHJlYWRcIik7ZS5fbHVhX3lpZWxkaz1KKFwibHVhX3lpZWxka1wiKTtlLl9sdWFfaXN5aWVsZGFibGU9SihcImx1YV9pc3lpZWxkYWJsZVwiKTtlLl9sdWFfcmVzZXR0aHJlYWQ9SihcImx1YV9yZXNldHRocmVhZFwiKTtcbiAgICBlLl9sdWFfcmVzdW1lPUooXCJsdWFfcmVzdW1lXCIpO2UuX2x1YW9wZW5fZGVidWc9SihcImx1YW9wZW5fZGVidWdcIik7ZS5fbHVhX2dldGhvb2ttYXNrPUooXCJsdWFfZ2V0aG9va21hc2tcIik7ZS5fbHVhX2dldGhvb2s9SihcImx1YV9nZXRob29rXCIpO2UuX2x1YV9nZXRob29rY291bnQ9SihcImx1YV9nZXRob29rY291bnRcIik7ZS5fbHVhX2dldGxvY2FsPUooXCJsdWFfZ2V0bG9jYWxcIik7ZS5fbHVhX3NldGhvb2s9SihcImx1YV9zZXRob29rXCIpO2UuX2x1YV9zZXRsb2NhbD1KKFwibHVhX3NldGxvY2FsXCIpO2UuX2x1YV9zZXRjc3RhY2tsaW1pdD1KKFwibHVhX3NldGNzdGFja2xpbWl0XCIpO3ZhciBZYj1lLl9tYWxsb2M9SihcIm1hbGxvY1wiKTtlLl9sdWFMX29wZW5saWJzPUooXCJsdWFMX29wZW5saWJzXCIpO2UuX2x1YW9wZW5fcGFja2FnZT1KKFwibHVhb3Blbl9wYWNrYWdlXCIpO2UuX2x1YW9wZW5fdGFibGU9SihcImx1YW9wZW5fdGFibGVcIik7ZS5fbHVhb3Blbl9pbz1KKFwibHVhb3Blbl9pb1wiKTtcbiAgICBlLl9sdWFvcGVuX29zPUooXCJsdWFvcGVuX29zXCIpO2UuX2x1YW9wZW5fc3RyaW5nPUooXCJsdWFvcGVuX3N0cmluZ1wiKTtlLl9sdWFvcGVuX21hdGg9SihcImx1YW9wZW5fbWF0aFwiKTtlLl9sdWFvcGVuX3V0Zjg9SihcImx1YW9wZW5fdXRmOFwiKTtlLl9sdWFfY2xvc2U9SihcImx1YV9jbG9zZVwiKTt2YXIgcGM9SihcInNldFRocmV3XCIpLHFjPSgpPT4ocWM9TC5lbXNjcmlwdGVuX3N0YWNrX2luaXQpKCksQWE9KCk9PihBYT1MLmVtc2NyaXB0ZW5fc3RhY2tfZ2V0X2VuZCkoKSxyYz1KKFwic3RhY2tTYXZlXCIpLHNjPUooXCJzdGFja1Jlc3RvcmVcIiksdGM9SihcInN0YWNrQWxsb2NcIik7ZnVuY3Rpb24gbmMoYSxiLGMpe3ZhciBkPXJjKCk7dHJ5e2djKGEpKGIsYyk7fWNhdGNoKGYpe3NjKGQpO2lmKGYhPT1mKzApdGhyb3cgZjtwYygxLDApO319ZS5FTlY9JGI7XG4gICAgZS5jY2FsbD0oYSxiLGMsZCk9Pnt2YXIgZj17c3RyaW5nOnE9Pnt2YXIgeD0wO2lmKG51bGwhPT1xJiZ2b2lkIDAhPT1xJiYwIT09cSl7eD1qYihxKSsxO3ZhciB0PXRjKHgpO1ViKHEsdCx4KTt4PXQ7fXJldHVybiB4fSxhcnJheTpxPT57dmFyIHg9dGMocS5sZW5ndGgpO2VjKHEseCk7cmV0dXJuIHh9fTthPWhjKGEpO3ZhciBoPVtdLG09MDt1KFwiYXJyYXlcIiE9PWIsJ1JldHVybiB0eXBlIHNob3VsZCBub3QgYmUgXCJhcnJheVwiLicpO2lmKGQpZm9yKHZhciBwPTA7cDxkLmxlbmd0aDtwKyspe3ZhciB5PWZbY1twXV07eT8oMD09PW0mJihtPXJjKCkpLGhbcF09eShkW3BdKSk6aFtwXT1kW3BdO31jPWEuYXBwbHkobnVsbCxoKTtyZXR1cm4gYz1mdW5jdGlvbihxKXswIT09bSYmc2MobSk7cmV0dXJuIFwic3RyaW5nXCI9PT1iP1gocSk6XCJib29sZWFuXCI9PT1iPyEhcTpxfShjKX07XG4gICAgZS5hZGRGdW5jdGlvbj0oYSxiKT0+e3UoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEpO2lmKCFpYyl7aWM9bmV3IFdlYWtNYXA7dmFyIGM9Wi5sZW5ndGg7aWYoaWMpZm9yKHZhciBkPTA7ZDwwK2M7ZCsrKXt2YXIgZj1nYyhkKTtmJiZpYy5zZXQoZixkKTt9fWlmKGM9aWMuZ2V0KGEpfHwwKXJldHVybiBjO2lmKGpjLmxlbmd0aCljPWpjLnBvcCgpO2Vsc2Uge3RyeXtaLmdyb3coMSk7fWNhdGNoKHApe2lmKCEocCBpbnN0YW5jZW9mIFJhbmdlRXJyb3IpKXRocm93IHA7dGhyb3cgXCJVbmFibGUgdG8gZ3JvdyB3YXNtIHRhYmxlLiBTZXQgQUxMT1dfVEFCTEVfR1JPV1RILlwiO31jPVoubGVuZ3RoLTE7fXRyeXtkPWMsWi5zZXQoZCxhKSxmY1tkXT1aLmdldChkKTt9Y2F0Y2gocCl7aWYoIShwIGluc3RhbmNlb2YgVHlwZUVycm9yKSl0aHJvdyBwO3UoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIsXCJNaXNzaW5nIHNpZ25hdHVyZSBhcmd1bWVudCB0byBhZGRGdW5jdGlvbjogXCIrYSk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgV2ViQXNzZW1ibHkuRnVuY3Rpb24pe2Q9XG4gICAgV2ViQXNzZW1ibHkuRnVuY3Rpb247Zj17aTpcImkzMlwiLGo6XCJpNjRcIixmOlwiZjMyXCIsZDpcImY2NFwiLGU6XCJleHRlcm5yZWZcIixwOlwiaTMyXCJ9O2Zvcih2YXIgaD17cGFyYW1ldGVyczpbXSxyZXN1bHRzOlwidlwiPT1iWzBdP1tdOltmW2JbMF1dXX0sbT0xO208Yi5sZW5ndGg7KyttKXUoYlttXWluIGYsXCJpbnZhbGlkIHNpZ25hdHVyZSBjaGFyOiBcIitiW21dKSxoLnBhcmFtZXRlcnMucHVzaChmW2JbbV1dKTtiPW5ldyBkKGgsYSk7fWVsc2Uge2Q9WzFdO2Y9Yi5zbGljZSgwLDEpO2I9Yi5zbGljZSgxKTtoPXtpOjEyNyxwOjEyNyxqOjEyNixmOjEyNSxkOjEyNCxlOjExMX07ZC5wdXNoKDk2KTttPWIubGVuZ3RoO3UoMTYzODQ+bSk7MTI4Pm0/ZC5wdXNoKG0pOmQucHVzaChtJTEyOHwxMjgsbT4+Nyk7Zm9yKG09MDttPGIubGVuZ3RoOysrbSl1KGJbbV1pbiBoLFwiaW52YWxpZCBzaWduYXR1cmUgY2hhcjogXCIrYlttXSksZC5wdXNoKGhbYlttXV0pO1widlwiPT1mP2QucHVzaCgwKTpkLnB1c2goMSxoW2ZdKTtcbiAgICBiPVswLDk3LDExNSwxMDksMSwwLDAsMCwxXTtmPWQubGVuZ3RoO3UoMTYzODQ+Zik7MTI4PmY/Yi5wdXNoKGYpOmIucHVzaChmJTEyOHwxMjgsZj4+Nyk7Yi5wdXNoLmFwcGx5KGIsZCk7Yi5wdXNoKDIsNywxLDEsMTAxLDEsMTAyLDAsMCw3LDUsMSwxLDEwMiwwLDApO2I9bmV3IFdlYkFzc2VtYmx5Lk1vZHVsZShuZXcgVWludDhBcnJheShiKSk7Yj0obmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKGIse2U6e2Y6YX19KSkuZXhwb3J0cy5mO31kPWM7Wi5zZXQoZCxiKTtmY1tkXT1aLmdldChkKTt9aWMuc2V0KGEsYyk7cmV0dXJuIGN9O2UucmVtb3ZlRnVuY3Rpb249YT0+e2ljLmRlbGV0ZShnYyhhKSk7Wi5zZXQoYSxudWxsKTtmY1thXT1aLmdldChhKTtqYy5wdXNoKGEpO307XG4gICAgZS5zZXRWYWx1ZT1mdW5jdGlvbihhLGIsYz1cImk4XCIpe2MuZW5kc1dpdGgoXCIqXCIpJiYoYz1cIipcIik7c3dpdGNoKGMpe2Nhc2UgXCJpMVwiOkVbYT4+MF09YjticmVhaztjYXNlIFwiaThcIjpFW2E+PjBdPWI7YnJlYWs7Y2FzZSBcImkxNlwiOnVhW2E+PjFdPWI7YnJlYWs7Y2FzZSBcImkzMlwiOkZbYT4+Ml09YjticmVhaztjYXNlIFwiaTY0XCI6d2FbYT4+M109QmlnSW50KGIpO2JyZWFrO2Nhc2UgXCJmbG9hdFwiOnZhW2E+PjJdPWI7YnJlYWs7Y2FzZSBcImRvdWJsZVwiOnhhW2E+PjNdPWI7YnJlYWs7Y2FzZSBcIipcIjpHW2E+PjJdPWI7YnJlYWs7ZGVmYXVsdDpnKGBpbnZhbGlkIHR5cGUgZm9yIHNldFZhbHVlOiAke2N9YCk7fX07XG4gICAgZS5nZXRWYWx1ZT1mdW5jdGlvbihhLGI9XCJpOFwiKXtiLmVuZHNXaXRoKFwiKlwiKSYmKGI9XCIqXCIpO3N3aXRjaChiKXtjYXNlIFwiaTFcIjpyZXR1cm4gRVthPj4wXTtjYXNlIFwiaThcIjpyZXR1cm4gRVthPj4wXTtjYXNlIFwiaTE2XCI6cmV0dXJuIHVhW2E+PjFdO2Nhc2UgXCJpMzJcIjpyZXR1cm4gRlthPj4yXTtjYXNlIFwiaTY0XCI6cmV0dXJuIHdhW2E+PjNdO2Nhc2UgXCJmbG9hdFwiOnJldHVybiB2YVthPj4yXTtjYXNlIFwiZG91YmxlXCI6cmV0dXJuIHhhW2E+PjNdO2Nhc2UgXCIqXCI6cmV0dXJuIEdbYT4+Ml07ZGVmYXVsdDpnKGBpbnZhbGlkIHR5cGUgZm9yIGdldFZhbHVlOiAke2J9YCk7fX07ZS5zdHJpbmdUb1VURjg9VWI7ZS5sZW5ndGhCeXRlc1VURjg9amI7ZS5zdHJpbmdUb05ld1VURjg9WmI7ZS5GUz1SO1xuICAgIFwid3JpdGVJNTNUb0k2NCB3cml0ZUk1M1RvSTY0Q2xhbXBlZCB3cml0ZUk1M1RvSTY0U2lnbmFsaW5nIHdyaXRlSTUzVG9VNjRDbGFtcGVkIHdyaXRlSTUzVG9VNjRTaWduYWxpbmcgcmVhZEk1M0Zyb21JNjQgcmVhZEk1M0Zyb21VNjQgY29udmVydEkzMlBhaXJUb0k1MyBjb252ZXJ0STMyUGFpclRvSTUzQ2hlY2tlZCBjb252ZXJ0VTMyUGFpclRvSTUzIGluZXRQdG9uNCBpbmV0TnRvcDQgaW5ldFB0b242IGluZXROdG9wNiByZWFkU29ja2FkZHIgd3JpdGVTb2NrYWRkciBnZXRIb3N0QnlOYW1lIGdldENhbGxzdGFjayBlbXNjcmlwdGVuTG9nIGNvbnZlcnRQQ3RvU291cmNlTG9jYXRpb24gcmVhZEVtQXNtQXJncyBqc3RvaV9xIGpzdG9pX3MgbGlzdGVuT25jZSBhdXRvUmVzdW1lQXVkaW9Db250ZXh0IGdldER5bkNhbGxlciBkeW5DYWxsIGhhbmRsZUV4Y2VwdGlvbiBydW50aW1lS2VlcGFsaXZlUHVzaCBydW50aW1lS2VlcGFsaXZlUG9wIGNhbGxVc2VyQ2FsbGJhY2sgbWF5YmVFeGl0IGFzbWpzTWFuZ2xlIGhhbmRsZUFsbG9jYXRvckluaXQgSGFuZGxlQWxsb2NhdG9yIGdldE5hdGl2ZVR5cGVTaXplIFNUQUNLX1NJWkUgU1RBQ0tfQUxJR04gUE9JTlRFUl9TSVpFIEFTU0VSVElPTlMgY3dyYXAgcmVhbGx5TmVnYXRpdmUgdW5TaWduIHN0ckxlbiByZVNpZ24gZm9ybWF0U3RyaW5nIGludEFycmF5VG9TdHJpbmcgQXNjaWlUb1N0cmluZyBVVEYxNlRvU3RyaW5nIHN0cmluZ1RvVVRGMTYgbGVuZ3RoQnl0ZXNVVEYxNiBVVEYzMlRvU3RyaW5nIHN0cmluZ1RvVVRGMzIgbGVuZ3RoQnl0ZXNVVEYzMiByZWdpc3RlcktleUV2ZW50Q2FsbGJhY2sgbWF5YmVDU3RyaW5nVG9Kc1N0cmluZyBmaW5kRXZlbnRUYXJnZXQgZmluZENhbnZhc0V2ZW50VGFyZ2V0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmaWxsTW91c2VFdmVudERhdGEgcmVnaXN0ZXJNb3VzZUV2ZW50Q2FsbGJhY2sgcmVnaXN0ZXJXaGVlbEV2ZW50Q2FsbGJhY2sgcmVnaXN0ZXJVaUV2ZW50Q2FsbGJhY2sgcmVnaXN0ZXJGb2N1c0V2ZW50Q2FsbGJhY2sgZmlsbERldmljZU9yaWVudGF0aW9uRXZlbnREYXRhIHJlZ2lzdGVyRGV2aWNlT3JpZW50YXRpb25FdmVudENhbGxiYWNrIGZpbGxEZXZpY2VNb3Rpb25FdmVudERhdGEgcmVnaXN0ZXJEZXZpY2VNb3Rpb25FdmVudENhbGxiYWNrIHNjcmVlbk9yaWVudGF0aW9uIGZpbGxPcmllbnRhdGlvbkNoYW5nZUV2ZW50RGF0YSByZWdpc3Rlck9yaWVudGF0aW9uQ2hhbmdlRXZlbnRDYWxsYmFjayBmaWxsRnVsbHNjcmVlbkNoYW5nZUV2ZW50RGF0YSByZWdpc3RlckZ1bGxzY3JlZW5DaGFuZ2VFdmVudENhbGxiYWNrIEpTRXZlbnRzX3JlcXVlc3RGdWxsc2NyZWVuIEpTRXZlbnRzX3Jlc2l6ZUNhbnZhc0ZvckZ1bGxzY3JlZW4gcmVnaXN0ZXJSZXN0b3JlT2xkU3R5bGUgaGlkZUV2ZXJ5dGhpbmdFeGNlcHRHaXZlbkVsZW1lbnQgcmVzdG9yZUhpZGRlbkVsZW1lbnRzIHNldExldHRlcmJveCBzb2Z0RnVsbHNjcmVlblJlc2l6ZVdlYkdMUmVuZGVyVGFyZ2V0IGRvUmVxdWVzdEZ1bGxzY3JlZW4gZmlsbFBvaW50ZXJsb2NrQ2hhbmdlRXZlbnREYXRhIHJlZ2lzdGVyUG9pbnRlcmxvY2tDaGFuZ2VFdmVudENhbGxiYWNrIHJlZ2lzdGVyUG9pbnRlcmxvY2tFcnJvckV2ZW50Q2FsbGJhY2sgcmVxdWVzdFBvaW50ZXJMb2NrIGZpbGxWaXNpYmlsaXR5Q2hhbmdlRXZlbnREYXRhIHJlZ2lzdGVyVmlzaWJpbGl0eUNoYW5nZUV2ZW50Q2FsbGJhY2sgcmVnaXN0ZXJUb3VjaEV2ZW50Q2FsbGJhY2sgZmlsbEdhbWVwYWRFdmVudERhdGEgcmVnaXN0ZXJHYW1lcGFkRXZlbnRDYWxsYmFjayByZWdpc3RlckJlZm9yZVVubG9hZEV2ZW50Q2FsbGJhY2sgZmlsbEJhdHRlcnlFdmVudERhdGEgYmF0dGVyeSByZWdpc3RlckJhdHRlcnlFdmVudENhbGxiYWNrIHNldENhbnZhc0VsZW1lbnRTaXplIGdldENhbnZhc0VsZW1lbnRTaXplIGpzU3RhY2tUcmFjZSBzdGFja1RyYWNlIGNoZWNrV2FzaUNsb2NrIHdhc2lSaWdodHNUb011c2xPRmxhZ3Mgd2FzaU9GbGFnc1RvTXVzbE9GbGFncyBjcmVhdGVEeW5jYWxsV3JhcHBlciBzYWZlU2V0VGltZW91dCBzZXRJbW1lZGlhdGVXcmFwcGVkIGNsZWFySW1tZWRpYXRlV3JhcHBlZCBwb2x5ZmlsbFNldEltbWVkaWF0ZSBnZXRQcm9taXNlIG1ha2VQcm9taXNlIGlkc1RvUHJvbWlzZXMgbWFrZVByb21pc2VDYWxsYmFjayBzZXRNYWluTG9vcCBnZXRTb2NrZXRGcm9tRkQgZ2V0U29ja2V0QWRkcmVzcyBGU191bmxpbmsgRlNfbWtkaXJUcmVlIF9zZXROZXR3b3JrQ2FsbGJhY2tcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtcInVuZGVmaW5lZFwiPT09dHlwZW9mIGdsb2JhbFRoaXN8fFxuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2xvYmFsVGhpcyxhKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbFRoaXMsYSx7Y29uZmlndXJhYmxlOiEwLGdldCgpe3ZhciBiPWBcXGAke2F9XFxgIGlzIGEgbGlicmFyeSBzeW1ib2wgYW5kIG5vdCBpbmNsdWRlZCBieSBkZWZhdWx0OyBhZGQgaXQgdG8geW91ciBsaWJyYXJ5LmpzIF9fZGVwcyBvciB0byBERUZBVUxUX0xJQlJBUllfRlVOQ1NfVE9fSU5DTFVERSBvbiB0aGUgY29tbWFuZCBsaW5lYCxjPWE7Yy5zdGFydHNXaXRoKFwiX1wiKXx8KGM9XCIkXCIrYSk7Yis9YCAoZS5nLiAtc0RFRkFVTFRfTElCUkFSWV9GVU5DU19UT19JTkNMVURFPScke2N9JylgO1VhKGEpJiYoYis9XCIuIEFsdGVybmF0aXZlbHksIGZvcmNpbmcgZmlsZXN5c3RlbSBzdXBwb3J0ICgtc0ZPUkNFX0ZJTEVTWVNURU0pIGNhbiBleHBvcnQgdGhpcyBmb3IgeW91XCIpO1dhKGIpO319KTtYYShhKTt9KTtcInJ1biBhZGRPblByZVJ1biBhZGRPbkluaXQgYWRkT25QcmVNYWluIGFkZE9uRXhpdCBhZGRPblBvc3RSdW4gYWRkUnVuRGVwZW5kZW5jeSByZW1vdmVSdW5EZXBlbmRlbmN5IEZTX2NyZWF0ZUZvbGRlciBGU19jcmVhdGVQYXRoIEZTX2NyZWF0ZUxhenlGaWxlIEZTX2NyZWF0ZUxpbmsgRlNfY3JlYXRlRGV2aWNlIEZTX3JlYWRGaWxlIG91dCBlcnIgY2FsbE1haW4gYWJvcnQgd2FzbU1lbW9yeSB3YXNtRXhwb3J0cyBzdGFja0FsbG9jIHN0YWNrU2F2ZSBzdGFja1Jlc3RvcmUgZ2V0VGVtcFJldDAgc2V0VGVtcFJldDAgd3JpdGVTdGFja0Nvb2tpZSBjaGVja1N0YWNrQ29va2llIE1BWF9JTlQ1MyBNSU5fSU5UNTMgYmlnaW50VG9JNTNDaGVja2VkIHB0clRvU3RyaW5nIHplcm9NZW1vcnkgZXhpdEpTIGdldEhlYXBNYXggZ3Jvd01lbW9yeSBNT05USF9EQVlTX1JFR1VMQVIgTU9OVEhfREFZU19MRUFQIE1PTlRIX0RBWVNfUkVHVUxBUl9DVU1VTEFUSVZFIE1PTlRIX0RBWVNfTEVBUF9DVU1VTEFUSVZFIGlzTGVhcFllYXIgeWRheUZyb21EYXRlIGFycmF5U3VtIGFkZERheXMgRVJSTk9fQ09ERVMgRVJSTk9fTUVTU0FHRVMgc2V0RXJyTm8gRE5TIFByb3RvY29scyBTb2NrZXRzIGluaXRSYW5kb21GaWxsIHJhbmRvbUZpbGwgdGltZXJzIHdhcm5PbmNlIFVOV0lORF9DQUNIRSByZWFkRW1Bc21BcmdzQXJyYXkgZ2V0RXhlY3V0YWJsZU5hbWUga2VlcFJ1bnRpbWVBbGl2ZSBhc3luY0xvYWQgYWxpZ25NZW1vcnkgbW1hcEFsbG9jIHdhc21UYWJsZSBub0V4aXRSdW50aW1lIGdldENGdW5jIHVsZWIxMjhFbmNvZGUgc2lnVG9XYXNtVHlwZXMgZ2VuZXJhdGVGdW5jVHlwZSBjb252ZXJ0SnNGdW5jdGlvblRvV2FzbSBmcmVlVGFibGVJbmRleGVzIGZ1bmN0aW9uc0luVGFibGVNYXAgZ2V0RW1wdHlUYWJsZVNsb3QgdXBkYXRlVGFibGVNYXAgZ2V0RnVuY3Rpb25BZGRyZXNzIFBBVEggUEFUSF9GUyBVVEY4RGVjb2RlciBVVEY4QXJyYXlUb1N0cmluZyBVVEY4VG9TdHJpbmcgc3RyaW5nVG9VVEY4QXJyYXkgaW50QXJyYXlGcm9tU3RyaW5nIHN0cmluZ1RvQXNjaWkgVVRGMTZEZWNvZGVyIHN0cmluZ1RvVVRGOE9uU3RhY2sgd3JpdGVBcnJheVRvTWVtb3J5IEpTRXZlbnRzIHNwZWNpYWxIVE1MVGFyZ2V0cyBjdXJyZW50RnVsbHNjcmVlblN0cmF0ZWd5IHJlc3RvcmVPbGRXaW5kb3dlZFN0eWxlIGRlbWFuZ2xlIGRlbWFuZ2xlQWxsIEV4aXRTdGF0dXMgZ2V0RW52U3RyaW5ncyBkb1JlYWR2IGRvV3JpdGV2IHByb21pc2VNYXAgQnJvd3NlciB3Z2V0IFNZU0NBTExTIHByZWxvYWRQbHVnaW5zIEZTX2NyZWF0ZVByZWxvYWRlZEZpbGUgRlNfbW9kZVN0cmluZ1RvRmxhZ3MgRlNfZ2V0TW9kZSBGU19zdGRpbl9nZXRDaGFyX2J1ZmZlciBGU19zdGRpbl9nZXRDaGFyIEZTX2NyZWF0ZURhdGFGaWxlIE1FTUZTIFRUWSBQSVBFRlMgU09DS0ZTXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goWGEpO1xuICAgIHZhciB1YztKYT1mdW5jdGlvbiB2Yygpe3VjfHx3YygpO3VjfHwoSmE9dmMpO307XG4gICAgZnVuY3Rpb24gd2MoKXtpZighKDA8SWEpKXtxYygpO3ZhciBhPUFhKCk7dSgwPT0oYSYzKSk7MD09YSYmKGErPTQpO0dbYT4+Ml09MzQ4MjEyMjM7R1thKzQ+PjJdPTIzMTA3MjEwMjI7R1swXT0xNjY4NTA5MDI5O2lmKGUucHJlUnVuKWZvcihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnByZVJ1biYmKGUucHJlUnVuPVtlLnByZVJ1bl0pO2UucHJlUnVuLmxlbmd0aDspYT1lLnByZVJ1bi5zaGlmdCgpLEVhLnVuc2hpZnQoYSk7Zm9yKDswPEVhLmxlbmd0aDspRWEuc2hpZnQoKShlKTtpZighKDA8SWEpKXtpZighdWMmJih1Yz0hMCxlLmNhbGxlZFJ1bj0hMCwhc2EpKXt1KCFIYSk7SGE9ITA7emEoKTtlLm5vRlNJbml0fHxSLlIuWXx8Ui5SKCk7Zm9yKFIudGE9ITE7MDxGYS5sZW5ndGg7KUZhLnNoaWZ0KCkoZSk7YWEoZSk7dSghZS5fbWFpbiwnY29tcGlsZWQgd2l0aG91dCBhIG1haW4sIGJ1dCBvbmUgaXMgcHJlc2VudC4gaWYgeW91IGFkZGVkIGl0IGZyb20gSlMsIHVzZSBNb2R1bGVbXCJvblJ1bnRpbWVJbml0aWFsaXplZFwiXScpO2Zvcih6YSgpOzA8XG4gICAgR2EubGVuZ3RoOylHYS5zaGlmdCgpKGUpO316YSgpO319fWZ1bmN0aW9uIG1jKCl7dmFyIGE9cWEsYj16LGM9ITE7cWE9ej0oKT0+e2M9ITA7fTt0cnl7UmIoMCksW1wic3Rkb3V0XCIsXCJzdGRlcnJcIl0uZm9yRWFjaChmdW5jdGlvbihkKXsoZD1PYihcIi9kZXYvXCIrZCkpJiYoZD1tYltkLm9iamVjdC5yZGV2XSkmJmQub3V0cHV0JiZkLm91dHB1dC5sZW5ndGgmJihjPSEwKTt9KTt9Y2F0Y2goZCl7fXFhPWE7ej1iO2MmJldhKFwic3RkaW8gc3RyZWFtcyBoYWQgY29udGVudCBpbiB0aGVtIHRoYXQgd2FzIG5vdCBmbHVzaGVkLiB5b3Ugc2hvdWxkIHNldCBFWElUX1JVTlRJTUUgdG8gMSAoc2VlIHRoZSBFbXNjcmlwdGVuIEZBUSksIG9yIG1ha2Ugc3VyZSB0byBlbWl0IGEgbmV3bGluZSB3aGVuIHlvdSBwcmludGYgZXRjLlwiKTt9d2MoKTtcblxuXG4gICAgICByZXR1cm4gbW9kdWxlQXJnLnJlYWR5XG4gICAgfVxuICAgICk7XG4gICAgfSkoKTtcblxuICAgIGNsYXNzIEx1YVdhc20ge1xuICAgICAgICBzdGF0aWMgYXN5bmMgaW5pdGlhbGl6ZShjdXN0b21XYXNtRmlsZUxvY2F0aW9uLCBlbnZpcm9ubWVudFZhcmlhYmxlcykge1xuICAgICAgICAgICAgY29uc3QgbW9kdWxlID0gYXdhaXQgaW5pdFdhc21Nb2R1bGUoe1xuICAgICAgICAgICAgICAgIGxvY2F0ZUZpbGU6IChwYXRoLCBzY3JpcHREaXJlY3RvcnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1c3RvbVdhc21GaWxlTG9jYXRpb24gfHwgc2NyaXB0RGlyZWN0b3J5ICsgcGF0aDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHByZVJ1bjogKGluaXRpYWxpemVkTW9kdWxlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZW52aXJvbm1lbnRWYXJpYWJsZXMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhlbnZpcm9ubWVudFZhcmlhYmxlcykuZm9yRWFjaCgoW2ssIHZdKSA9PiAoaW5pdGlhbGl6ZWRNb2R1bGUuRU5WW2tdID0gdikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBMdWFXYXNtKG1vZHVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3RydWN0b3IobW9kdWxlKSB7XG4gICAgICAgICAgICB0aGlzLnJlZmVyZW5jZVRyYWNrZXIgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgICAgICAgdGhpcy5yZWZlcmVuY2VNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICB0aGlzLmF2YWlsYWJsZVJlZmVyZW5jZXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMubW9kdWxlID0gbW9kdWxlO1xuICAgICAgICAgICAgdGhpcy5sdWFMX2NoZWNrdmVyc2lvbl8gPSB0aGlzLmN3cmFwKCdsdWFMX2NoZWNrdmVyc2lvbl8nLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX2dldG1ldGFmaWVsZCA9IHRoaXMuY3dyYXAoJ2x1YUxfZ2V0bWV0YWZpZWxkJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlcicsICdzdHJpbmcnXSk7XG4gICAgICAgICAgICB0aGlzLmx1YUxfY2FsbG1ldGEgPSB0aGlzLmN3cmFwKCdsdWFMX2NhbGxtZXRhJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlcicsICdzdHJpbmcnXSk7XG4gICAgICAgICAgICB0aGlzLmx1YUxfdG9sc3RyaW5nID0gdGhpcy5jd3JhcCgnbHVhTF90b2xzdHJpbmcnLCAnc3RyaW5nJywgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhTF9hcmdlcnJvciA9IHRoaXMuY3dyYXAoJ2x1YUxfYXJnZXJyb3InLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJywgJ3N0cmluZyddKTtcbiAgICAgICAgICAgIHRoaXMubHVhTF90eXBlZXJyb3IgPSB0aGlzLmN3cmFwKCdsdWFMX3R5cGVlcnJvcicsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInLCAnc3RyaW5nJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX2NoZWNrbHN0cmluZyA9IHRoaXMuY3dyYXAoJ2x1YUxfY2hlY2tsc3RyaW5nJywgJ3N0cmluZycsIFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YUxfb3B0bHN0cmluZyA9IHRoaXMuY3dyYXAoJ2x1YUxfb3B0bHN0cmluZycsICdzdHJpbmcnLCBbJ251bWJlcicsICdudW1iZXInLCAnc3RyaW5nJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhTF9jaGVja251bWJlciA9IHRoaXMuY3dyYXAoJ2x1YUxfY2hlY2tudW1iZXInLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX29wdG51bWJlciA9IHRoaXMuY3dyYXAoJ2x1YUxfb3B0bnVtYmVyJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YUxfY2hlY2tpbnRlZ2VyID0gdGhpcy5jd3JhcCgnbHVhTF9jaGVja2ludGVnZXInLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX29wdGludGVnZXIgPSB0aGlzLmN3cmFwKCdsdWFMX29wdGludGVnZXInLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhTF9jaGVja3N0YWNrID0gdGhpcy5jd3JhcCgnbHVhTF9jaGVja3N0YWNrJywgbnVsbCwgWydudW1iZXInLCAnbnVtYmVyJywgJ3N0cmluZyddKTtcbiAgICAgICAgICAgIHRoaXMubHVhTF9jaGVja3R5cGUgPSB0aGlzLmN3cmFwKCdsdWFMX2NoZWNrdHlwZScsIG51bGwsIFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YUxfY2hlY2thbnkgPSB0aGlzLmN3cmFwKCdsdWFMX2NoZWNrYW55JywgbnVsbCwgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX25ld21ldGF0YWJsZSA9IHRoaXMuY3dyYXAoJ2x1YUxfbmV3bWV0YXRhYmxlJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ3N0cmluZyddKTtcbiAgICAgICAgICAgIHRoaXMubHVhTF9zZXRtZXRhdGFibGUgPSB0aGlzLmN3cmFwKCdsdWFMX3NldG1ldGF0YWJsZScsIG51bGwsIFsnbnVtYmVyJywgJ3N0cmluZyddKTtcbiAgICAgICAgICAgIHRoaXMubHVhTF90ZXN0dWRhdGEgPSB0aGlzLmN3cmFwKCdsdWFMX3Rlc3R1ZGF0YScsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInLCAnc3RyaW5nJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX2NoZWNrdWRhdGEgPSB0aGlzLmN3cmFwKCdsdWFMX2NoZWNrdWRhdGEnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJywgJ3N0cmluZyddKTtcbiAgICAgICAgICAgIHRoaXMubHVhTF93aGVyZSA9IHRoaXMuY3dyYXAoJ2x1YUxfd2hlcmUnLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YUxfZmlsZXJlc3VsdCA9IHRoaXMuY3dyYXAoJ2x1YUxfZmlsZXJlc3VsdCcsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInLCAnc3RyaW5nJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX2V4ZWNyZXN1bHQgPSB0aGlzLmN3cmFwKCdsdWFMX2V4ZWNyZXN1bHQnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX3JlZiA9IHRoaXMuY3dyYXAoJ2x1YUxfcmVmJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhTF91bnJlZiA9IHRoaXMuY3dyYXAoJ2x1YUxfdW5yZWYnLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX2xvYWRmaWxleCA9IHRoaXMuY3dyYXAoJ2x1YUxfbG9hZGZpbGV4JywgJ251bWJlcicsIFsnbnVtYmVyJywgJ3N0cmluZycsICdzdHJpbmcnXSk7XG4gICAgICAgICAgICB0aGlzLmx1YUxfbG9hZGJ1ZmZlcnggPSB0aGlzLmN3cmFwKCdsdWFMX2xvYWRidWZmZXJ4JywgJ251bWJlcicsIFsnbnVtYmVyJywgJ3N0cmluZ3xudW1iZXInLCAnbnVtYmVyJywgJ3N0cmluZ3xudW1iZXInLCAnc3RyaW5nJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX2xvYWRzdHJpbmcgPSB0aGlzLmN3cmFwKCdsdWFMX2xvYWRzdHJpbmcnLCAnbnVtYmVyJywgWydudW1iZXInLCAnc3RyaW5nJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX25ld3N0YXRlID0gdGhpcy5jd3JhcCgnbHVhTF9uZXdzdGF0ZScsICdudW1iZXInLCBbXSk7XG4gICAgICAgICAgICB0aGlzLmx1YUxfbGVuID0gdGhpcy5jd3JhcCgnbHVhTF9sZW4nLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX2FkZGdzdWIgPSB0aGlzLmN3cmFwKCdsdWFMX2FkZGdzdWInLCBudWxsLCBbJ251bWJlcicsICdzdHJpbmcnLCAnc3RyaW5nJywgJ3N0cmluZyddKTtcbiAgICAgICAgICAgIHRoaXMubHVhTF9nc3ViID0gdGhpcy5jd3JhcCgnbHVhTF9nc3ViJywgJ3N0cmluZycsIFsnbnVtYmVyJywgJ3N0cmluZycsICdzdHJpbmcnLCAnc3RyaW5nJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX3NldGZ1bmNzID0gdGhpcy5jd3JhcCgnbHVhTF9zZXRmdW5jcycsIG51bGwsIFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YUxfZ2V0c3VidGFibGUgPSB0aGlzLmN3cmFwKCdsdWFMX2dldHN1YnRhYmxlJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlcicsICdzdHJpbmcnXSk7XG4gICAgICAgICAgICB0aGlzLmx1YUxfdHJhY2ViYWNrID0gdGhpcy5jd3JhcCgnbHVhTF90cmFjZWJhY2snLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInLCAnc3RyaW5nJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhTF9yZXF1aXJlZiA9IHRoaXMuY3dyYXAoJ2x1YUxfcmVxdWlyZWYnLCBudWxsLCBbJ251bWJlcicsICdzdHJpbmcnLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhTF9idWZmaW5pdCA9IHRoaXMuY3dyYXAoJ2x1YUxfYnVmZmluaXQnLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YUxfcHJlcGJ1ZmZzaXplID0gdGhpcy5jd3JhcCgnbHVhTF9wcmVwYnVmZnNpemUnLCAnc3RyaW5nJywgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX2FkZGxzdHJpbmcgPSB0aGlzLmN3cmFwKCdsdWFMX2FkZGxzdHJpbmcnLCBudWxsLCBbJ251bWJlcicsICdzdHJpbmcnLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX2FkZHN0cmluZyA9IHRoaXMuY3dyYXAoJ2x1YUxfYWRkc3RyaW5nJywgbnVsbCwgWydudW1iZXInLCAnc3RyaW5nJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX2FkZHZhbHVlID0gdGhpcy5jd3JhcCgnbHVhTF9hZGR2YWx1ZScsIG51bGwsIFsnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFMX3B1c2hyZXN1bHQgPSB0aGlzLmN3cmFwKCdsdWFMX3B1c2hyZXN1bHQnLCBudWxsLCBbJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhTF9wdXNocmVzdWx0c2l6ZSA9IHRoaXMuY3dyYXAoJ2x1YUxfcHVzaHJlc3VsdHNpemUnLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YUxfYnVmZmluaXRzaXplID0gdGhpcy5jd3JhcCgnbHVhTF9idWZmaW5pdHNpemUnLCAnc3RyaW5nJywgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX25ld3N0YXRlID0gdGhpcy5jd3JhcCgnbHVhX25ld3N0YXRlJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX2Nsb3NlID0gdGhpcy5jd3JhcCgnbHVhX2Nsb3NlJywgbnVsbCwgWydudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9uZXd0aHJlYWQgPSB0aGlzLmN3cmFwKCdsdWFfbmV3dGhyZWFkJywgJ251bWJlcicsIFsnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfcmVzZXR0aHJlYWQgPSB0aGlzLmN3cmFwKCdsdWFfcmVzZXR0aHJlYWQnLCAnbnVtYmVyJywgWydudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9hdHBhbmljID0gdGhpcy5jd3JhcCgnbHVhX2F0cGFuaWMnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfdmVyc2lvbiA9IHRoaXMuY3dyYXAoJ2x1YV92ZXJzaW9uJywgJ251bWJlcicsIFsnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfYWJzaW5kZXggPSB0aGlzLmN3cmFwKCdsdWFfYWJzaW5kZXgnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfZ2V0dG9wID0gdGhpcy5jd3JhcCgnbHVhX2dldHRvcCcsICdudW1iZXInLCBbJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3NldHRvcCA9IHRoaXMuY3dyYXAoJ2x1YV9zZXR0b3AnLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9wdXNodmFsdWUgPSB0aGlzLmN3cmFwKCdsdWFfcHVzaHZhbHVlJywgbnVsbCwgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfcm90YXRlID0gdGhpcy5jd3JhcCgnbHVhX3JvdGF0ZScsIG51bGwsIFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9jb3B5ID0gdGhpcy5jd3JhcCgnbHVhX2NvcHknLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfY2hlY2tzdGFjayA9IHRoaXMuY3dyYXAoJ2x1YV9jaGVja3N0YWNrJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3htb3ZlID0gdGhpcy5jd3JhcCgnbHVhX3htb3ZlJywgbnVsbCwgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX2lzbnVtYmVyID0gdGhpcy5jd3JhcCgnbHVhX2lzbnVtYmVyJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX2lzc3RyaW5nID0gdGhpcy5jd3JhcCgnbHVhX2lzc3RyaW5nJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX2lzY2Z1bmN0aW9uID0gdGhpcy5jd3JhcCgnbHVhX2lzY2Z1bmN0aW9uJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX2lzaW50ZWdlciA9IHRoaXMuY3dyYXAoJ2x1YV9pc2ludGVnZXInLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfaXN1c2VyZGF0YSA9IHRoaXMuY3dyYXAoJ2x1YV9pc3VzZXJkYXRhJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3R5cGUgPSB0aGlzLmN3cmFwKCdsdWFfdHlwZScsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV90eXBlbmFtZSA9IHRoaXMuY3dyYXAoJ2x1YV90eXBlbmFtZScsICdzdHJpbmcnLCBbJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV90b251bWJlcnggPSB0aGlzLmN3cmFwKCdsdWFfdG9udW1iZXJ4JywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV90b2ludGVnZXJ4ID0gdGhpcy5jd3JhcCgnbHVhX3RvaW50ZWdlcngnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3RvYm9vbGVhbiA9IHRoaXMuY3dyYXAoJ2x1YV90b2Jvb2xlYW4nLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfdG9sc3RyaW5nID0gdGhpcy5jd3JhcCgnbHVhX3RvbHN0cmluZycsICdzdHJpbmcnLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfcmF3bGVuID0gdGhpcy5jd3JhcCgnbHVhX3Jhd2xlbicsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV90b2NmdW5jdGlvbiA9IHRoaXMuY3dyYXAoJ2x1YV90b2NmdW5jdGlvbicsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV90b3VzZXJkYXRhID0gdGhpcy5jd3JhcCgnbHVhX3RvdXNlcmRhdGEnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfdG90aHJlYWQgPSB0aGlzLmN3cmFwKCdsdWFfdG90aHJlYWQnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfdG9wb2ludGVyID0gdGhpcy5jd3JhcCgnbHVhX3RvcG9pbnRlcicsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9hcml0aCA9IHRoaXMuY3dyYXAoJ2x1YV9hcml0aCcsIG51bGwsIFsnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3Jhd2VxdWFsID0gdGhpcy5jd3JhcCgnbHVhX3Jhd2VxdWFsJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9jb21wYXJlID0gdGhpcy5jd3JhcCgnbHVhX2NvbXBhcmUnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9wdXNobmlsID0gdGhpcy5jd3JhcCgnbHVhX3B1c2huaWwnLCBudWxsLCBbJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3B1c2hudW1iZXIgPSB0aGlzLmN3cmFwKCdsdWFfcHVzaG51bWJlcicsIG51bGwsIFsnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3B1c2hpbnRlZ2VyID0gdGhpcy5jd3JhcCgnbHVhX3B1c2hpbnRlZ2VyJywgbnVsbCwgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfcHVzaGxzdHJpbmcgPSB0aGlzLmN3cmFwKCdsdWFfcHVzaGxzdHJpbmcnLCAnc3RyaW5nJywgWydudW1iZXInLCAnc3RyaW5nfG51bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9wdXNoc3RyaW5nID0gdGhpcy5jd3JhcCgnbHVhX3B1c2hzdHJpbmcnLCAnc3RyaW5nJywgWydudW1iZXInLCAnc3RyaW5nfG51bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3B1c2hjY2xvc3VyZSA9IHRoaXMuY3dyYXAoJ2x1YV9wdXNoY2Nsb3N1cmUnLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfcHVzaGJvb2xlYW4gPSB0aGlzLmN3cmFwKCdsdWFfcHVzaGJvb2xlYW4nLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9wdXNobGlnaHR1c2VyZGF0YSA9IHRoaXMuY3dyYXAoJ2x1YV9wdXNobGlnaHR1c2VyZGF0YScsIG51bGwsIFsnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3B1c2h0aHJlYWQgPSB0aGlzLmN3cmFwKCdsdWFfcHVzaHRocmVhZCcsICdudW1iZXInLCBbJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX2dldGdsb2JhbCA9IHRoaXMuY3dyYXAoJ2x1YV9nZXRnbG9iYWwnLCAnbnVtYmVyJywgWydudW1iZXInLCAnc3RyaW5nJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfZ2V0dGFibGUgPSB0aGlzLmN3cmFwKCdsdWFfZ2V0dGFibGUnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfZ2V0ZmllbGQgPSB0aGlzLmN3cmFwKCdsdWFfZ2V0ZmllbGQnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJywgJ3N0cmluZyddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX2dldGkgPSB0aGlzLmN3cmFwKCdsdWFfZ2V0aScsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfcmF3Z2V0ID0gdGhpcy5jd3JhcCgnbHVhX3Jhd2dldCcsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9yYXdnZXRpID0gdGhpcy5jd3JhcCgnbHVhX3Jhd2dldGknLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3Jhd2dldHAgPSB0aGlzLmN3cmFwKCdsdWFfcmF3Z2V0cCcsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfY3JlYXRldGFibGUgPSB0aGlzLmN3cmFwKCdsdWFfY3JlYXRldGFibGUnLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfbmV3dXNlcmRhdGF1diA9IHRoaXMuY3dyYXAoJ2x1YV9uZXd1c2VyZGF0YXV2JywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9nZXRtZXRhdGFibGUgPSB0aGlzLmN3cmFwKCdsdWFfZ2V0bWV0YXRhYmxlJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX2dldGl1c2VydmFsdWUgPSB0aGlzLmN3cmFwKCdsdWFfZ2V0aXVzZXJ2YWx1ZScsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfc2V0Z2xvYmFsID0gdGhpcy5jd3JhcCgnbHVhX3NldGdsb2JhbCcsIG51bGwsIFsnbnVtYmVyJywgJ3N0cmluZyddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3NldHRhYmxlID0gdGhpcy5jd3JhcCgnbHVhX3NldHRhYmxlJywgbnVsbCwgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfc2V0ZmllbGQgPSB0aGlzLmN3cmFwKCdsdWFfc2V0ZmllbGQnLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInLCAnc3RyaW5nJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfc2V0aSA9IHRoaXMuY3dyYXAoJ2x1YV9zZXRpJywgbnVsbCwgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3Jhd3NldCA9IHRoaXMuY3dyYXAoJ2x1YV9yYXdzZXQnLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9yYXdzZXRpID0gdGhpcy5jd3JhcCgnbHVhX3Jhd3NldGknLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfcmF3c2V0cCA9IHRoaXMuY3dyYXAoJ2x1YV9yYXdzZXRwJywgbnVsbCwgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3NldG1ldGF0YWJsZSA9IHRoaXMuY3dyYXAoJ2x1YV9zZXRtZXRhdGFibGUnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfc2V0aXVzZXJ2YWx1ZSA9IHRoaXMuY3dyYXAoJ2x1YV9zZXRpdXNlcnZhbHVlJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9jYWxsayA9IHRoaXMuY3dyYXAoJ2x1YV9jYWxsaycsIG51bGwsIFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3BjYWxsayA9IHRoaXMuY3dyYXAoJ2x1YV9wY2FsbGsnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX2xvYWQgPSB0aGlzLmN3cmFwKCdsdWFfbG9hZCcsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJywgJ3N0cmluZycsICdzdHJpbmcnXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9kdW1wID0gdGhpcy5jd3JhcCgnbHVhX2R1bXAnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV95aWVsZGsgPSB0aGlzLmN3cmFwKCdsdWFfeWllbGRrJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfcmVzdW1lID0gdGhpcy5jd3JhcCgnbHVhX3Jlc3VtZScsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3N0YXR1cyA9IHRoaXMuY3dyYXAoJ2x1YV9zdGF0dXMnLCAnbnVtYmVyJywgWydudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9pc3lpZWxkYWJsZSA9IHRoaXMuY3dyYXAoJ2x1YV9pc3lpZWxkYWJsZScsICdudW1iZXInLCBbJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3NldHdhcm5mID0gdGhpcy5jd3JhcCgnbHVhX3NldHdhcm5mJywgbnVsbCwgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3dhcm5pbmcgPSB0aGlzLmN3cmFwKCdsdWFfd2FybmluZycsIG51bGwsIFsnbnVtYmVyJywgJ3N0cmluZycsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9lcnJvciA9IHRoaXMuY3dyYXAoJ2x1YV9lcnJvcicsICdudW1iZXInLCBbJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX25leHQgPSB0aGlzLmN3cmFwKCdsdWFfbmV4dCcsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9jb25jYXQgPSB0aGlzLmN3cmFwKCdsdWFfY29uY2F0JywgbnVsbCwgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfbGVuID0gdGhpcy5jd3JhcCgnbHVhX2xlbicsIG51bGwsIFsnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3N0cmluZ3RvbnVtYmVyID0gdGhpcy5jd3JhcCgnbHVhX3N0cmluZ3RvbnVtYmVyJywgJ251bWJlcicsIFsnbnVtYmVyJywgJ3N0cmluZyddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX2dldGFsbG9jZiA9IHRoaXMuY3dyYXAoJ2x1YV9nZXRhbGxvY2YnLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfc2V0YWxsb2NmID0gdGhpcy5jd3JhcCgnbHVhX3NldGFsbG9jZicsIG51bGwsIFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV90b2Nsb3NlID0gdGhpcy5jd3JhcCgnbHVhX3RvY2xvc2UnLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9jbG9zZXNsb3QgPSB0aGlzLmN3cmFwKCdsdWFfY2xvc2VzbG90JywgbnVsbCwgWydudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfZ2V0c3RhY2sgPSB0aGlzLmN3cmFwKCdsdWFfZ2V0c3RhY2snLCAnbnVtYmVyJywgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX2dldGluZm8gPSB0aGlzLmN3cmFwKCdsdWFfZ2V0aW5mbycsICdudW1iZXInLCBbJ251bWJlcicsICdzdHJpbmcnLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfZ2V0bG9jYWwgPSB0aGlzLmN3cmFwKCdsdWFfZ2V0bG9jYWwnLCAnc3RyaW5nJywgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3NldGxvY2FsID0gdGhpcy5jd3JhcCgnbHVhX3NldGxvY2FsJywgJ3N0cmluZycsIFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9nZXR1cHZhbHVlID0gdGhpcy5jd3JhcCgnbHVhX2dldHVwdmFsdWUnLCAnc3RyaW5nJywgWydudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3NldHVwdmFsdWUgPSB0aGlzLmN3cmFwKCdsdWFfc2V0dXB2YWx1ZScsICdzdHJpbmcnLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfdXB2YWx1ZWlkID0gdGhpcy5jd3JhcCgnbHVhX3VwdmFsdWVpZCcsICdudW1iZXInLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfdXB2YWx1ZWpvaW4gPSB0aGlzLmN3cmFwKCdsdWFfdXB2YWx1ZWpvaW4nLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YV9zZXRob29rID0gdGhpcy5jd3JhcCgnbHVhX3NldGhvb2snLCBudWxsLCBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX2dldGhvb2sgPSB0aGlzLmN3cmFwKCdsdWFfZ2V0aG9vaycsICdudW1iZXInLCBbJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX2dldGhvb2ttYXNrID0gdGhpcy5jd3JhcCgnbHVhX2dldGhvb2ttYXNrJywgJ251bWJlcicsIFsnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFfZ2V0aG9va2NvdW50ID0gdGhpcy5jd3JhcCgnbHVhX2dldGhvb2tjb3VudCcsICdudW1iZXInLCBbJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhX3NldGNzdGFja2xpbWl0ID0gdGhpcy5jd3JhcCgnbHVhX3NldGNzdGFja2xpbWl0JywgJ251bWJlcicsIFsnbnVtYmVyJywgJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhb3Blbl9iYXNlID0gdGhpcy5jd3JhcCgnbHVhb3Blbl9iYXNlJywgJ251bWJlcicsIFsnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFvcGVuX2Nvcm91dGluZSA9IHRoaXMuY3dyYXAoJ2x1YW9wZW5fY29yb3V0aW5lJywgJ251bWJlcicsIFsnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFvcGVuX3RhYmxlID0gdGhpcy5jd3JhcCgnbHVhb3Blbl90YWJsZScsICdudW1iZXInLCBbJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhb3Blbl9pbyA9IHRoaXMuY3dyYXAoJ2x1YW9wZW5faW8nLCAnbnVtYmVyJywgWydudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YW9wZW5fb3MgPSB0aGlzLmN3cmFwKCdsdWFvcGVuX29zJywgJ251bWJlcicsIFsnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFvcGVuX3N0cmluZyA9IHRoaXMuY3dyYXAoJ2x1YW9wZW5fc3RyaW5nJywgJ251bWJlcicsIFsnbnVtYmVyJ10pO1xuICAgICAgICAgICAgdGhpcy5sdWFvcGVuX3V0ZjggPSB0aGlzLmN3cmFwKCdsdWFvcGVuX3V0ZjgnLCAnbnVtYmVyJywgWydudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YW9wZW5fbWF0aCA9IHRoaXMuY3dyYXAoJ2x1YW9wZW5fbWF0aCcsICdudW1iZXInLCBbJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhb3Blbl9kZWJ1ZyA9IHRoaXMuY3dyYXAoJ2x1YW9wZW5fZGVidWcnLCAnbnVtYmVyJywgWydudW1iZXInXSk7XG4gICAgICAgICAgICB0aGlzLmx1YW9wZW5fcGFja2FnZSA9IHRoaXMuY3dyYXAoJ2x1YW9wZW5fcGFja2FnZScsICdudW1iZXInLCBbJ251bWJlciddKTtcbiAgICAgICAgICAgIHRoaXMubHVhTF9vcGVubGlicyA9IHRoaXMuY3dyYXAoJ2x1YUxfb3BlbmxpYnMnLCBudWxsLCBbJ251bWJlciddKTtcbiAgICAgICAgfVxuICAgICAgICBsdWFfcmVtb3ZlKGx1YVN0YXRlLCBpbmRleCkge1xuICAgICAgICAgICAgdGhpcy5sdWFfcm90YXRlKGx1YVN0YXRlLCBpbmRleCwgLTEpO1xuICAgICAgICAgICAgdGhpcy5sdWFfcG9wKGx1YVN0YXRlLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBsdWFfcG9wKGx1YVN0YXRlLCBjb3VudCkge1xuICAgICAgICAgICAgdGhpcy5sdWFfc2V0dG9wKGx1YVN0YXRlLCAtY291bnQgLSAxKTtcbiAgICAgICAgfVxuICAgICAgICBsdWFMX2dldG1ldGF0YWJsZShsdWFTdGF0ZSwgbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubHVhX2dldGZpZWxkKGx1YVN0YXRlLCBMVUFfUkVHSVNUUllJTkRFWCwgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgbHVhX3lpZWxkKGx1YVN0YXRlLCBjb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubHVhX3lpZWxkayhsdWFTdGF0ZSwgY291bnQsIDAsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGx1YV91cHZhbHVlaW5kZXgoaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBMVUFfUkVHSVNUUllJTkRFWCAtIGluZGV4O1xuICAgICAgICB9XG4gICAgICAgIHJlZihkYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IHRoaXMucmVmZXJlbmNlVHJhY2tlci5nZXQoZGF0YSk7XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgICAgICBleGlzdGluZy5yZWZDb3VudCsrO1xuICAgICAgICAgICAgICAgIHJldHVybiBleGlzdGluZy5pbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGF2YWlsYWJsZUluZGV4ID0gdGhpcy5hdmFpbGFibGVSZWZlcmVuY2VzLnBvcCgpO1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBhdmFpbGFibGVJbmRleCA9PT0gdW5kZWZpbmVkID8gdGhpcy5yZWZlcmVuY2VNYXAuc2l6ZSArIDEgOiBhdmFpbGFibGVJbmRleDtcbiAgICAgICAgICAgIHRoaXMucmVmZXJlbmNlTWFwLnNldChpbmRleCwgZGF0YSk7XG4gICAgICAgICAgICB0aGlzLnJlZmVyZW5jZVRyYWNrZXIuc2V0KGRhdGEsIHtcbiAgICAgICAgICAgICAgICByZWZDb3VudDogMSxcbiAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5sYXN0UmVmSW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgICB1bnJlZihpbmRleCkge1xuICAgICAgICAgICAgY29uc3QgcmVmID0gdGhpcy5yZWZlcmVuY2VNYXAuZ2V0KGluZGV4KTtcbiAgICAgICAgICAgIGlmIChyZWYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5yZWZlcmVuY2VUcmFja2VyLmdldChyZWYpO1xuICAgICAgICAgICAgaWYgKG1ldGFkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZmVyZW5jZVRyYWNrZXIuZGVsZXRlKHJlZik7XG4gICAgICAgICAgICAgICAgdGhpcy5hdmFpbGFibGVSZWZlcmVuY2VzLnB1c2goaW5kZXgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldGFkYXRhLnJlZkNvdW50LS07XG4gICAgICAgICAgICBpZiAobWV0YWRhdGEucmVmQ291bnQgPD0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVmZXJlbmNlVHJhY2tlci5kZWxldGUocmVmKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZmVyZW5jZU1hcC5kZWxldGUoaW5kZXgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXZhaWxhYmxlUmVmZXJlbmNlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBnZXRSZWYoaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZmVyZW5jZU1hcC5nZXQoaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGdldExhc3RSZWZJbmRleCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxhc3RSZWZJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBwcmludFJlZnMoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB0aGlzLnJlZmVyZW5jZU1hcC5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjd3JhcChuYW1lLCByZXR1cm5UeXBlLCBhcmdUeXBlcykge1xuICAgICAgICAgICAgY29uc3QgaGFzU3RyaW5nT3JOdW1iZXIgPSBhcmdUeXBlcy5zb21lKChhcmdUeXBlKSA9PiBhcmdUeXBlID09PSAnc3RyaW5nfG51bWJlcicpO1xuICAgICAgICAgICAgaWYgKCFoYXNTdHJpbmdPck51bWJlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoLi4uYXJncykgPT4gdGhpcy5tb2R1bGUuY2NhbGwobmFtZSwgcmV0dXJuVHlwZSwgYXJnVHlwZXMsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9pbnRlcnNUb0JlRnJlZWQgPSBbXTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlZEFyZ1R5cGVzID0gYXJnVHlwZXMubWFwKChhcmdUeXBlLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ1R5cGUgPT09ICdzdHJpbmd8bnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzW2ldID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnbnVtYmVyJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoKF9hID0gYXJnc1tpXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgPiAxMDI0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlclBvaW50ZXIgPSB0aGlzLm1vZHVsZS5zdHJpbmdUb05ld1VURjgoYXJnc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBidWZmZXJQb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyc1RvQmVGcmVlZC5wdXNoKGJ1ZmZlclBvaW50ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ251bWJlcic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmdUeXBlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZHVsZS5jY2FsbChuYW1lLCByZXR1cm5UeXBlLCByZXNvbHZlZEFyZ1R5cGVzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcG9pbnRlciBvZiBwb2ludGVyc1RvQmVGcmVlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2R1bGUuX2ZyZWUocG9pbnRlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHZlcnNpb24gPSAnMS4xNi4wJztcblxuICAgIGNsYXNzIEx1YUZhY3Rvcnkge1xuICAgICAgICBjb25zdHJ1Y3RvcihjdXN0b21XYXNtVXJpLCBlbnZpcm9ubWVudFZhcmlhYmxlcykge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKGN1c3RvbVdhc21VcmkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzQnJvd3NlciA9ICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykgfHxcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JyAmJiAoKF9hID0gc2VsZiA9PT0gbnVsbCB8fCBzZWxmID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZWxmLmNvbnN0cnVjdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZSkgPT09ICdEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZScpO1xuICAgICAgICAgICAgICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tV2FzbVVyaSA9IGBodHRwczovL3VucGtnLmNvbS93YXNtb29uQCR7dmVyc2lvbn0vZGlzdC9nbHVlLndhc21gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubHVhV2FzbVByb21pc2UgPSBMdWFXYXNtLmluaXRpYWxpemUoY3VzdG9tV2FzbVVyaSwgZW52aXJvbm1lbnRWYXJpYWJsZXMpO1xuICAgICAgICB9XG4gICAgICAgIGFzeW5jIG1vdW50RmlsZShwYXRoLCBjb250ZW50KSB7XG4gICAgICAgICAgICB0aGlzLm1vdW50RmlsZVN5bmMoYXdhaXQgdGhpcy5nZXRMdWFNb2R1bGUoKSwgcGF0aCwgY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgbW91bnRGaWxlU3luYyhsdWFXYXNtLCBwYXRoLCBjb250ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlU2VwID0gcGF0aC5sYXN0SW5kZXhPZignLycpO1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IHBhdGguc3Vic3RyaW5nKGZpbGVTZXAgKyAxKTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBwYXRoLnN1YnN0cmluZygwLCBwYXRoLmxlbmd0aCAtIGZpbGUubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICBpZiAoYm9keS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFydHMgPSBib2R5LnNwbGl0KCcvJykucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIGxldCBwYXJlbnQgPSAnJztcbiAgICAgICAgICAgICAgICB3aGlsZSAocGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnQgPSBwYXJ0cy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gYCR7cGFyZW50fS8ke3BhcnR9YDtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGx1YVdhc20ubW9kdWxlLkZTLm1rZGlyKGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGx1YVdhc20ubW9kdWxlLkZTLndyaXRlRmlsZShwYXRoLCBjb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBhc3luYyBjcmVhdGVFbmdpbmUob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEx1YUVuZ2luZShhd2FpdCB0aGlzLmdldEx1YU1vZHVsZSgpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBhc3luYyBnZXRMdWFNb2R1bGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sdWFXYXNtUHJvbWlzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydHMuRGVjb3JhdGlvbiA9IERlY29yYXRpb247XG4gICAgZXhwb3J0cy5MVUFJX01BWFNUQUNLID0gTFVBSV9NQVhTVEFDSztcbiAgICBleHBvcnRzLkxVQV9NVUxUUkVUID0gTFVBX01VTFRSRVQ7XG4gICAgZXhwb3J0cy5MVUFfUkVHSVNUUllJTkRFWCA9IExVQV9SRUdJU1RSWUlOREVYO1xuICAgIGV4cG9ydHMuTHVhRW5naW5lID0gTHVhRW5naW5lO1xuICAgIGV4cG9ydHMuTHVhRmFjdG9yeSA9IEx1YUZhY3Rvcnk7XG4gICAgZXhwb3J0cy5MdWFHbG9iYWwgPSBHbG9iYWw7XG4gICAgZXhwb3J0cy5MdWFNdWx0aVJldHVybiA9IE11bHRpUmV0dXJuO1xuICAgIGV4cG9ydHMuTHVhUmF3UmVzdWx0ID0gUmF3UmVzdWx0O1xuICAgIGV4cG9ydHMuTHVhVGhyZWFkID0gVGhyZWFkO1xuICAgIGV4cG9ydHMuTHVhVGltZW91dEVycm9yID0gTHVhVGltZW91dEVycm9yO1xuICAgIGV4cG9ydHMuTHVhVHlwZUV4dGVuc2lvbiA9IEx1YVR5cGVFeHRlbnNpb247XG4gICAgZXhwb3J0cy5MdWFXYXNtID0gTHVhV2FzbTtcbiAgICBleHBvcnRzLlBvaW50ZXJTaXplID0gUG9pbnRlclNpemU7XG4gICAgZXhwb3J0cy5kZWNvcmF0ZSA9IGRlY29yYXRlO1xuICAgIGV4cG9ydHMuZGVjb3JhdGVGdW5jdGlvbiA9IGRlY29yYXRlRnVuY3Rpb247XG4gICAgZXhwb3J0cy5kZWNvcmF0ZVByb3h5ID0gZGVjb3JhdGVQcm94eTtcbiAgICBleHBvcnRzLmRlY29yYXRlVXNlcmRhdGEgPSBkZWNvcmF0ZVVzZXJkYXRhO1xuXG59KSk7XG4iLCAiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBMdWFDb25zb2xlVmlldywgTFVBX0NPTlNPTEVfVklFV19UWVBFIH0gZnJvbSAnLi9MdWFDb25zb2xlVmlldyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMdWFDb25zb2xlUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuICAgIGFzeW5jIG9ubG9hZCgpIHtcclxuICAgICAgICAvLyBSZWdpc3RlciB0aGUgY29uc29sZSB2aWV3XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlclZpZXcoXHJcbiAgICAgICAgICAgIExVQV9DT05TT0xFX1ZJRVdfVFlQRSxcclxuICAgICAgICAgICAgKGxlYWYpID0+IG5ldyBMdWFDb25zb2xlVmlldyhsZWFmLCB0aGlzLmFwcClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBBZGQgcmliYm9uIGljb24gdG8gb3BlbiBjb25zb2xlXHJcbiAgICAgICAgdGhpcy5hZGRSaWJib25JY29uKCd0ZXJtaW5hbCcsICdPcGVuIEx1YSBDb25zb2xlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2YXRlVmlldygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBBZGQgY29tbWFuZCB0byBvcGVuIGNvbnNvbGVcclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogJ29wZW4tbHVhLWNvbnNvbGUnLFxyXG4gICAgICAgICAgICBuYW1lOiAnT3BlbiBMdWEgQ29uc29sZScsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2YXRlVmlldygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb251bmxvYWQoKSB7XHJcbiAgICAgICAgLy8gRGV0YWNoIGFsbCBjb25zb2xlIHZpZXdzXHJcbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLmRldGFjaExlYXZlc09mVHlwZShMVUFfQ09OU09MRV9WSUVXX1RZUEUpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGFjdGl2YXRlVmlldygpIHtcclxuICAgICAgICBjb25zdCB7IHdvcmtzcGFjZSB9ID0gdGhpcy5hcHA7XHJcblxyXG4gICAgICAgIGxldCBsZWFmID0gd29ya3NwYWNlLmdldExlYXZlc09mVHlwZShMVUFfQ09OU09MRV9WSUVXX1RZUEUpWzBdO1xyXG5cclxuICAgICAgICBpZiAoIWxlYWYpIHtcclxuICAgICAgICAgICAgLy8gQ3JlYXRlIG5ldyBsZWFmIGluIHJpZ2h0IHNpZGViYXJcclxuICAgICAgICAgICAgbGVhZiA9IHdvcmtzcGFjZS5nZXRSaWdodExlYWYoZmFsc2UpO1xyXG4gICAgICAgICAgICBhd2FpdCBsZWFmLnNldFZpZXdTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBMVUFfQ09OU09MRV9WSUVXX1RZUEUsXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHRydWUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd29ya3NwYWNlLnJldmVhbExlYWYobGVhZik7XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHsgSXRlbVZpZXcsIFdvcmtzcGFjZUxlYWYsIEFwcCB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgTHVhRW5naW5lIH0gZnJvbSAnLi9MdWFFbmdpbmUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IExVQV9DT05TT0xFX1ZJRVdfVFlQRSA9ICdsdWEtY29uc29sZS12aWV3JztcclxuXHJcbi8vIERlY2xhcmUgUHJpc20gZm9yIFR5cGVTY3JpcHRcclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgaW50ZXJmYWNlIFdpbmRvdyB7XHJcbiAgICAgICAgUHJpc206IGFueTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEx1YUNvbnNvbGVWaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xyXG4gICAgcHJpdmF0ZSBsdWFFbmdpbmU6IEx1YUVuZ2luZTtcclxuICAgIHByaXZhdGUgaW5wdXRFbDogSFRNTFRleHRBcmVhRWxlbWVudDtcclxuICAgIHByaXZhdGUgb3V0cHV0RWw6IEhUTUxEaXZFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBwcmlzbUxvYWRlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIGFwcDogQXBwKSB7XHJcbiAgICAgICAgc3VwZXIobGVhZik7XHJcbiAgICAgICAgdGhpcy5sdWFFbmdpbmUgPSBuZXcgTHVhRW5naW5lKGFwcCk7XHJcbiAgICAgICAgdGhpcy5sb2FkUHJpc20oKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRWaWV3VHlwZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBMVUFfQ09OU09MRV9WSUVXX1RZUEU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGlzcGxheVRleHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gJ0x1YSBDb25zb2xlJztcclxuICAgIH1cclxuXHJcbiAgICBnZXRJY29uKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICd0ZXJtaW5hbCc7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBsb2FkUHJpc20oKSB7XHJcbiAgICAgICAgLy8gTG9hZCBQcmlzbSBDU1NcclxuICAgICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmlzbS1jc3MnKSkge1xyXG4gICAgICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xyXG4gICAgICAgICAgICBsaW5rLmlkID0gJ3ByaXNtLWNzcyc7XHJcbiAgICAgICAgICAgIGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnO1xyXG4gICAgICAgICAgICBsaW5rLmhyZWYgPSAnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcHJpc20vMS4yOS4wL3RoZW1lcy9wcmlzbS10b21vcnJvdy5taW4uY3NzJztcclxuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIExvYWQgUHJpc20gSlNcclxuICAgICAgICBpZiAoIXdpbmRvdy5QcmlzbSkge1xyXG4gICAgICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgICAgICAgc2NyaXB0LnNyYyA9ICdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9wcmlzbS8xLjI5LjAvcHJpc20ubWluLmpzJztcclxuICAgICAgICAgICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIExvYWQgTHVhIGxhbmd1YWdlIHN1cHBvcnRcclxuICAgICAgICAgICAgICAgIGNvbnN0IGx1YVNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgICAgICAgICAgICAgbHVhU2NyaXB0LnNyYyA9ICdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9wcmlzbS8xLjI5LjAvY29tcG9uZW50cy9wcmlzbS1sdWEubWluLmpzJztcclxuICAgICAgICAgICAgICAgIGx1YVNjcmlwdC5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmlzbUxvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsdWFTY3JpcHQpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wcmlzbUxvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIG9uT3BlbigpIHtcclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lckVsLmNoaWxkcmVuWzFdO1xyXG4gICAgICAgIGNvbnRhaW5lci5lbXB0eSgpO1xyXG4gICAgICAgIGNvbnRhaW5lci5hZGRDbGFzcygnbHVhLWNvbnNvbGUtY29udGFpbmVyJyk7XHJcblxyXG4gICAgICAgIC8vIFNldCBleHBsaWNpdCBzdHlsZXMgdG8gZW5zdXJlIGxheW91dCB3b3Jrc1xyXG4gICAgICAgIChjb250YWluZXIgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcclxuICAgICAgICAoY29udGFpbmVyIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XHJcbiAgICAgICAgKGNvbnRhaW5lciBhcyBIVE1MRWxlbWVudCkuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgKGNvbnRhaW5lciBhcyBIVE1MRWxlbWVudCkuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcclxuICAgICAgICAoY29udGFpbmVyIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICAgIChjb250YWluZXIgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmZsZXhEaXJlY3Rpb24gPSAnY29sdW1uJztcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIG91dHB1dCBhcmVhIGZpcnN0XHJcbiAgICAgICAgdGhpcy5vdXRwdXRFbCA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdsdWEtY29uc29sZS1vdXRwdXQnIH0pO1xyXG4gICAgICAgICh0aGlzLm91dHB1dEVsIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5mbGV4ID0gJzEnO1xyXG4gICAgICAgICh0aGlzLm91dHB1dEVsIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5vdmVyZmxvd1kgPSAnYXV0byc7XHJcbiAgICAgICAgKHRoaXMub3V0cHV0RWwgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLm92ZXJmbG93WCA9ICdoaWRkZW4nO1xyXG4gICAgICAgICh0aGlzLm91dHB1dEVsIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5tYXJnaW4gPSAnMTBweCc7XHJcbiAgICAgICAgKHRoaXMub3V0cHV0RWwgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLnBhZGRpbmcgPSAnMTJweCc7XHJcbiAgICAgICAgKHRoaXMub3V0cHV0RWwgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpJztcclxuICAgICAgICAodGhpcy5vdXRwdXRFbCBhcyBIVE1MRWxlbWVudCkuc3R5bGUuYm9yZGVyUmFkaXVzID0gJzZweCc7XHJcbiAgICAgICAgKHRoaXMub3V0cHV0RWwgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnktYWx0KSc7XHJcbiAgICAgICAgKHRoaXMub3V0cHV0RWwgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmZvbnRGYW1pbHkgPSAndmFyKC0tZm9udC1tb25vc3BhY2UpJztcclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBMdWEgZW5naW5lIHdpdGggZXJyb3IgaGFuZGxpbmdcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmx1YUVuZ2luZS5pbml0aWFsaXplKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkT3V0cHV0KCdMdWEgQ29uc29sZSByZWFkeS4gVGhlIE9ic2lkaWFuIGFwcCBpcyBhdmFpbGFibGUgYXMgXCJhcHBcIi4nLCAnaW5mbycpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkT3V0cHV0KGBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBMdWE6ICR7ZXJyb3IubWVzc2FnZX1gLCAnZXJyb3InKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRPdXRwdXQoJ0NoZWNrIHRoZSBkZXZlbG9wZXIgY29uc29sZSBmb3IgZGV0YWlscy4nLCAnZXJyb3InKTtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignTHVhIGluaXRpYWxpemF0aW9uIGVycm9yOicsIGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuOyAvLyBEb24ndCBjcmVhdGUgaW5wdXQgaWYgaW5pdGlhbGl6YXRpb24gZmFpbGVkXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDcmVhdGUgaW5wdXQgYXJlYVxyXG4gICAgICAgIGNvbnN0IGlucHV0Q29udGFpbmVyID0gY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ2x1YS1jb25zb2xlLWlucHV0LWNvbnRhaW5lcicgfSk7XHJcbiAgICAgICAgKGlucHV0Q29udGFpbmVyIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5mbGV4U2hyaW5rID0gJzAnO1xyXG4gICAgICAgIChpbnB1dENvbnRhaW5lciBhcyBIVE1MRWxlbWVudCkuc3R5bGUucGFkZGluZyA9ICcxMHB4JztcclxuICAgICAgICAoaW5wdXRDb250YWluZXIgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmJvcmRlclRvcCA9ICcxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpJztcclxuICAgICAgICAoaW5wdXRDb250YWluZXIgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnkpJztcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmlucHV0RWwgPSBpbnB1dENvbnRhaW5lci5jcmVhdGVFbCgndGV4dGFyZWEnLCB7XHJcbiAgICAgICAgICAgIGNsczogJ2x1YS1jb25zb2xlLWlucHV0JyxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdFbnRlciBMdWEgY29kZS4uLicsXHJcbiAgICAgICAgICAgICAgICByb3dzOiAnMydcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEZvcmNlIG1vbm9zcGFjZSBhbmQgZnVsbCB3aWR0aFxyXG4gICAgICAgIHRoaXMuaW5wdXRFbC5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgICB0aGlzLmlucHV0RWwuc3R5bGUuZm9udEZhbWlseSA9ICd2YXIoLS1mb250LW1vbm9zcGFjZSknO1xyXG4gICAgICAgIHRoaXMuaW5wdXRFbC5zdHlsZS5mb250U2l6ZSA9ICcxM3B4JztcclxuICAgICAgICB0aGlzLmlucHV0RWwuc3R5bGUucGFkZGluZyA9ICcxMHB4JztcclxuICAgICAgICB0aGlzLmlucHV0RWwuc3R5bGUuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnO1xyXG4gICAgICAgIHRoaXMuaW5wdXRFbC5zdHlsZS5yZXNpemUgPSAndmVydGljYWwnO1xyXG4gICAgICAgIHRoaXMuaW5wdXRFbC5zdHlsZS5taW5IZWlnaHQgPSAnODBweCc7XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBrZXlib2FyZCBzaG9ydGN1dHNcclxuICAgICAgICB0aGlzLmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIFNoaWZ0ICsgQ3RybC9DbWQgKyBFbnRlciB0byBleGVjdXRlXHJcbiAgICAgICAgICAgIGlmIChlLnNoaWZ0S2V5ICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSAmJiBlLmtleSA9PT0gJ0VudGVyJykge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5leGVjdXRlQ29kZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBidXR0b24gY29udGFpbmVyXHJcbiAgICAgICAgY29uc3QgYnV0dG9uQ29udGFpbmVyID0gaW5wdXRDb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnbHVhLWNvbnNvbGUtYnV0dG9ucycgfSk7XHJcbiAgICAgICAgYnV0dG9uQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcbiAgICAgICAgYnV0dG9uQ29udGFpbmVyLnN0eWxlLmdhcCA9ICc4cHgnO1xyXG4gICAgICAgIGJ1dHRvbkNvbnRhaW5lci5zdHlsZS5tYXJnaW5Ub3AgPSAnOHB4JztcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBleGVjdXRlQnRuID0gYnV0dG9uQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7XHJcbiAgICAgICAgICAgIHRleHQ6ICdFeGVjdXRlIChTaGlmdCtDdHJsK0VudGVyKScsXHJcbiAgICAgICAgICAgIGNsczogJ21vZC1jdGEnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZXhlY3V0ZUJ0bi5zdHlsZS5mbGV4ID0gJzEnO1xyXG4gICAgICAgIGV4ZWN1dGVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmV4ZWN1dGVDb2RlKCkpO1xyXG5cclxuICAgICAgICBjb25zdCBjbGVhckJ0biA9IGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywge1xyXG4gICAgICAgICAgICB0ZXh0OiAnQ2xlYXIgT3V0cHV0J1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNsZWFyQnRuLnN0eWxlLmZsZXggPSAnMSc7XHJcbiAgICAgICAgY2xlYXJCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmNsZWFyT3V0cHV0KCkpO1xyXG5cclxuICAgICAgICBjb25zdCByZXNldEJ0biA9IGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywge1xyXG4gICAgICAgICAgICB0ZXh0OiAnUmVzZXQgU2Vzc2lvbicsXHJcbiAgICAgICAgICAgIGNsczogJ21vZC13YXJuaW5nJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJlc2V0QnRuLnN0eWxlLmZsZXggPSAnMSc7XHJcbiAgICAgICAgcmVzZXRCdG4uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3ZhcigtLWNvbG9yLXJlZCknO1xyXG4gICAgICAgIHJlc2V0QnRuLnN0eWxlLmNvbG9yID0gJ3ZhcigtLXRleHQtb24tYWNjZW50KSc7XHJcbiAgICAgICAgcmVzZXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLnJlc2V0U2Vzc2lvbigpKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBvbkNsb3NlKCkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMubHVhRW5naW5lLmNsZWFudXAoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGV4ZWN1dGVDb2RlKCkge1xyXG4gICAgICAgIGNvbnN0IGNvZGUgPSB0aGlzLmlucHV0RWwudmFsdWUudHJpbSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghY29kZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBEaXNwbGF5IHRoZSBpbnB1dFxyXG4gICAgICAgIHRoaXMuYWRkT3V0cHV0KGA+ICR7Y29kZX1gLCAnaW5wdXQnKTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5sdWFFbmdpbmUuZXhlY3V0ZShjb2RlKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCAmJiByZXN1bHQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkT3V0cHV0KHRoaXMuZm9ybWF0UmVzdWx0KHJlc3VsdCksICdzdWNjZXNzJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICB0aGlzLmFkZE91dHB1dChgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gLCAnZXJyb3InKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENsZWFyIGlucHV0IGFmdGVyIGV4ZWN1dGlvblxyXG4gICAgICAgIHRoaXMuaW5wdXRFbC52YWx1ZSA9ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZm9ybWF0UmVzdWx0KHJlc3VsdDogYW55KTogc3RyaW5nIHtcclxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXN1bHQsIG51bGwsIDIpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcocmVzdWx0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gU3RyaW5nKHJlc3VsdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhZGRPdXRwdXQodGV4dDogc3RyaW5nLCB0eXBlOiAnaW5wdXQnIHwgJ3N1Y2Nlc3MnIHwgJ2Vycm9yJyB8ICdpbmZvJyA9ICdzdWNjZXNzJykge1xyXG4gICAgICAgIGNvbnN0IGxpbmUgPSB0aGlzLm91dHB1dEVsLmNyZWF0ZURpdih7IGNsczogYGx1YS1jb25zb2xlLWxpbmUgbHVhLWNvbnNvbGUtJHt0eXBlfWAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ3JlYXRlIHByZS9jb2RlIHN0cnVjdHVyZSBmb3IgUHJpc21cclxuICAgICAgICBjb25zdCBjb2RlQmxvY2sgPSBsaW5lLmNyZWF0ZUVsKCdwcmUnKTtcclxuICAgICAgICBjb25zdCBjb2RlID0gY29kZUJsb2NrLmNyZWF0ZUVsKCdjb2RlJywgeyBjbHM6ICdsYW5ndWFnZS1sdWEnIH0pO1xyXG4gICAgICAgIGNvZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEFwcGx5IHN5bnRheCBoaWdobGlnaHRpbmcgaWYgUHJpc20gaXMgbG9hZGVkXHJcbiAgICAgICAgaWYgKHRoaXMucHJpc21Mb2FkZWQgJiYgd2luZG93LlByaXNtKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5QcmlzbS5oaWdobGlnaHRFbGVtZW50KGNvZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBTdHlsZSB0aGUgY29kZSBibG9jayBkaXJlY3RseVxyXG4gICAgICAgIGNvZGVCbG9jay5zdHlsZS5tYXJnaW4gPSAnMCc7XHJcbiAgICAgICAgY29kZUJsb2NrLnN0eWxlLnBhZGRpbmcgPSAnOHB4IDEwcHgnO1xyXG4gICAgICAgIGNvZGVCbG9jay5zdHlsZS5ib3JkZXJSYWRpdXMgPSAnNHB4JztcclxuICAgICAgICBjb2RlQmxvY2suc3R5bGUuZm9udEZhbWlseSA9ICd2YXIoLS1mb250LW1vbm9zcGFjZSknO1xyXG4gICAgICAgIGNvZGVCbG9jay5zdHlsZS5mb250U2l6ZSA9ICcxM3B4JztcclxuICAgICAgICBjb2RlQmxvY2suc3R5bGUud2hpdGVTcGFjZSA9ICdwcmUtd3JhcCc7XHJcbiAgICAgICAgY29kZUJsb2NrLnN0eWxlLndvcmRCcmVhayA9ICdicmVhay13b3JkJztcclxuICAgICAgICBjb2RlQmxvY2suc3R5bGUudXNlclNlbGVjdCA9ICd0ZXh0JztcclxuICAgICAgICBjb2RlQmxvY2suc3R5bGUuY3Vyc29yID0gJ3RleHQnO1xyXG4gICAgICAgIGNvZGVCbG9jay5zdHlsZS5vdmVyZmxvd1ggPSAnYXV0byc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQWRkIGNvbG9yZWQgbGVmdCBib3JkZXIgYmFzZWQgb24gdHlwZVxyXG4gICAgICAgIGlmICh0eXBlID09PSAnaW5wdXQnKSB7XHJcbiAgICAgICAgICAgIGNvZGVCbG9jay5zdHlsZS5ib3JkZXJMZWZ0ID0gJzNweCBzb2xpZCB2YXIoLS10ZXh0LW11dGVkKSc7XHJcbiAgICAgICAgICAgIGNvZGVCbG9jay5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndmFyKC0tY29kZS1iYWNrZ3JvdW5kKSc7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnc3VjY2VzcycpIHtcclxuICAgICAgICAgICAgY29kZUJsb2NrLnN0eWxlLmJvcmRlckxlZnQgPSAnM3B4IHNvbGlkIHZhcigtLXRleHQtYWNjZW50KSc7XHJcbiAgICAgICAgICAgIGNvZGVCbG9jay5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndmFyKC0tY29kZS1iYWNrZ3JvdW5kKSc7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnZXJyb3InKSB7XHJcbiAgICAgICAgICAgIGNvZGVCbG9jay5zdHlsZS5ib3JkZXJMZWZ0ID0gJzNweCBzb2xpZCB2YXIoLS10ZXh0LWVycm9yKSc7XHJcbiAgICAgICAgICAgIGNvZGVCbG9jay5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xyXG4gICAgICAgICAgICBjb2RlQmxvY2suc3R5bGUuY29sb3IgPSAndmFyKC0tdGV4dC1lcnJvciknO1xyXG4gICAgICAgICAgICBjb2RlLnN0eWxlLmNvbG9yID0gJ3ZhcigtLXRleHQtZXJyb3IpJztcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdpbmZvJykge1xyXG4gICAgICAgICAgICBjb2RlQmxvY2suc3R5bGUuYm9yZGVyTGVmdCA9ICczcHggc29saWQgdmFyKC0tdGV4dC1tdXRlZCknO1xyXG4gICAgICAgICAgICBjb2RlQmxvY2suc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3ZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KSc7XHJcbiAgICAgICAgICAgIGNvZGVCbG9jay5zdHlsZS5mb250U3R5bGUgPSAnaXRhbGljJztcclxuICAgICAgICAgICAgY29kZUJsb2NrLnN0eWxlLmNvbG9yID0gJ3ZhcigtLXRleHQtbXV0ZWQpJztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gUmVkdWNlIHNwYWNpbmcgYmV0d2VlbiBpbnB1dCBhbmQgb3V0cHV0XHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzdWNjZXNzJyB8fCB0eXBlID09PSAnZXJyb3InKSB7XHJcbiAgICAgICAgICAgIGxpbmUuc3R5bGUubWFyZ2luVG9wID0gJzRweCc7XHJcbiAgICAgICAgICAgIGxpbmUuc3R5bGUubWFyZ2luQm90dG9tID0gJzEycHgnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxpbmUuc3R5bGUubWFyZ2luQm90dG9tID0gJzRweCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEF1dG8tc2Nyb2xsIHRvIGJvdHRvbVxyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub3V0cHV0RWwuc2Nyb2xsVG9wID0gdGhpcy5vdXRwdXRFbC5zY3JvbGxIZWlnaHQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjbGVhck91dHB1dCgpIHtcclxuICAgICAgICB0aGlzLm91dHB1dEVsLmVtcHR5KCk7XHJcbiAgICAgICAgdGhpcy5hZGRPdXRwdXQoJ091dHB1dCBjbGVhcmVkLicsICdpbmZvJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyByZXNldFNlc3Npb24oKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sdWFFbmdpbmUuY2xlYW51cCgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMubHVhRW5naW5lLmluaXRpYWxpemUoKTtcclxuICAgICAgICB0aGlzLm91dHB1dEVsLmVtcHR5KCk7XHJcbiAgICAgICAgdGhpcy5hZGRPdXRwdXQoJ0x1YSBzZXNzaW9uIHJlc2V0LiBOZXcgVk0gaW5pdGlhbGl6ZWQuJywgJ2luZm8nKTtcclxuICAgIH1cclxufSIsICJpbXBvcnQgeyBBcHAgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IEx1YUZhY3RvcnksIEx1YUVuZ2luZSBhcyBXYXNtb29uRW5naW5lIH0gZnJvbSAnd2FzbW9vbic7XHJcblxyXG5leHBvcnQgY2xhc3MgTHVhRW5naW5lIHtcclxuICAgIHByaXZhdGUgZmFjdG9yeTogTHVhRmFjdG9yeSB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBsdWE6IFdhc21vb25FbmdpbmUgfCBudWxsID0gbnVsbDtcclxuICAgIHByaXZhdGUgYXBwOiBBcHA7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHApIHtcclxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGlmICh0aGlzLmx1YSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIGZhY3RvcnkgaGVyZSwgbm90IGluIGNvbnN0cnVjdG9yXHJcbiAgICAgICAgICAgIHRoaXMuZmFjdG9yeSA9IG5ldyBMdWFGYWN0b3J5KCk7XHJcbiAgICAgICAgICAgIHRoaXMubHVhID0gYXdhaXQgdGhpcy5mYWN0b3J5LmNyZWF0ZUVuZ2luZSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gRXhwb3NlIE9ic2lkaWFuIGFwcCB0byBMdWFcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5leHBvc2VPYnNpZGlhbkFQSSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gU2V0IHVwIHByaW50IGZ1bmN0aW9uIHRvIGNhcHR1cmUgb3V0cHV0XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0dXBQcmludENhcHR1cmUoKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBMdWEgZW5naW5lOicsIGVycm9yKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMdWEgaW5pdGlhbGl6YXRpb24gZmFpbGVkOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZXhwb3NlT2JzaWRpYW5BUEkoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmx1YSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgYSBKYXZhU2NyaXB0IHByb3h5IHRoYXQgTHVhIGNhbiBpbnRlcmFjdCB3aXRoXHJcbiAgICAgICAgY29uc3QgYXBwUHJveHkgPSB7XHJcbiAgICAgICAgICAgIGdldE5hbWU6ICgpID0+IHRoaXMuYXBwLnZhdWx0LmdldE5hbWUoKSxcclxuICAgICAgICAgICAgZ2V0QWN0aXZlRmlsZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZSA/IHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBmaWxlLnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogZmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhc2VuYW1lOiBmaWxlLmJhc2VuYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbjogZmlsZS5leHRlbnNpb25cclxuICAgICAgICAgICAgICAgIH0gOiBudWxsO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRBbGxGaWxlczogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKS5tYXAoZiA9PiAoe1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGYucGF0aCxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBmLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgYmFzZW5hbWU6IGYuYmFzZW5hbWVcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gRXhwb3NlIHRoZSBmdWxsIGFwcCBvYmplY3Qgd2l0aCBjYXV0aW9uXHJcbiAgICAgICAgICAgIF9yYXc6IHRoaXMuYXBwXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gU2V0IHRoZSBhcHAgZ2xvYmFsIGluIEx1YVxyXG4gICAgICAgIHRoaXMubHVhLmdsb2JhbC5zZXQoJ2FwcCcsIGFwcFByb3h5KTtcclxuXHJcbiAgICAgICAgLy8gQWRkIHNvbWUgaGVscGZ1bCB1dGlsaXR5IGZ1bmN0aW9uc1xyXG4gICAgICAgIHRoaXMubHVhLmdsb2JhbC5zZXQoJ2xvZycsIChtZXNzYWdlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tMdWFdJywgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgc2V0dXBQcmludENhcHR1cmUoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmx1YSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBPdmVycmlkZSBMdWEncyBwcmludCBmdW5jdGlvbiB0byByZXR1cm4gdmFsdWVzIGluc3RlYWQgb2YgcHJpbnRpbmcgdG8gc3Rkb3V0XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sdWEuZG9TdHJpbmcoYFxyXG4gICAgICAgICAgICBfcHJpbnRfb3V0cHV0ID0gXCJcIlxyXG4gICAgICAgICAgICBmdW5jdGlvbiBwcmludCguLi4pXHJcbiAgICAgICAgICAgICAgICBsb2NhbCBhcmdzID0gey4uLn1cclxuICAgICAgICAgICAgICAgIGxvY2FsIG91dHB1dCA9IHt9XHJcbiAgICAgICAgICAgICAgICBmb3IgaSwgdiBpbiBpcGFpcnMoYXJncykgZG9cclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQob3V0cHV0LCB0b3N0cmluZyh2KSlcclxuICAgICAgICAgICAgICAgIGVuZFxyXG4gICAgICAgICAgICAgICAgX3ByaW50X291dHB1dCA9IF9wcmludF9vdXRwdXQgLi4gdGFibGUuY29uY2F0KG91dHB1dCwgXCJcXFxcdFwiKSAuLiBcIlxcXFxuXCJcclxuICAgICAgICAgICAgZW5kXHJcbiAgICAgICAgYCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZXhlY3V0ZShjb2RlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGlmICghdGhpcy5sdWEpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMdWEgZW5naW5lIG5vdCBpbml0aWFsaXplZCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2xlYXIgcHJldmlvdXMgcHJpbnQgb3V0cHV0XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sdWEuZG9TdHJpbmcoJ19wcmludF9vdXRwdXQgPSBcIlwiJyk7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIEV4ZWN1dGUgdGhlIGNvZGVcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5sdWEuZG9TdHJpbmcoY29kZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGVyZSB3YXMgYW55IHByaW50IG91dHB1dFxyXG4gICAgICAgICAgICBjb25zdCBwcmludE91dHB1dCA9IGF3YWl0IHRoaXMubHVhLmRvU3RyaW5nKCdyZXR1cm4gX3ByaW50X291dHB1dCcpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHByaW50T3V0cHV0ICYmIHByaW50T3V0cHV0LnRyaW0oKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByaW50T3V0cHV0LnRyaW0oKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5mb3JtYXRMdWFFcnJvcihlcnJvcikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGZvcm1hdEx1YUVycm9yKGVycm9yOiBhbnkpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmIChlcnJvci5tZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5tZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gU3RyaW5nKGVycm9yKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjbGVhbnVwKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGlmICh0aGlzLmx1YSkge1xyXG4gICAgICAgICAgICB0aGlzLmx1YS5nbG9iYWwuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5mYWN0b3J5ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmx1YSA9IG51bGw7XHJcbiAgICB9XHJcbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQSxTQUFTLG1CQUFtQjtBQUN4QixRQUFNLElBQUksTUFBTSxpQ0FBaUM7QUFDckQ7QUFDQSxTQUFTLHNCQUFzQjtBQUMzQixRQUFNLElBQUksTUFBTSxtQ0FBbUM7QUFDdkQ7QUFVQSxTQUFTLFdBQVcsS0FBSztBQUNyQixNQUFJLHFCQUFxQixZQUFZO0FBRWpDLFdBQU8sV0FBVyxLQUFLLENBQUM7QUFBQSxFQUM1QjtBQUVBLE9BQ0sscUJBQXFCLG9CQUFvQixDQUFDLHFCQUMzQyxZQUNGO0FBQ0UsdUJBQW1CO0FBQ25CLFdBQU8sV0FBVyxLQUFLLENBQUM7QUFBQSxFQUM1QjtBQUNBLE1BQUk7QUFFQSxXQUFPLGlCQUFpQixLQUFLLENBQUM7QUFBQSxFQUNsQyxTQUFTLEdBQVA7QUFDRSxRQUFJO0FBRUEsYUFBTyxpQkFBaUIsS0FBSyxNQUFNLEtBQUssQ0FBQztBQUFBLElBQzdD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LE9BQU8sQ0FBQztBQUFFLG9CQUFNLElBQUksRUFBRSxFQUFFLEVBQUU7QUFBRSxjQUFFLE1BQUksRUFBRSxJQUFFLEVBQUMsS0FBSSxFQUFDLE1BQUssRUFBQyxHQUFFLEVBQUUsRUFBRSxHQUFFLEdBQUUsRUFBRSxFQUFFLEdBQUUsUUFBTyxFQUFFLEVBQUUsUUFBTyxHQUFFLEVBQUUsRUFBRSxHQUFFLFFBQU8sRUFBRSxFQUFFLFFBQU8sUUFBTyxFQUFFLEVBQUUsUUFBTyxPQUFNLEVBQUUsRUFBRSxPQUFNLFNBQVEsRUFBRSxFQUFFLFNBQVEsU0FBUSxFQUFFLEVBQUUsUUFBTyxHQUFFLFFBQU8sRUFBQyxHQUFFLEVBQUUsRUFBRSxFQUFDLEVBQUMsR0FBRSxNQUFLLEVBQUMsTUFBSyxFQUFDLEdBQUUsRUFBRSxFQUFFLEdBQUUsR0FBRSxFQUFFLEVBQUUsRUFBQyxHQUFFLFFBQU8sRUFBQyxHQUFFLEVBQUUsRUFBRSxHQUFFLE1BQUssRUFBRSxFQUFFLE1BQUssT0FBTSxFQUFFLEVBQUUsT0FBTSxHQUFFLEVBQUUsRUFBRSxHQUFFLEdBQUUsRUFBRSxFQUFFLEdBQUUsR0FBRSxFQUFFLEVBQUUsRUFBQyxFQUFDLEdBQUUsTUFBSyxFQUFDLE1BQUssRUFBQyxHQUFFLEVBQUUsRUFBRSxHQUFFLEdBQUUsRUFBRSxFQUFFLEdBQUUsVUFBUyxFQUFFLEVBQUUsU0FBUSxHQUFFLFFBQU8sQ0FBQyxFQUFDLEdBQUUsSUFBRyxFQUFDLE1BQUssRUFBQyxHQUFFLEVBQUUsRUFBRSxHQUFFLEdBQUUsRUFBRSxFQUFFLEVBQUMsR0FBRSxRQUFPLEVBQUUsR0FBRSxFQUFDO0FBQzFmLGdCQUFFLEVBQUUsV0FBVyxHQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUUsY0FBRSxFQUFFLElBQUksS0FBRyxFQUFFLElBQUUsRUFBRSxFQUFFLElBQUksTUFBSyxFQUFFLElBQUUsRUFBRSxFQUFFLElBQUksUUFBTyxFQUFFLElBQUUsQ0FBQyxLQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksS0FBRyxFQUFFLElBQUUsRUFBRSxFQUFFLEtBQUssTUFBSyxFQUFFLElBQUUsRUFBRSxFQUFFLEtBQUssUUFBTyxFQUFFLElBQUUsR0FBRSxFQUFFLElBQUUsUUFBTSxXQUFTLEVBQUUsT0FBSyxVQUFRLEVBQUUsSUFBRSxFQUFFLEVBQUUsS0FBSyxNQUFLLEVBQUUsSUFBRSxFQUFFLEVBQUUsS0FBSyxVQUFRLFVBQVEsRUFBRSxPQUFLLFdBQVMsRUFBRSxJQUFFLEVBQUUsRUFBRSxHQUFHLE1BQUssRUFBRSxJQUFFLEVBQUUsRUFBRSxHQUFHO0FBQVEsY0FBRSxZQUFVLEtBQUssSUFBSTtBQUFFLGtCQUFJLEVBQUUsRUFBRSxDQUFDLElBQUUsR0FBRSxFQUFFLFlBQVUsRUFBRTtBQUFXLG1CQUFPO0FBQUEsVUFBQyxHQUFFLEdBQUcsR0FBRTtBQUFDLG1CQUFPLEVBQUUsSUFBRSxFQUFFLEVBQUUsV0FBUyxFQUFFLEVBQUUsU0FBUyxHQUFFLEVBQUUsQ0FBQyxJQUFFLElBQUksV0FBVyxFQUFFLENBQUMsSUFBRSxJQUFJLFdBQVcsQ0FBQztBQUFBLFVBQUMsR0FBRSxHQUFFLEVBQUMsRUFBRSxHQUFFO0FBQUMsZ0JBQUksSUFBRSxDQUFDO0FBQUUsY0FBRSxNQUFJLFVBQVEsRUFBRSxPQUFLLFNBQU8sRUFBRSxLQUFHO0FBQUUsY0FBRSxNQUFJLEVBQUU7QUFBRyxjQUFFLE9BQ2xmLEVBQUU7QUFBSyxjQUFFLFFBQU07QUFBRSxjQUFFLE1BQUk7QUFBRSxjQUFFLE1BQUk7QUFBRSxjQUFFLE9BQUssRUFBRTtBQUFLLGNBQUUsRUFBRSxJQUFJLElBQUUsRUFBRSxPQUFLLE9BQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxJQUFFLEVBQUUsT0FBSyxFQUFFLElBQUUsV0FBUyxFQUFFLE9BQUssU0FBTyxFQUFFLE9BQUssRUFBRSxLQUFLLFNBQU8sRUFBRSxPQUFLO0FBQUUsY0FBRSxRQUFNLElBQUksS0FBSyxFQUFFLFNBQVM7QUFBRSxjQUFFLFFBQU0sSUFBSSxLQUFLLEVBQUUsU0FBUztBQUFFLGNBQUUsUUFBTSxJQUFJLEtBQUssRUFBRSxT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Q3BmLFFBQU87QUFBQSxZQUFHLFNBQVE7QUFBQSxZQUFJLE9BQU07QUFBQSxZQUFHLFFBQU87QUFBQSxZQUFHLE9BQU07QUFBQSxZQUFHLFFBQU87QUFBQSxZQUFHLFNBQVE7QUFBQSxZQUFHLFFBQU87QUFBQSxZQUFHLFFBQU87QUFBQSxZQUFHLFFBQU87QUFBQSxZQUFHLFFBQU87QUFBQSxZQUFHLFFBQU87QUFBQSxZQUFHLFNBQVE7QUFBQSxZQUFHLE9BQU07QUFBQSxZQUFHLFFBQU87QUFBQSxZQUFHLFFBQU87QUFBQSxZQUFHLE9BQU07QUFBQSxZQUFHLFFBQU87QUFBQSxZQUFHLE9BQU07QUFBQSxZQUFHLE1BQUs7QUFBQSxZQUFHLFFBQU87QUFBQSxZQUFHLFFBQU87QUFBQSxZQUFHLE9BQU07QUFBQSxZQUFHLFFBQU87QUFBQSxZQUFJLFVBQVM7QUFBQSxZQUFJLFFBQU87QUFBQSxZQUFJLFFBQU87QUFBQSxZQUFJLFFBQU87QUFBQSxZQUFJLFNBQVE7QUFBQSxZQUFJLFFBQU87QUFBQSxZQUFJLFFBQU87QUFBQSxZQUFJLFNBQVE7QUFBQSxZQUFHLFFBQU87QUFBQSxZQUFHLE9BQU07QUFBQSxZQUFJLE9BQU07QUFBQSxZQUFJLFFBQU87QUFBQSxZQUFJLFFBQU87QUFBQSxZQUFJLFNBQVE7QUFBQSxZQUFJLFNBQVE7QUFBQSxZQUFJLFdBQVU7QUFBQSxZQUFHLFFBQU87QUFBQSxZQUFJLFFBQU87QUFBQSxZQUFJLFNBQVE7QUFBQSxZQUFJLE9BQU07QUFBQSxZQUFJLE9BQU07QUFBQSxZQUFJLFFBQU87QUFBQSxZQUFJLFFBQU87QUFBQSxZQUFJLFNBQVE7QUFBQSxZQUNyZixTQUFRO0FBQUEsWUFBRyxNQUFLO0FBQUEsWUFBSSxRQUFPO0FBQUEsWUFBSSxPQUFNO0FBQUEsWUFBSSxRQUFPO0FBQUEsWUFBRyxXQUFVO0FBQUEsWUFBRyxTQUFRO0FBQUEsWUFBSSxTQUFRO0FBQUEsWUFBRSxVQUFTO0FBQUEsWUFBSSxRQUFPO0FBQUEsWUFBSSxTQUFRO0FBQUEsWUFBSSxTQUFRO0FBQUEs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LEtBQUcsRUFBRSxRQUFNLElBQUUsRUFBRSxFQUFFO0FBQU0sa0JBQUcsQ0FBQyxLQUFHLEVBQUU7QUFBRSxxQkFBSSxJQUFFLEdBQUUsV0FBUyxFQUFFLE9BQUs7QUFBUSxzQkFBRyxJQUFFLEVBQUUsU0FBUyxDQUFDLEdBQUUsSUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFFLEVBQUUsR0FBRSxFQUFDLElBQUcsRUFBRSxLQUFHLEVBQUMsQ0FBQyxFQUFFLE1BQUssS0FBRztBQUFJLDBCQUFNLElBQUksRUFBRSxFQUFFLEVBQUU7QUFBQTtBQUFBLFlBQUU7QUFBQyxtQkFBTyxFQUFDLE1BQUssR0FBRSxNQUFLLEVBQUM7QUFBQSxVQUFDO0FBQzViLG1CQUFTLEdBQUcsR0FBRTtBQUFDLHFCQUFRLE9BQUk7QUFBQyxrQkFBRyxFQUFFLEVBQUUsQ0FBQztBQUFFLHVCQUFPLElBQUUsRUFBRSxFQUFFLElBQUcsSUFBRSxRQUFNLEVBQUUsRUFBRSxTQUFPLENBQUMsSUFBRSxHQUFHLEtBQUssTUFBSSxJQUFFLElBQUU7QUFBRSxrQkFBRSxJQUFFLEdBQUcsRUFBRSxRQUFRLE1BQUksRUFBRTtBQUFLLGtCQUFFLEVBQUU7QUFBQSxZQUFPO0FBQUEsVUFBQztBQUFDLG1CQUFTLEdBQUcsR0FBRSxHQUFFO0FBQUMscUJBQVEsSUFBRSxHQUFFLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTztBQUFJLG1CQUFHLEtBQUcsS0FBRyxJQUFFLEVBQUUsV0FBVyxDQUFDLElBQUU7QUFBRSxvQkFBUSxJQUFFLE1BQUksS0FBRyxFQUFFLEVBQUU7QUFBQSxVQUFNO0FBQUMsbUJBQVMsR0FBRyxHQUFFO0FBQUMsZ0JBQUksSUFBRSxHQUFHLEVBQUUsT0FBTyxJQUFHLEVBQUUsSUFBSTtBQUFFLGNBQUUsSUFBRSxFQUFFLEVBQUUsQ0FBQztBQUFFLGNBQUUsRUFBRSxDQUFDLElBQUU7QUFBQSxVQUFFO0FBQUMsbUJBQVMsR0FBRyxHQUFFO0FBQUMsZ0JBQUksSUFBRSxHQUFHLEVBQUUsT0FBTyxJQUFHLEVBQUUsSUFBSTtBQUFFLGdCQUFHLEVBQUUsRUFBRSxDQUFDLE1BQUk7QUFBRSxnQkFBRSxFQUFFLENBQUMsSUFBRSxFQUFFO0FBQUE7QUFBTyxtQkFBSSxJQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUUsS0FBRztBQUFDLG9CQUFHLEVBQUUsTUFBSSxHQUFFO0FBQUMsb0JBQUUsSUFBRSxFQUFFO0FBQUU7QUFBQSxnQkFBSztBQUFDLG9CQUFFLEVBQUU7QUFBQSxjQUFFO0FBQUEsVUFBQztBQUFDLG1CQUFTLEdBQUcsR0FBRTtBQUFDLGdCQUFJLElBQUUsQ0FBQyxLQUFJLEtBQUksSUFBSSxFQUFFLElBQUUsQ0FBQztBQUFFLGdCQUFFLFFBQU0sS0FBRztBQUFLLG1CQUFPO0FBQUEsVUFBQztBQUMvZSxtQkFBUyxHQUFHLEdBQUUsR0FBRTtBQUFDLGdCQUFHLEVBQUU7QUFBRyxxQkFBTztBQUFFLGdCQUFHLENBQUMsRUFBRSxTQUFTLEdBQUcsS0FBRyxFQUFFLE9BQUssS0FBSTtBQUFDLGtCQUFHLEVBQUUsU0FBUyxHQUFHLEtBQUcsRUFBRSxFQUFFLE9BQUssUUFBTSxFQUFFLFNBQVMsR0FBRyxLQUFHLEVBQUUsRUFBRSxPQUFLO0FBQUksdUJBQU87QUFBQSxZQUFDO0FBQU0scUJBQU87QUFBRSxtQkFBTztBQUFBLFVBQUM7QUFBQyxtQkFBUyxHQUFHLEdBQUUsR0FBRTtBQUFDLGdCQUFHO0FBQUMscUJBQU8sRUFBRSxHQUFFLENBQUMsR0FBRTtBQUFBLFlBQUUsU0FBTyxHQUFOO0FBQUEsWUFBUztBQUFDLG1CQUFPLEdBQUcsR0FBRSxJQUFJO0FBQUEsVUFBQztBQUFDLG1CQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBQyxnQkFBRztBQUFDLGtCQUFJLElBQUUsRUFBRSxHQUFFLENBQUM7QUFBQSxZQUFFLFNBQU8sR0FBTjtBQUFTLHFCQUFPLEVBQUU7QUFBQSxZQUFDO0FBQUMsZ0JBQUcsSUFBRSxHQUFHLEdBQUUsSUFBSTtBQUFFLHFCQUFPO0FBQUUsZ0JBQUcsR0FBRTtBQUFDLGtCQUFHLENB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SUFBRTtBQUFLLGtCQUFFLEVBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBQztBQUFFLGdCQUFFLE9BQUssQ0FBQztBQUFFLGdCQUFFLEVBQUUsRUFBRSxPQUFPLEdBQUUsQ0FBQztBQUFBLFlBQUU7QUFBQSxZQUFFLE9BQU8sR0FBRSxHQUFFO0FBQUMscUJBQU8sRUFBRSxFQUFFLE9BQU8sR0FBRSxDQUFDO0FBQUEsWUFBQztBQUFBLFlBQUUsRUFBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLGtCQUFJLElBQUUsRUFBRSxHQUFFLEVBQUMsUUFBTyxLQUFFLENBQUMsRUFBRTtBQUFLLGtCQUFFLEVBQUUsQ0FBQztBQUFFLGtCQUFHLENBQUMsS0FBRyxRQUFNLEtBQUcsU0FBTztBQUFFLHNCQUFNLElBQUksRUFBRSxFQUFFLEVBQUU7QUFBRSxrQkFBSSxJQUFFLEdBQUcsR0FBRSxDQUFDO0FBQUUsa0JBQUc7QUFBRSxzQkFBTSxJQUFJLEVBQUUsRUFBRSxDQUFDO0FBQUUsa0JBQUcsQ0FBQyxFQUFFLEVBQUU7QUFBRSxzQkFBTSxJQUFJLEVBQUUsRUFBRSxFQUFFO0FBQy9mLHFCQUFPLEVBQUUsRUFBRSxFQUFFLEdBQUUsR0FBRSxHQUFFLENBQUM7QUFBQSxZQUFDO0FBQUEsWUFBRSxPQUFPLEdBQUUsR0FBRTtBQUFDLHFCQUFPLEVBQUUsRUFBRSxJQUFHLFdBQVMsSUFBRSxJQUFFLE9BQUssT0FBSyxPQUFNLENBQUM7QUFBQSxZQUFDO0FBQUEsWUFBRSxNQUFNLEdBQUUsR0FBRTtBQUFDLHFCQUFPLEVBQUUsRUFBRSxJQUFHLFdBQVMsSUFBRSxJQUFFLE9BQUssT0FBSyxPQUFNLENBQUM7QUFBQSxZQUFDO0FBQUEsWUFBRSxHQUFHLEdBQUUsR0FBRTtBQUFDLGtCQUFFLEVBQUUsTUFBTSxHQUFHO0FBQUUsdUJBQVEsSUFBRSxJQUFHLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTyxFQUFFO0FBQUUsb0JBQUcsRUFBRSxDQUFDLEdBQUU7QUFBQyx1QkFBRyxNQUFJLEVBQUUsQ0FBQztBQUFFLHNCQUFHO0FBQUMsc0JBQUUsTUFBTSxHQUFFLENBQUM7QUFBQSxrQkFBRSxTQUFPLEdBQU47QUFBUyx3QkFBRyxNQUFJLEVBQUU7QUFBRSw0QkFBTTtBQUFBLGtCQUFFO0FBQUEsZ0JBQUM7QUFBQSxZQUFDO0FBQUEsWUFBRSxRQUFRLEdBQUUsR0FBRTtBQUFDLGtCQUFHLENBQUMsR0FBRyxDQUFDO0FBQUUsc0JBQU0sSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUFFLGtCQUFJLElBQUUsRUFBRSxHQUFFLEVBQUMsUUFBTyxLQUFFLENBQUMsRUFBRTtBQUFLLGtCQUFHLENBQUM7QUFBRSxzQkFBTSxJQUFJLEVBQUUsRUFBRSxFQUFFO0FBQUUsa0JBQUUsRUFBRSxDQUFDO0FBQUUsa0JBQUksSUFBRSxHQUFHLEdBQUUsQ0FBQztBQUFFLGtCQUFHO0FBQUUsc0JBQU0sSUFBSSxFQUFFLEVBQUUsQ0FBQztBQUFFLGtCQUFHLENBQUMsRUFBRSxFQUFFO0FBQVEsc0JBQU0sSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUFFLHFCQUFPLEVBQUUsRUFBRSxRQUFRLEdBQUUsR0FBRSxDQUFDO0FBQUEsWUFBQztBQUFBLFlBQUUsT0FBTyxHQUFFLEdBQUU7QUFBQyxrQkFBSSxJQUFFLEdBQUcsQ0FBQyxHQUFFLElBQUUsR0FBRyxDQUFDLEdBQUUsSUFBRSxFQUFFLENBQUMsR0FDcGYsSUFBRSxFQUFFLENBQUM7QUFBRSxrQkFBSSxJQUFFLEVBQUUsR0FBRSxFQUFDLFFBQU8sS0FBRSxDQUFDO0FBQUUsa0JBQUksSUFBRSxFQUFFO0FBQUssa0JBQUUsRUFBRSxHQUFFLEVBQUMsUUFBTyxLQUFFLENBQUM7QUFBRSxrQkFBRSxFQUFFO0FBQUssa0JBQUcsQ0FBQyxLQUFHLENBQUM7QUFBRSxzQkFBTSxJQUFJLEVBQUUsRUFBRSxFQUFFO0FBQUUsa0JBQUcsRUFBRSxNQUFJLEVBQUU7QUFBRSxzQkFBTSxJQUFJLEVBQUUsRUFBRSxFQUFFO0FBQUUsa0JBQUksSUFBRSxFQUFFLEdBQUUsQ0FBQztBQUFFLGtCQUFFLEdBQUcsR0FBRSxDQUFDO0FBQUUsa0JBQUcsUUFBTSxFQUFFLE9BQU8sQ0FBQztBQUFFLHNCQUFNLElBQUksRUFBRSxFQUFFLEVBQUU7QUFBRSxrQkFBRSxHQUFHLEdBQUUsQ0FBQztBQUFFLGtCQUFHLFFBQU0sRUFBRSxPQUFPLENBQUM7QUFBRSxzQkFBTSxJQUFJLEVBQUUsRUFBRSxFQUFFO0FBQUUsa0JBQUc7QUFBQyxvQkFBSSxJQUFFLEVBQUUsR0FBRSxDQUFDO0FBQUEsY0FBRSxTQUFPLEdBQU47QUFBQSxjQUFTO0FBQUMsa0JBQUcsTUFBSSxHQUFFO0FBQUMsb0JBQUUsRUFBRSxFQUFFLElBQUk7QUFBRSxvQkFBRyxJQUFFLEdBQUcsR0FBRSxHQUFFLENBQUM7QUFBRSx3QkFBTSxJQUFJLEVBQUUsRUFBRSxDQUFDO0FBQUUsb0JBQUcsSUFBRSxJQUFFLEdBQUcsR0FBRSxHQUFFLENBQUMsSUFBRSxHQUFHLEdBQUUsQ0FBQztBQUFFLHdCQUFNLElBQUksRUFBRSxFQUFFLENBQUM7QUFBRSxvQkFBRyxDQUFDLEVBQUUsRUFBRTtBQUFPLHdCQUFNLElBQUksRUFBRSxFQUFFLEVBQUU7QUFBRSxvQkFBRyxFQUFFLEtBQUcsS0FBRyxFQUFFO0FBQUUsd0JBQU0sSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUFFLG9CQUFHLE1BQUksTUFBSSxJQUFFLEdBQUcsR0FBRSxHQUFHO0FBQUcsd0JBQU0sSUFBSSxFQUFFLEVBQUUsQ0FBQztBQUFFLG1CQUFHLENBQUM7QUFBRSxvQkFBRztBQUFDLG9CQUFFLEVBQUUsT0FBTyxHQUFFLEdBQUUsQ0FBQztBQUFBLGdCQUFFLFNBQU8sR0FBTjtBQUFTLHdCQUFNO0FBQUEsZ0JBQ3BnQixVQUFDO0FBQVEscUJBQUcsQ0FBQztBQUFBLGdCQUFFO0FBQUEsY0FBQztBQUFBLFlBQUM7QUFBQSxZQUFFLE1BQU0sR0FBRTtBQUFDLGtCQUFJLElBQUUsRUFBRSxHQUFFLEVBQUMsUUFBTyxLQUFFLENBQUMsRUFBRTtBQUFLLGtCQUFFLEVBQUUsQ0FBQztBQUFFLGtCQUFJLElBQUUsRUFBRSxHQUFFLENBQUMsR0FBRSxJQUFFLEdBQUcsR0FBRSxHQUFFLElBQUU7QUFBRSxrQkFBRztBQUFFLHNCQUFNLElBQUksRUFBRSxFQUFFLENBQUM7QUFBRSxrQkFBRyxDQUFDLEVBQUUsRUFBRTtBQUFNLHNCQUFNLElBQUksRUFBRSxFQUFFLEVBQUU7QUFBRSxrQkFBRyxFQUFFO0FBQUUsc0JBQU0sSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUFFLGdCQUFFLEVBQUUsTUFBTSxHQUFFLENBQUM7QUFBRSxpQkFBRyxDQUFDO0FBQUEsWUFBRTtBQUFBLFlBQUUsUUFBUSxHQUFFO0FBQUMsa0JBQUUsRUFBRSxHQUFFLEVBQUMsR0FBRSxLQUFFLENBQUMsRUFBRTtBQUFLLGtCQUFHLENBQUMsRUFBRSxFQUFFO0FBQVEsc0JBQU0sSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUFFLHFCQUFPLEVBQUUsRUFBRSxRQUFRLENBQUM7QUFBQSxZQUFDO0FBQUEsWUFBRSxPQUFPLEdBQUU7QUFBQyxrQkFBSSxJQUFFLEVBQUUsR0FBRSxFQUFDLFFBQU8sS0FBRSxDQUFDLEVBQUU7QUFBSyxrQkFBRyxDQUFDO0FBQUUsc0JBQU0sSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUFFLGtCQUFFLEVBQUUsQ0FBQztBQUFFLGtCQUFJLElBQUUsRUFBRSxHQUFFLENBQUMsR0FBRSxJQUFFLEdBQUcsR0FBRSxHQUFFLEtBQUU7QUFBRSxrQkFBRztBQUFFLHNCQUFNLElBQUksRUFBRSxFQUFFLENBQUM7QUFBRSxrQkFBRyxDQUFDLEVBQUUsRUFBRTtBQUFPLHNCQUFNLElBQUksRUFBRSxFQUFFLEVBQUU7QUFBRSxrQkFBRyxFQUFFO0FBQUUsc0JBQU0sSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUFFLGdCQUFFLEVBQUUsT0FBTyxHQUFFLENBQUM7QUFBRSxpQkFBRyxDQUFDO0FBQUEsWUFBRTtBQUFBLFlBQUUsU0FBUyxHQUFFO0FBQUMsa0JBQUUsRUFBRSxDQUFDLEVBQUU7QUFBSyxrQkFBRyxDQUFDO0FBQUUsc0JBQU0sSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUMzZ0Isa0JBQUcsQ0FBQyxFQUFFLEVBQUU7QUFBUyxzQkFBTSxJQUFJLEVBQUUsRUFBRSxFQUFFO0FBQUUscUJBQU8sR0FBRyxHQUFHLEVBQUUsTUFBTSxHQUFFLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUFBLFlBQUM7QUFBQSxZQUFFLEtBQUssR0FBRSxHQUFFO0FBQUMsa0JBQUUsRUFBRSxHQUFFLEVBQUMsR0FBRSxDQUFDLEVBQUMsQ0FBQyxFQUFFO0FBQUssa0JBQUcsQ0FBQztBQUFFLHNCQUFNLElBQUksRUFBRSxFQUFFLEVBQUU7QUFBRSxrQkFBRyxDQUFDLEVBQUUsRUFBRTtBQUFFLHNCQUFNLElBQUksRUFBRSxFQUFFLEVBQUU7QUFBRSxxQkFBTyxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQUEsWUFBQztBQUFBLFlBQUUsTUFBTSxHQUFFO0FBQUMscUJBQU8sRUFBRSxLQUFLLEdBQUUsSUFBRTtBQUFBLFlBQUM7QUFBQSxZQUFFLE1BQU0sR0FBRSxHQUFFLEdBQUU7QUFBQyxrQkFBRSxZQUFVLE9BQU8sSUFBRSxFQUFFLEdBQUUsRUFBQyxHQUFFLENBQUMsRUFBQyxDQUFDLEVBQUUsT0FBSztBQUFFLGtCQUFHLENBQUMsRUFBRSxFQUFFO0FBQUUsc0JBQU0sSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUFFLGdCQUFFLEVBQUUsRUFBRSxHQUFFLEVBQUMsTUFBSyxJQUFFLE9BQUssRUFBRSxPQUFLLE9BQU0sV0FBVSxLQUFLLElBQUksRUFBQyxDQUFDO0FBQUEsWUFBRTtBQUFBLFlBQUUsT0FBTyxHQUFFLEdBQUU7QUFBQyxnQkFBRSxNQUFNLEdBQUUsR0FBRSxJQUFFO0FBQUEsWUFBRTtBQUFBLFlBQUUsT0FBTyxHQUFFLEdBQUU7QUFBQyxrQkFBRSxFQUFFLENBQUM7QUFBRSxnQkFBRSxNQUFNLEVBQUUsTUFBSyxDQUFDO0FBQUEsWUFBRTtBQUFBLFlBQUUsTUFBTSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsa0JBQUUsWUFBVSxPQUFPLElBQUUsRUFBRSxHQUFFLEVBQUMsR0FBRSxDQUFDLEVBQUMsQ0FB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QUFLLFdBQVMsS0FBRztBQUFNLGtCQUFHLElBQUUsU0FBTyxDQUFDLEVBQUUsRUFBRSxJQUFJO0FBQUUsc0JBQU0sSUFBSSxFQUFFLEVBQUUsRUFBRTtBQUFFLGtCQUFHLENBQUMsTUFBSSxJQUFFLElBQUUsV0FDcGYsRUFBRSxPQUFLLFNBQU8sS0FBRyxFQUFFLEVBQUUsSUFBSSxNQUFJLFFBQU0sR0FBRyxDQUFDLEtBQUcsSUFBRSxPQUFLLEtBQUcsR0FBRyxHQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUU7QUFBSSxzQkFBTSxJQUFJLEVBQUUsRUFBRSxDQUFDO0FBQUUsa0JBQUUsT0FBSyxDQUFDLEtBQUcsRUFBRSxTQUFTLEdBQUUsQ0FBQztBQUFFLG1CQUFHO0FBQVEsa0JBQUUsR0FBRyxFQUFDLE1BQUssR0FBRSxNQUFLLEdBQUcsQ0FBQyxHQUFFLE9BQU0sR0FBRSxVQUFTLE1BQUcsVUFBUyxHQUFFLEdBQUUsRUFBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLE9BQU0sTUFBRSxDQUFDO0FBQUUsZ0JBQUUsRUFBRSxRQUFNLEVBQUUsRUFBRSxLQUFLLENBQUM7QUFBRSxlQUFDLEVBQUUsZ0JBQWMsSUFBRSxNQUFJLEVBQUUsT0FBSyxFQUFFLEtBQUcsQ0FBQyxJQUFHLEtBQUssRUFBRSxPQUFLLEVBQUUsR0FBRyxDQUFDLElBQUU7QUFBSSxxQkFBTztBQUFBLFlBQUM7QUFBQSxZQUFFLE1BQU0sR0FBRTtBQUFDLGtCQUFHLFNBQU8sRUFBRTtBQUFHLHNCQUFNLElBQUksRUFBRSxFQUFFLENBQUM7QUFBRSxnQkFBRSxPQUFLLEVBQUUsS0FBRztBQUFNLGtCQUFHO0FBQUMsa0JBQUUsRUFBRSxTQUFPLEVBQUUsRUFBRSxNQUFNLENBQUM7QUFBQSxjQUFFLFNBQU8sR0FBTjtBQUFTLHNCQUFNO0FBQUEsY0FBRSxVQUFDO0FBQVEsa0JBQUUsUUFBUSxFQUFFLEVBQUUsSUFBRTtBQUFBLGNBQUs7QUFBQyxnQkFBRSxLQUFHO0FBQUEsWUFBSztBQUFBLFlBQUUsRUFBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLGtC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QkFBSSxJQUFFLEVBQUU7QUFBRSx3QkFBRSxLQUFHLENBQUMsSUFBRTtBQUFNLHdCQUFFLElBQUUsS0FBRyxDQUFDLElBQUU7QUFBRSx3QkFBRSxJQUFFLEtBQUcsQ0FBQyxJQUFFO0FBQUksd0JBQUUsSUFBRSxNQUFJLENBQUMsSUFBRTtBQUFNLCtCQUFRLElBQUUsR0FBRSxLQUFHLEdBQUU7QUFBSSwwQkFBRSxJQUFFLElBQUUsTUFBSSxDQUFDLElBQUUsRUFBRSxDQUFDLEtBQUc7QUFBQSxvQkFBRTtBQUFDLDJCQUFPO0FBQUEsa0JBQUUsS0FBSztBQUFBLGtCQUFNLEtBQUs7QUFBQSxrQkFBTSxLQUFLO0FBQU0sMkJBQU8sRUFBRSxNQUM3ZixJQUFFO0FBQUEsa0JBQUksS0FBSztBQUFBLGtCQUFNLEtBQUs7QUFBQSxrQkFBTSxLQUFLO0FBQU0sd0JBQUcsQ0FBQyxFQUFFO0FBQUksNkJBQU87QUFBSSx3QkFBRyxFQUFFLElBQUksRUFBRTtBQUFHLDJCQUFJLElBQUUsRUFBRSxHQUFFLElBQUUsQ0FBQyxHQUFFLElBQUUsR0FBRSxLQUFHLEdBQUU7QUFBSSwwQkFBRSxLQUFLLEVBQUUsSUFBRSxJQUFFLE1BQUksQ0FBQyxDQUFDO0FBQUUsMkJBQU87QUFBQSxrQkFBRSxLQUFLO0FBQU0sd0JBQUcsQ0FBQyxFQUFFO0FBQUksNkJBQU87QUFBSSx3QkFBRSxFQUFFO0FBQUUsMkJBQU8sRUFBRSxLQUFHLENBQUMsSUFBRTtBQUFBLGtCQUFFLEtBQUs7QUFBTSwyQkFBTyxFQUFFLE1BQUksTUFBSTtBQUFBLGtCQUFJLEtBQUs7QUFBTSwyQkFBTyxJQUFFLEVBQUUsR0FBRSxFQUFFLEdBQUcsR0FBRSxHQUFFLENBQUM7QUFBQSxrQkFBRSxLQUFLO0FBQU0sd0JBQUcsQ0FBQyxFQUFFO0FBQUksNkJBQU87QUFBSSxzQkFBRSxJQUFJLEVBQUUsT0FBSyxJQUFFLENBQUMsSUFBRyxFQUFFLEdBQUUsSUFBRSxFQUFFLEdBQUUsR0FBRyxLQUFHLENBQUMsSUFBRSxFQUFFLENBQUMsR0FBRSxHQUFHLElBQUUs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LElBQUUsSUFBSSxLQUFNLElBQUksS0FBSyxFQUFFLElBQUUsTUFBSyxHQUFFLENBQUMsRUFBRyxRQUFRLENBQUMsR0FBRSxJQUFFLEtBQUc7QUFBQyxzQkFBSSxJQUFFLEVBQUUsU0FBUyxHQUFFLEtBQUcsR0FBRyxFQUFFLFlBQVksQ0FBQyxJQUFFLEtBQUcsSUFBSSxDQUFDO0FBQUUsc0JBQUcsSUFBRSxJQUFFLEVBQUUsUUFBUTtBQUFFLHlCQUFHLElBQUUsRUFBRSxRQUFRLElBQUUsR0FBRSxFQUFFLFFBQVEsQ0FBQyxHQUFFLEtBQUcsSUFBRSxFQUFFLFNBQVMsSUFBRSxDQUFDLEtBQUcsRUFBRSxTQUFTLENBQUMsR0FBRSxFQUFFLFlBQVksRUFBRSxZQUFZLElBQUUsQ0FBQztBQUFBLHVCQUFRO0FBQUMsc0JBQUUsUUFBUSxFQUFFLFFBQVEsSUFBRSxDQUFDO0FBQUU7QUFBQSxrQkFBSztBQUFBLGdCQUFDO0FBQUMsb0JBQUUsSUFBSSxLQUFLLEVBQUUsWUFBWSxJQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUUsb0JBQUUsRUFBRSxJQUFJLEtBQUssRUFBRSxZQUFZLEdBQUUsR0FBRSxDQUFDLENBQUM7QUFBRSxvQkFBRSxFQUFFLENBQUM7QUFBRSx1QkFBTyxLQUFHLEVBQUUsR0FBRSxDQUFDLElBQUUsS0FBRyxFQUFFLEdBQUUsQ0FBQyxJQUFFLEVBQUUsWUFBWSxJQUMvZixJQUFFLEVBQUUsWUFBWSxJQUFFLEVBQUUsWUFBWSxJQUFFO0FBQUEsY0FBQztBQUFDLGtCQUFJLElBQUUsRUFBRSxJQUFFLE1BQUksQ0FBQztBQUFFLGtCQUFFLEVBQUMsSUFBRyxFQUFFLEtBQUcsQ0FBQyxHQUFFLElBQUcsRUFBRSxJQUFFLEtBQUcsQ0FBQyxHQUFFLEdBQUUsRUFBRSxJQUFFLEtBQUcsQ0FBQyxHQUFFLElBQUcsRUFBRSxJQUFFLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxJQUFFLE1BQUksQ0FBQyxHQUFFLEdBQUUsRUFBRSxJQUFFLE1BQUksQ0FBQyxHQUFFLEdBQUUsRUFBRSxJQUFFLE1BQUksQ0FBQyxHQUFFLEdBQUUsRUFBRSxJQUFFLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxJQUFFLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxJQUFFLE1BQUksQ0FBQyxHQUFFLElBQUcsSUFBRSxFQUFFLENBQUMsSUFBRSxHQUFFO0FBQUUsa0JBQUUsRUFBRSxDQUFDO0FBQUUsa0JBQUU7QUFBQSxnQkFBQyxNQUFLO0FBQUEsZ0JBQXVCLE1BQUs7QUFBQSxnQkFBVyxNQUFLO0FBQUEsZ0JBQVcsTUFBSztBQUFBLGdCQUFLLE1BQUs7QUFBQSxnQkFBYyxNQUFLO0FBQUEsZ0JBQVEsTUFBSztBQUFBLGdCQUFXLE1BQUs7QUFBQSxnQkFBVyxNQUFLO0FBQUEsZ0JBQVcsT0FBTTtBQUFBLGdCQUFLLE9BQU07QUFBQSxnQkFBSyxPQUFNO0FBQUEsZ0JBQVcsT0FBTTtBQUFBLGdCQUFXLE9BQU07QUFBQSxnQkFBSyxPQUFNO0FBQUEsZ0JBQUssT0FBTTtBQUFBLGdCQUFLLE9BQU07QUFBQSxnQkFBSyxPQUFNO0FBQUEsZ0JBQUssT0FBTTtBQUFBLGdCQUFLLE9BQU07QUFBQSxnQkFBSyxPQUFNO0FBQUEsZ0JBQ3BmLE9BQU07QUFBQSxnQkFBSyxPQUFNO0FBQUEsZ0JBQUssT0FBTTtBQUFBLGdCQUFLLE9BQU07QUFBQSxnQkFBSyxPQUFNO0FBQUEsZ0JBQUssT0FBTTtBQUFBLGdCQUFLLE9BQU07QUFBQSxjQUFJO0FBQUUsdUJBQVEsS0FBSztBQUFFLG9CQUFFLEVBQUUsUUFBUSxJQUFJLE9BQU8sR0FBRSxHQUFHLEdBQUUsRUFBRSxDQUFDLENBQUM7QUFBRSxrQkFBSSxJQUFFLDJEQUEyRCxNQUFNLEdBQUcsR0FBRSxJQUFFLHdGQUF3RixNQUFNLEdBQUc7QUFBRSxrQkFBRTtBQUFBLGdCQUFDLE1BQUssT0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsR0FBRSxDQUFDO0FBQUEsZ0JBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxDQUFDO0FBQUEsZ0JBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsVUFBVSxHQUFFLENBQUM7QUFBQSxnQkFBRSxNQUFLLE9BQUcsRUFBRSxFQUFFLEVBQUU7QUFBQSxnQkFBRSxNQUFLLE9BQUcsR0FBRyxFQUFFLElBQUUsUUFBTSxNQUFJLEdBQUUsQ0FBQztBQUFBLGdCQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsSUFBRyxDQUFDO0FBQUEsZ0JBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxJQUFHLEdBQUUsR0FBRztBQUFBLGdCQUFFLE1BQUssT0FBRyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDO0FBQUEsZ0JBQzFmLE1BQUssT0FBRyxFQUFFLENBQUM7QUFBQSxnQkFBRSxNQUFLLE9BQUcsRUFBRSxFQUFFLEdBQUUsQ0FBQztBQUFBLGdCQUFFLE1BQUssT0FBRztBQUFDLHNCQUFFLEVBQUU7QUFBRSx1QkFBRyxJQUFFLElBQUUsS0FBRyxLQUFHLE1BQUksS0FBRztBQUFJLHlCQUFPLEVBQUUsR0FBRSxDQUFDO0FBQUEsZ0JBQUM7QUFBQSxnQkFBRSxNQUFLLE9BQUc7QUFBQywyQkFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFLEtBQUcsRUFBRSxLQUFHLEdBQUUsTUFBSSxHQUFHLEVBQUUsSUFBRSxJQUFJLElBQUUsS0FBRyxJQUFJLEdBQUc7QUFBRTtBQUFDLHlCQUFPLEVBQUUsRUFBRSxLQUFHLEdBQUUsQ0FBQztBQUFBLGdCQUFDO0FBQUEsZ0JBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxLQUFHLEdBQUUsQ0FBQztBQUFBLGdCQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsSUFBRyxDQUFDO0FBQUEsZ0JBQUUsTUFBSyxNQUFJO0FBQUEsZ0JBQUssTUFBSyxPQUFHLEtBQUcsRUFBRSxLQUFHLEtBQUcsRUFBRSxJQUFFLE9BQUs7QUFBQSxnQkFBSyxNQUFLLE9BQUcsRUFBRSxFQUFFLElBQUcsQ0FBQztBQUFBLGdCQUFFLE1BQUssTUFBSTtBQUFBLGdCQUFLLE1BQUssT0FBRyxFQUFFLEtBQUc7QUFBQSxnQkFBRSxNQUFLLE9BQUcsRUFBRSxLQUFLLE9BQU8sRUFBRSxJQUFFLElBQUUsRUFBRSxLQUFHLENBQUMsR0FBRSxDQUFDO0FBQUEsZ0JBQUUsTUFBSyxPQUFHO0FBQUMsc0JBQUksSUFBRSxLQUFLLE9BQU8sRUFBRSxJQUFFLEtBQUcsRUFBRSxJQUFFLEtBQUcsS0FBRyxDQUFDO0FBQUUsd0JBQUksRUFBRSxJQUFFLE1BQUksRUFBRSxJQUFFLEtBQUcsS0FBRztBQUFJLHNCQUFHO0FBQUUsMEJBQUksTUFBSSxLQUFHLEVBQUUsSUFBRSxNQUFJLEVBQUUsS0FBRyxHQUFFLEtBQUcsS0FBRyxLQUFHLEtBQUcsR0FBRyxFQUFFLENBQUMsTUFBSSxJQUFFO0FBQUEsdUJBQVM7QUFBQyx3QkFBRTtBQUFHLHdCQUFJLEtBQUcsRUFBRSxJQUFFLElBQUUsRUFBRSxJQUFFLEtBQ3BmO0FBQUUscUJBQUMsS0FBRyxLQUFHLEtBQUcsS0FBRyxHQUFHLEVBQUUsSUFBRSxNQUFJLENBQUMsTUFBSTtBQUFBLGtCQUFJO0FBQUMseUJBQU8sRUFBRSxHQUFFLENBQUM7QUFBQSxnQkFBQztBQUFBLGdCQUFFLE1BQUssT0FBRyxFQUFFO0FBQUEsZ0JBQUUsTUFBSyxPQUFHLEVBQUUsS0FBSyxPQUFPLEVBQUUsSUFBRSxLQUFHLEVBQUUsSUFBRSxLQUFHLEtBQUcsQ0FBQyxHQUFFLENBQUM7QUFBQSxnQkFBRSxNQUFLLFFBQUksRUFBRSxJQUFFLE1BQU0sU0FBUyxFQUFFLFVBQVUsQ0FBQztBQUFBLGdCQUFFLE1BQUssT0FBRyxFQUFFLElBQUU7QUFBQSxnQkFBSyxNQUFLLE9BQUc7QUFBQyxzQkFBRSxFQUFFO0FBQUcsc0JBQUksSUFBRSxLQUFHO0FBQUUsc0JBQUUsS0FBSyxJQUFJLENBQUMsSUFBRTtBQUFHLDBCQUFRLElBQUUsTUFBSSxPQUFLLE9BQU8sVUFBUSxJQUFFLEtBQUcsTUFBSSxJQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUU7QUFBQSxnQkFBQztBQUFBLGdCQUFFLE1BQUssT0FBRyxFQUFFO0FBQUEsZ0JBQUcsTUFBSyxNQUFJO0FBQUEsY0FBRztBQUFFLGtC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QSxRQUNOLFFBQVE7QUFBQSxNQUNaLENBQUM7QUFBQSxJQUNMO0FBRUEsY0FBVSxXQUFXLElBQUk7QUFBQSxFQUM3QjtBQUNKOyIsCiAgIm5hbWVzIjogWyJlIiwgInBlcmZvcm1hbmNlIiwgIkJ1ZmZlciIsICJmaWxsIiwgInJlYWQiLCAiaSIsICJjb21wYXJlIiwgImJ5dGVMZW5ndGgiLCAiZGVmYXVsdFNldFRpbW91dCIsICJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwgIkl0ZW0iLCAiY2FjaGVkU2V0VGltZW91dCIsICJjYWNoZWRDbGVhclRpbWVvdXQiLCAicGVyZm9ybWFuY2UiLCAicGVyZm9ybWFuY2VOb3ciLCAic3RhcnRUaW1lIiwgImluaXRfcHJvY2VzcyIsICJpbmhlcml0cyIsICJiYXNlIiwgImluaXRfcHJvY2VzcyIsICJoYXNPd25Qcm9wZXJ0eSIsICJtYXAiLCAiaXNBcnJheSIsICJwYXJzZSIsICJzZWxmIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAiZ2xvYmFsIiwgImV4cG9ydHMiLCAiYmFzZSIsICJlcnJvciIsICJvcHRpb25zIiwgIl9hIiwgInNlbGYiLCAiaW5kZXgiLCAiaXNBcnJheSIsICJMdWFFbmdpbmUiLCAiQnVmZmVyIiwgInZlcnNpb24iLCAiTHVhRmFjdG9yeSIsICJpbXBvcnRfb2JzaWRpYW4iLCAiZXJyb3IiLCAiZXJyb3IiXQp9Cg==
